/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.ClusterName != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv62 := &x.CreationTimestamp
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv62) {
				} else if yym63 {
					z.DecBinaryUnmarshal(yyv62)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv62)
				} else {
					z.DecFallback(yyv62, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym65 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym65 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv68 := &x.Labels
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv70 := &x.Annotations
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					z.F.DecMapStringStringX(yyv70, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv72 := &x.OwnerReferences
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv72), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv74 := &x.Finalizers
				yym75 := z.DecBinary()
				_ = yym75
				if false {
				} else {
					z.F.DecSliceStringX(yyv74, false, d)
				}
			}
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj77 int
	var yyb77 bool
	var yyhl77 bool = l >= 0
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv85 := &x.CreationTimestamp
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv85) {
		} else if yym86 {
			z.DecBinaryUnmarshal(yyv85)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv85)
		} else {
			z.DecFallback(yyv85, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym88 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym88 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv91 := &x.Labels
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv93 := &x.Annotations
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecMapStringStringX(yyv93, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv95 := &x.OwnerReferences
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv95), d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv97 := &x.Finalizers
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else {
			z.F.DecSliceStringX(yyv97, false, d)
		}
	}
	yyj77++
	if yyhl77 {
		yyb77 = yyj77 > l
	} else {
		yyb77 = r.CheckBreak()
	}
	if yyb77 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj77++
		if yyhl77 {
			yyb77 = yyj77 > l
		} else {
			yyb77 = r.CheckBreak()
		}
		if yyb77 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj77-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [25]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			yyq101[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq101[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq101[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq101[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq101[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq101[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq101[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq101[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq101[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq101[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq101[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq101[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq101[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq101[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq101[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq101[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq101[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq101[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq101[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq101[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq101[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq101[22] = x.VolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq101[23] = x.VolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq101[24] = x.VolumeSource.SystemProjection != nil && x.SystemProjection != nil
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(25)
			} else {
				yynn101 = 1
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn105 bool
			if x.VolumeSource.HostPath == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr101 || yy2arr101 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr101 || yy2arr101 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr101 || yy2arr101 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr101 || yy2arr101 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.GitRepo == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr101 || yy2arr101 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.Secret == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr101 || yy2arr101 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.NFS == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr101 || yy2arr101 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.ISCSI == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr101 || yy2arr101 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr101 || yy2arr101 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr101 || yy2arr101 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.RBD == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr101 || yy2arr101 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.Quobyte == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr101 || yy2arr101 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr101 || yy2arr101 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.Cinder == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr101 || yy2arr101 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.CephFS == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr101 || yy2arr101 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.Flocker == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr101 || yy2arr101 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr101 || yy2arr101 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.FC == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr101 || yy2arr101 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.AzureFile == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr101 || yy2arr101 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr101 || yy2arr101 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr101 || yy2arr101 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.AzureDisk == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr101 || yy2arr101 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[22] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PhotonPersistentDisk == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr101 || yy2arr101 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[23] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.SystemProjection == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr101 || yy2arr101 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq101[24] {
						if x.SystemProjection == nil {
							r.EncodeNil()
						} else {
							x.SystemProjection.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq101[24] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("system"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.SystemProjection == nil {
							r.EncodeNil()
						} else {
							x.SystemProjection.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.VolumeSource.AzureDisk == nil {
				x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.VolumeSource.PhotonPersistentDisk == nil {
				x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "system":
			if x.VolumeSource.SystemProjection == nil {
				x.VolumeSource.SystemProjection = new(SystemProjections)
			}
			if r.TryDecodeAsNil() {
				if x.SystemProjection != nil {
					x.SystemProjection = nil
				}
			} else {
				if x.SystemProjection == nil {
					x.SystemProjection = new(SystemProjections)
				}
				x.SystemProjection.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureDisk == nil {
		x.VolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PhotonPersistentDisk == nil {
		x.VolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.SystemProjection == nil {
		x.VolumeSource.SystemProjection = new(SystemProjections)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SystemProjection != nil {
			x.SystemProjection = nil
		}
	} else {
		if x.SystemProjection == nil {
			x.SystemProjection = new(SystemProjections)
		}
		x.SystemProjection.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym183 := z.EncBinary()
		_ = yym183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep184 := !z.EncBinary()
			yy2arr184 := z.EncBasicHandle().StructToArray
			var yyq184 [24]bool
			_, _, _ = yysep184, yyq184, yy2arr184
			const yyr184 bool = false
			yyq184[0] = x.HostPath != nil
			yyq184[1] = x.EmptyDir != nil
			yyq184[2] = x.GCEPersistentDisk != nil
			yyq184[3] = x.AWSElasticBlockStore != nil
			yyq184[4] = x.GitRepo != nil
			yyq184[5] = x.Secret != nil
			yyq184[6] = x.NFS != nil
			yyq184[7] = x.ISCSI != nil
			yyq184[8] = x.Glusterfs != nil
			yyq184[9] = x.PersistentVolumeClaim != nil
			yyq184[10] = x.RBD != nil
			yyq184[11] = x.Quobyte != nil
			yyq184[12] = x.FlexVolume != nil
			yyq184[13] = x.Cinder != nil
			yyq184[14] = x.CephFS != nil
			yyq184[15] = x.Flocker != nil
			yyq184[16] = x.DownwardAPI != nil
			yyq184[17] = x.FC != nil
			yyq184[18] = x.AzureFile != nil
			yyq184[19] = x.ConfigMap != nil
			yyq184[20] = x.VsphereVolume != nil
			yyq184[21] = x.AzureDisk != nil
			yyq184[22] = x.PhotonPersistentDisk != nil
			yyq184[23] = x.SystemProjection != nil
			var yynn184 int
			if yyr184 || yy2arr184 {
				r.EncodeArrayStart(24)
			} else {
				yynn184 = 0
				for _, b := range yyq184 {
					if b {
						yynn184++
					}
				}
				r.EncodeMapStart(yynn184)
				yynn184 = 0
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[21] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[22] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[22] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq184[23] {
					if x.SystemProjection == nil {
						r.EncodeNil()
					} else {
						x.SystemProjection.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq184[23] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("system"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SystemProjection == nil {
						r.EncodeNil()
					} else {
						x.SystemProjection.CodecEncodeSelf(e)
					}
				}
			}
			if yyr184 || yy2arr184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym209 := z.DecBinary()
	_ = yym209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct210 := r.ContainerType()
		if yyct210 == codecSelferValueTypeMap1234 {
			yyl210 := r.ReadMapStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl210, d)
			}
		} else if yyct210 == codecSelferValueTypeArray1234 {
			yyl210 := r.ReadArrayStart()
			if yyl210 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl210, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys211Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys211Slc
	var yyhl211 bool = l >= 0
	for yyj211 := 0; ; yyj211++ {
		if yyhl211 {
			if yyj211 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys211Slc = r.DecodeBytes(yys211Slc, true, true)
		yys211 := string(yys211Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys211 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "system":
			if r.TryDecodeAsNil() {
				if x.SystemProjection != nil {
					x.SystemProjection = nil
				}
			} else {
				if x.SystemProjection == nil {
					x.SystemProjection = new(SystemProjections)
				}
				x.SystemProjection.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys211)
		} // end switch yys211
	} // end for yyj211
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj236 int
	var yyb236 bool
	var yyhl236 bool = l >= 0
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj236++
	if yyhl236 {
		yyb236 = yyj236 > l
	} else {
		yyb236 = r.CheckBreak()
	}
	if yyb236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SystemProjection != nil {
			x.SystemProjection = nil
		}
	} else {
		if x.SystemProjection == nil {
			x.SystemProjection = new(SystemProjections)
		}
		x.SystemProjection.CodecDecodeSelf(d)
	}
	for {
		yyj236++
		if yyhl236 {
			yyb236 = yyj236 > l
		} else {
			yyb236 = r.CheckBreak()
		}
		if yyb236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym261 := z.EncBinary()
		_ = yym261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep262 := !z.EncBinary()
			yy2arr262 := z.EncBasicHandle().StructToArray
			var yyq262 [17]bool
			_, _, _ = yysep262, yyq262, yy2arr262
			const yyr262 bool = false
			yyq262[0] = x.GCEPersistentDisk != nil
			yyq262[1] = x.AWSElasticBlockStore != nil
			yyq262[2] = x.HostPath != nil
			yyq262[3] = x.Glusterfs != nil
			yyq262[4] = x.NFS != nil
			yyq262[5] = x.RBD != nil
			yyq262[6] = x.Quobyte != nil
			yyq262[7] = x.ISCSI != nil
			yyq262[8] = x.FlexVolume != nil
			yyq262[9] = x.Cinder != nil
			yyq262[10] = x.CephFS != nil
			yyq262[11] = x.FC != nil
			yyq262[12] = x.Flocker != nil
			yyq262[13] = x.AzureFile != nil
			yyq262[14] = x.VsphereVolume != nil
			yyq262[15] = x.AzureDisk != nil
			yyq262[16] = x.PhotonPersistentDisk != nil
			var yynn262 int
			if yyr262 || yy2arr262 {
				r.EncodeArrayStart(17)
			} else {
				yynn262 = 0
				for _, b := range yyq262 {
					if b {
						yynn262++
					}
				}
				r.EncodeMapStart(yynn262)
				yynn262 = 0
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[15] {
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureDisk == nil {
						r.EncodeNil()
					} else {
						x.AzureDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq262[16] {
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq262[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PhotonPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.PhotonPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr262 || yy2arr262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym280 := z.DecBinary()
	_ = yym280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct281 := r.ContainerType()
		if yyct281 == codecSelferValueTypeMap1234 {
			yyl281 := r.ReadMapStart()
			if yyl281 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl281, d)
			}
		} else if yyct281 == codecSelferValueTypeArray1234 {
			yyl281 := r.ReadArrayStart()
			if yyl281 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys282Slc
	var yyhl282 bool = l >= 0
	for yyj282 := 0; ; yyj282++ {
		if yyhl282 {
			if yyj282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys282Slc = r.DecodeBytes(yys282Slc, true, true)
		yys282 := string(yys282Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys282 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys282)
		} // end switch yys282
	} // end for yyj282
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj300 int
	var yyb300 bool
	var yyhl300 bool = l >= 0
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	for {
		yyj300++
		if yyhl300 {
			yyb300 = yyj300 > l
		} else {
			yyb300 = r.CheckBreak()
		}
		if yyb300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym318 := z.EncBinary()
		_ = yym318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep319 := !z.EncBinary()
			yy2arr319 := z.EncBasicHandle().StructToArray
			var yyq319 [2]bool
			_, _, _ = yysep319, yyq319, yy2arr319
			const yyr319 bool = false
			yyq319[1] = x.ReadOnly != false
			var yynn319 int
			if yyr319 || yy2arr319 {
				r.EncodeArrayStart(2)
			} else {
				yynn319 = 1
				for _, b := range yyq319 {
					if b {
						yynn319++
					}
				}
				r.EncodeMapStart(yynn319)
				yynn319 = 0
			}
			if yyr319 || yy2arr319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym321 := z.EncBinary()
				_ = yym321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym322 := z.EncBinary()
				_ = yym322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr319 || yy2arr319 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq319[1] {
					yym324 := z.EncBinary()
					_ = yym324
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq319[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym325 := z.EncBinary()
					_ = yym325
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr319 || yy2arr319 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym326 := z.DecBinary()
	_ = yym326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct327 := r.ContainerType()
		if yyct327 == codecSelferValueTypeMap1234 {
			yyl327 := r.ReadMapStart()
			if yyl327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl327, d)
			}
		} else if yyct327 == codecSelferValueTypeArray1234 {
			yyl327 := r.ReadArrayStart()
			if yyl327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys328Slc
	var yyhl328 bool = l >= 0
	for yyj328 := 0; ; yyj328++ {
		if yyhl328 {
			if yyj328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys328Slc = r.DecodeBytes(yys328Slc, true, true)
		yys328 := string(yys328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys328 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys328)
		} // end switch yys328
	} // end for yyj328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj331 int
	var yyb331 bool
	var yyhl331 bool = l >= 0
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj331++
		if yyhl331 {
			yyb331 = yyj331 > l
		} else {
			yyb331 = r.CheckBreak()
		}
		if yyb331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym334 := z.EncBinary()
		_ = yym334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep335 := !z.EncBinary()
			yy2arr335 := z.EncBasicHandle().StructToArray
			var yyq335 [5]bool
			_, _, _ = yysep335, yyq335, yy2arr335
			const yyr335 bool = false
			yyq335[0] = x.Kind != ""
			yyq335[1] = x.APIVersion != ""
			yyq335[2] = true
			yyq335[3] = true
			yyq335[4] = true
			var yynn335 int
			if yyr335 || yy2arr335 {
				r.EncodeArrayStart(5)
			} else {
				yynn335 = 0
				for _, b := range yyq335 {
					if b {
						yynn335++
					}
				}
				r.EncodeMapStart(yynn335)
				yynn335 = 0
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq335[0] {
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq335[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq335[1] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq335[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq335[2] {
					yy343 := &x.ObjectMeta
					yy343.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq335[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy344 := &x.ObjectMeta
					yy344.CodecEncodeSelf(e)
				}
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq335[3] {
					yy346 := &x.Spec
					yy346.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq335[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy347 := &x.Spec
					yy347.CodecEncodeSelf(e)
				}
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq335[4] {
					yy349 := &x.Status
					yy349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq335[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy350 := &x.Status
					yy350.CodecEncodeSelf(e)
				}
			}
			if yyr335 || yy2arr335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym351 := z.DecBinary()
	_ = yym351
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct352 := r.ContainerType()
		if yyct352 == codecSelferValueTypeMap1234 {
			yyl352 := r.ReadMapStart()
			if yyl352 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl352, d)
			}
		} else if yyct352 == codecSelferValueTypeArray1234 {
			yyl352 := r.ReadArrayStart()
			if yyl352 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl352, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys353Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys353Slc
	var yyhl353 bool = l >= 0
	for yyj353 := 0; ; yyj353++ {
		if yyhl353 {
			if yyj353 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys353Slc = r.DecodeBytes(yys353Slc, true, true)
		yys353 := string(yys353Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys353 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv356 := &x.ObjectMeta
				yyv356.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv357 := &x.Spec
				yyv357.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv358 := &x.Status
				yyv358.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys353)
		} // end switch yys353
	} // end for yyj353
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj359 int
	var yyb359 bool
	var yyhl359 bool = l >= 0
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv362 := &x.ObjectMeta
		yyv362.CodecDecodeSelf(d)
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv363 := &x.Spec
		yyv363.CodecDecodeSelf(d)
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv364 := &x.Status
		yyv364.CodecDecodeSelf(d)
	}
	for {
		yyj359++
		if yyhl359 {
			yyb359 = yyj359 > l
		} else {
			yyb359 = r.CheckBreak()
		}
		if yyb359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym365 := z.EncBinary()
		_ = yym365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep366 := !z.EncBinary()
			yy2arr366 := z.EncBasicHandle().StructToArray
			var yyq366 [21]bool
			_, _, _ = yysep366, yyq366, yy2arr366
			const yyr366 bool = false
			yyq366[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq366[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq366[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq366[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq366[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq366[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq366[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq366[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq366[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq366[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq366[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq366[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq366[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq366[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq366[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq366[16] = x.PersistentVolumeSource.AzureDisk != nil && x.AzureDisk != nil
			yyq366[17] = x.PersistentVolumeSource.PhotonPersistentDisk != nil && x.PhotonPersistentDisk != nil
			yyq366[18] = len(x.AccessModes) != 0
			yyq366[19] = x.ClaimRef != nil
			yyq366[20] = x.PersistentVolumeReclaimPolicy != ""
			var yynn366 int
			if yyr366 || yy2arr366 {
				r.EncodeArrayStart(21)
			} else {
				yynn366 = 1
				for _, b := range yyq366 {
					if b {
						yynn366++
					}
				}
				r.EncodeMapStart(yynn366)
				yynn366 = 0
			}
			if yyr366 || yy2arr366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn368 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn368 = true
				goto LABEL368
			}
		LABEL368:
			if yyr366 || yy2arr366 {
				if yyn368 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn368 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn369 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn369 = true
				goto LABEL369
			}
		LABEL369:
			if yyr366 || yy2arr366 {
				if yyn369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn369 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn370 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn370 = true
				goto LABEL370
			}
		LABEL370:
			if yyr366 || yy2arr366 {
				if yyn370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn370 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn371 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn371 = true
				goto LABEL371
			}
		LABEL371:
			if yyr366 || yy2arr366 {
				if yyn371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn371 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn372 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn372 = true
				goto LABEL372
			}
		LABEL372:
			if yyr366 || yy2arr366 {
				if yyn372 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn372 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn373 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn373 = true
				goto LABEL373
			}
		LABEL373:
			if yyr366 || yy2arr366 {
				if yyn373 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn373 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn374 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn374 = true
				goto LABEL374
			}
		LABEL374:
			if yyr366 || yy2arr366 {
				if yyn374 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn374 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn375 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn375 = true
				goto LABEL375
			}
		LABEL375:
			if yyr366 || yy2arr366 {
				if yyn375 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn375 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn376 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn376 = true
				goto LABEL376
			}
		LABEL376:
			if yyr366 || yy2arr366 {
				if yyn376 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn376 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn377 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn377 = true
				goto LABEL377
			}
		LABEL377:
			if yyr366 || yy2arr366 {
				if yyn377 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn377 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn378 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn378 = true
				goto LABEL378
			}
		LABEL378:
			if yyr366 || yy2arr366 {
				if yyn378 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn378 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn379 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn379 = true
				goto LABEL379
			}
		LABEL379:
			if yyr366 || yy2arr366 {
				if yyn379 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn379 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn380 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn380 = true
				goto LABEL380
			}
		LABEL380:
			if yyr366 || yy2arr366 {
				if yyn380 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn380 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn381 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn381 = true
				goto LABEL381
			}
		LABEL381:
			if yyr366 || yy2arr366 {
				if yyn381 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn381 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn382 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn382 = true
				goto LABEL382
			}
		LABEL382:
			if yyr366 || yy2arr366 {
				if yyn382 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn382 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn383 bool
			if x.PersistentVolumeSource.AzureDisk == nil {
				yyn383 = true
				goto LABEL383
			}
		LABEL383:
			if yyr366 || yy2arr366 {
				if yyn383 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[16] {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn383 {
						r.EncodeNil()
					} else {
						if x.AzureDisk == nil {
							r.EncodeNil()
						} else {
							x.AzureDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn384 bool
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				yyn384 = true
				goto LABEL384
			}
		LABEL384:
			if yyr366 || yy2arr366 {
				if yyn384 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq366[17] {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq366[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("photonPersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn384 {
						r.EncodeNil()
					} else {
						if x.PhotonPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.PhotonPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr366 || yy2arr366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq366[18] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym386 := z.EncBinary()
						_ = yym386
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq366[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym387 := z.EncBinary()
						_ = yym387
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr366 || yy2arr366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq366[19] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq366[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr366 || yy2arr366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq366[20] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq366[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr366 || yy2arr366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym390 := z.DecBinary()
	_ = yym390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct391 := r.ContainerType()
		if yyct391 == codecSelferValueTypeMap1234 {
			yyl391 := r.ReadMapStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl391, d)
			}
		} else if yyct391 == codecSelferValueTypeArray1234 {
			yyl391 := r.ReadArrayStart()
			if yyl391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys392Slc
	var yyhl392 bool = l >= 0
	for yyj392 := 0; ; yyj392++ {
		if yyhl392 {
			if yyj392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys392Slc = r.DecodeBytes(yys392Slc, true, true)
		yys392 := string(yys392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys392 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv393 := &x.Capacity
				yyv393.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "azureDisk":
			if x.PersistentVolumeSource.AzureDisk == nil {
				x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureDisk != nil {
					x.AzureDisk = nil
				}
			} else {
				if x.AzureDisk == nil {
					x.AzureDisk = new(AzureDiskVolumeSource)
				}
				x.AzureDisk.CodecDecodeSelf(d)
			}
		case "photonPersistentDisk":
			if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
				x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PhotonPersistentDisk != nil {
					x.PhotonPersistentDisk = nil
				}
			} else {
				if x.PhotonPersistentDisk == nil {
					x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
				}
				x.PhotonPersistentDisk.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv411 := &x.AccessModes
				yym412 := z.DecBinary()
				_ = yym412
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv411), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys392)
		} // end switch yys392
	} // end for yyj392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj415 int
	var yyb415 bool
	var yyhl415 bool = l >= 0
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv416 := &x.Capacity
		yyv416.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureDisk == nil {
		x.PersistentVolumeSource.AzureDisk = new(AzureDiskVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureDisk != nil {
			x.AzureDisk = nil
		}
	} else {
		if x.AzureDisk == nil {
			x.AzureDisk = new(AzureDiskVolumeSource)
		}
		x.AzureDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.PhotonPersistentDisk == nil {
		x.PersistentVolumeSource.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PhotonPersistentDisk != nil {
			x.PhotonPersistentDisk = nil
		}
	} else {
		if x.PhotonPersistentDisk == nil {
			x.PhotonPersistentDisk = new(PhotonPersistentDiskVolumeSource)
		}
		x.PhotonPersistentDisk.CodecDecodeSelf(d)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv434 := &x.AccessModes
		yym435 := z.DecBinary()
		_ = yym435
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv434), d)
		}
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj415++
	if yyhl415 {
		yyb415 = yyj415 > l
	} else {
		yyb415 = r.CheckBreak()
	}
	if yyb415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj415++
		if yyhl415 {
			yyb415 = yyj415 > l
		} else {
			yyb415 = r.CheckBreak()
		}
		if yyb415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym438 := z.EncBinary()
	_ = yym438
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym439 := z.DecBinary()
	_ = yym439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym440 := z.EncBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep441 := !z.EncBinary()
			yy2arr441 := z.EncBasicHandle().StructToArray
			var yyq441 [3]bool
			_, _, _ = yysep441, yyq441, yy2arr441
			const yyr441 bool = false
			yyq441[0] = x.Phase != ""
			yyq441[1] = x.Message != ""
			yyq441[2] = x.Reason != ""
			var yynn441 int
			if yyr441 || yy2arr441 {
				r.EncodeArrayStart(3)
			} else {
				yynn441 = 0
				for _, b := range yyq441 {
					if b {
						yynn441++
					}
				}
				r.EncodeMapStart(yynn441)
				yynn441 = 0
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[1] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[2] {
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym449 := z.DecBinary()
	_ = yym449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct450 := r.ContainerType()
		if yyct450 == codecSelferValueTypeMap1234 {
			yyl450 := r.ReadMapStart()
			if yyl450 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl450, d)
			}
		} else if yyct450 == codecSelferValueTypeArray1234 {
			yyl450 := r.ReadArrayStart()
			if yyl450 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys451Slc
	var yyhl451 bool = l >= 0
	for yyj451 := 0; ; yyj451++ {
		if yyhl451 {
			if yyj451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys451Slc = r.DecodeBytes(yys451Slc, true, true)
		yys451 := string(yys451Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys451 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys451)
		} // end switch yys451
	} // end for yyj451
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj455 int
	var yyb455 bool
	var yyhl455 bool = l >= 0
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj455++
		if yyhl455 {
			yyb455 = yyj455 > l
		} else {
			yyb455 = r.CheckBreak()
		}
		if yyb455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym459 := z.EncBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep460 := !z.EncBinary()
			yy2arr460 := z.EncBasicHandle().StructToArray
			var yyq460 [4]bool
			_, _, _ = yysep460, yyq460, yy2arr460
			const yyr460 bool = false
			yyq460[0] = x.Kind != ""
			yyq460[1] = x.APIVersion != ""
			yyq460[2] = true
			var yynn460 int
			if yyr460 || yy2arr460 {
				r.EncodeArrayStart(4)
			} else {
				yynn460 = 1
				for _, b := range yyq460 {
					if b {
						yynn460++
					}
				}
				r.EncodeMapStart(yynn460)
				yynn460 = 0
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[0] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[1] {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[2] {
					yy468 := &x.ListMeta
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy468) {
					} else {
						z.EncFallback(yy468)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy470 := &x.ListMeta
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy470) {
					} else {
						z.EncFallback(yy470)
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym475 := z.DecBinary()
	_ = yym475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct476 := r.ContainerType()
		if yyct476 == codecSelferValueTypeMap1234 {
			yyl476 := r.ReadMapStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl476, d)
			}
		} else if yyct476 == codecSelferValueTypeArray1234 {
			yyl476 := r.ReadArrayStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys477Slc
	var yyhl477 bool = l >= 0
	for yyj477 := 0; ; yyj477++ {
		if yyhl477 {
			if yyj477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys477Slc = r.DecodeBytes(yys477Slc, true, true)
		yys477 := string(yys477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys477 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv480 := &x.ListMeta
				yym481 := z.DecBinary()
				_ = yym481
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv480) {
				} else {
					z.DecFallback(yyv480, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv482 := &x.Items
				yym483 := z.DecBinary()
				_ = yym483
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv482), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys477)
		} // end switch yys477
	} // end for yyj477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj484 int
	var yyb484 bool
	var yyhl484 bool = l >= 0
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv487 := &x.ListMeta
		yym488 := z.DecBinary()
		_ = yym488
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv487) {
		} else {
			z.DecFallback(yyv487, false)
		}
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv489 := &x.Items
		yym490 := z.DecBinary()
		_ = yym490
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv489), d)
		}
	}
	for {
		yyj484++
		if yyhl484 {
			yyb484 = yyj484 > l
		} else {
			yyb484 = r.CheckBreak()
		}
		if yyb484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym491 := z.EncBinary()
		_ = yym491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep492 := !z.EncBinary()
			yy2arr492 := z.EncBasicHandle().StructToArray
			var yyq492 [5]bool
			_, _, _ = yysep492, yyq492, yy2arr492
			const yyr492 bool = false
			yyq492[0] = x.Kind != ""
			yyq492[1] = x.APIVersion != ""
			yyq492[2] = true
			yyq492[3] = true
			yyq492[4] = true
			var yynn492 int
			if yyr492 || yy2arr492 {
				r.EncodeArrayStart(5)
			} else {
				yynn492 = 0
				for _, b := range yyq492 {
					if b {
						yynn492++
					}
				}
				r.EncodeMapStart(yynn492)
				yynn492 = 0
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[0] {
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq492[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[1] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq492[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[2] {
					yy500 := &x.ObjectMeta
					yy500.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq492[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy501 := &x.ObjectMeta
					yy501.CodecEncodeSelf(e)
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[3] {
					yy503 := &x.Spec
					yy503.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq492[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy504 := &x.Spec
					yy504.CodecEncodeSelf(e)
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[4] {
					yy506 := &x.Status
					yy506.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq492[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy507 := &x.Status
					yy507.CodecEncodeSelf(e)
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct509 := r.ContainerType()
		if yyct509 == codecSelferValueTypeMap1234 {
			yyl509 := r.ReadMapStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl509, d)
			}
		} else if yyct509 == codecSelferValueTypeArray1234 {
			yyl509 := r.ReadArrayStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys510Slc
	var yyhl510 bool = l >= 0
	for yyj510 := 0; ; yyj510++ {
		if yyhl510 {
			if yyj510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys510Slc = r.DecodeBytes(yys510Slc, true, true)
		yys510 := string(yys510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv513 := &x.ObjectMeta
				yyv513.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv514 := &x.Spec
				yyv514.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv515 := &x.Status
				yyv515.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys510)
		} // end switch yys510
	} // end for yyj510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj516 int
	var yyb516 bool
	var yyhl516 bool = l >= 0
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv519 := &x.ObjectMeta
		yyv519.CodecDecodeSelf(d)
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv520 := &x.Spec
		yyv520.CodecDecodeSelf(d)
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv521 := &x.Status
		yyv521.CodecDecodeSelf(d)
	}
	for {
		yyj516++
		if yyhl516 {
			yyb516 = yyj516 > l
		} else {
			yyb516 = r.CheckBreak()
		}
		if yyb516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym522 := z.EncBinary()
		_ = yym522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep523 := !z.EncBinary()
			yy2arr523 := z.EncBasicHandle().StructToArray
			var yyq523 [4]bool
			_, _, _ = yysep523, yyq523, yy2arr523
			const yyr523 bool = false
			yyq523[0] = x.Kind != ""
			yyq523[1] = x.APIVersion != ""
			yyq523[2] = true
			var yynn523 int
			if yyr523 || yy2arr523 {
				r.EncodeArrayStart(4)
			} else {
				yynn523 = 1
				for _, b := range yyq523 {
					if b {
						yynn523++
					}
				}
				r.EncodeMapStart(yynn523)
				yynn523 = 0
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[0] {
					yym525 := z.EncBinary()
					_ = yym525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[1] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq523[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq523[2] {
					yy531 := &x.ListMeta
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else if z.HasExtensions() && z.EncExt(yy531) {
					} else {
						z.EncFallback(yy531)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq523[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy533 := &x.ListMeta
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else if z.HasExtensions() && z.EncExt(yy533) {
					} else {
						z.EncFallback(yy533)
					}
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr523 || yy2arr523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct539 := r.ContainerType()
		if yyct539 == codecSelferValueTypeMap1234 {
			yyl539 := r.ReadMapStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl539, d)
			}
		} else if yyct539 == codecSelferValueTypeArray1234 {
			yyl539 := r.ReadArrayStart()
			if yyl539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys540Slc
	var yyhl540 bool = l >= 0
	for yyj540 := 0; ; yyj540++ {
		if yyhl540 {
			if yyj540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys540Slc = r.DecodeBytes(yys540Slc, true, true)
		yys540 := string(yys540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys540 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv543 := &x.ListMeta
				yym544 := z.DecBinary()
				_ = yym544
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv543) {
				} else {
					z.DecFallback(yyv543, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv545 := &x.Items
				yym546 := z.DecBinary()
				_ = yym546
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv545), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys540)
		} // end switch yys540
	} // end for yyj540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj547 int
	var yyb547 bool
	var yyhl547 bool = l >= 0
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv550 := &x.ListMeta
		yym551 := z.DecBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv550) {
		} else {
			z.DecFallback(yyv550, false)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv552 := &x.Items
		yym553 := z.DecBinary()
		_ = yym553
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv552), d)
		}
	}
	for {
		yyj547++
		if yyhl547 {
			yyb547 = yyj547 > l
		} else {
			yyb547 = r.CheckBreak()
		}
		if yyb547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym554 := z.EncBinary()
		_ = yym554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep555 := !z.EncBinary()
			yy2arr555 := z.EncBasicHandle().StructToArray
			var yyq555 [4]bool
			_, _, _ = yysep555, yyq555, yy2arr555
			const yyr555 bool = false
			yyq555[0] = len(x.AccessModes) != 0
			yyq555[1] = x.Selector != nil
			yyq555[2] = true
			yyq555[3] = x.VolumeName != ""
			var yynn555 int
			if yyr555 || yy2arr555 {
				r.EncodeArrayStart(4)
			} else {
				yynn555 = 0
				for _, b := range yyq555 {
					if b {
						yynn555++
					}
				}
				r.EncodeMapStart(yynn555)
				yynn555 = 0
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym557 := z.EncBinary()
						_ = yym557
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym558 := z.EncBinary()
						_ = yym558
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym560 := z.EncBinary()
						_ = yym560
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym561 := z.EncBinary()
						_ = yym561
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[2] {
					yy563 := &x.Resources
					yy563.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq555[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy564 := &x.Resources
					yy564.CodecEncodeSelf(e)
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq555[3] {
					yym566 := z.EncBinary()
					_ = yym566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq555[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr555 || yy2arr555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym568 := z.DecBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct569 := r.ContainerType()
		if yyct569 == codecSelferValueTypeMap1234 {
			yyl569 := r.ReadMapStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl569, d)
			}
		} else if yyct569 == codecSelferValueTypeArray1234 {
			yyl569 := r.ReadArrayStart()
			if yyl569 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl569, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys570Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys570Slc
	var yyhl570 bool = l >= 0
	for yyj570 := 0; ; yyj570++ {
		if yyhl570 {
			if yyj570 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys570Slc = r.DecodeBytes(yys570Slc, true, true)
		yys570 := string(yys570Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys570 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv571 := &x.AccessModes
				yym572 := z.DecBinary()
				_ = yym572
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv571), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym574 := z.DecBinary()
				_ = yym574
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv575 := &x.Resources
				yyv575.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys570)
		} // end switch yys570
	} // end for yyj570
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj577 int
	var yyb577 bool
	var yyhl577 bool = l >= 0
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv578 := &x.AccessModes
		yym579 := z.DecBinary()
		_ = yym579
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv578), d)
		}
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym581 := z.DecBinary()
		_ = yym581
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv582 := &x.Resources
		yyv582.CodecDecodeSelf(d)
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj577++
		if yyhl577 {
			yyb577 = yyj577 > l
		} else {
			yyb577 = r.CheckBreak()
		}
		if yyb577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym584 := z.EncBinary()
		_ = yym584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep585 := !z.EncBinary()
			yy2arr585 := z.EncBasicHandle().StructToArray
			var yyq585 [3]bool
			_, _, _ = yysep585, yyq585, yy2arr585
			const yyr585 bool = false
			yyq585[0] = x.Phase != ""
			yyq585[1] = len(x.AccessModes) != 0
			yyq585[2] = len(x.Capacity) != 0
			var yynn585 int
			if yyr585 || yy2arr585 {
				r.EncodeArrayStart(3)
			} else {
				yynn585 = 0
				for _, b := range yyq585 {
					if b {
						yynn585++
					}
				}
				r.EncodeMapStart(yynn585)
				yynn585 = 0
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym588 := z.EncBinary()
						_ = yym588
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym589 := z.EncBinary()
						_ = yym589
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym591 := z.DecBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct592 := r.ContainerType()
		if yyct592 == codecSelferValueTypeMap1234 {
			yyl592 := r.ReadMapStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl592, d)
			}
		} else if yyct592 == codecSelferValueTypeArray1234 {
			yyl592 := r.ReadArrayStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys593Slc
	var yyhl593 bool = l >= 0
	for yyj593 := 0; ; yyj593++ {
		if yyhl593 {
			if yyj593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys593Slc = r.DecodeBytes(yys593Slc, true, true)
		yys593 := string(yys593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys593 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv595 := &x.AccessModes
				yym596 := z.DecBinary()
				_ = yym596
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv595), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv597 := &x.Capacity
				yyv597.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys593)
		} // end switch yys593
	} // end for yyj593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj598 int
	var yyb598 bool
	var yyhl598 bool = l >= 0
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv600 := &x.AccessModes
		yym601 := z.DecBinary()
		_ = yym601
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv600), d)
		}
	}
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv602 := &x.Capacity
		yyv602.CodecDecodeSelf(d)
	}
	for {
		yyj598++
		if yyhl598 {
			yyb598 = yyj598 > l
		} else {
			yyb598 = r.CheckBreak()
		}
		if yyb598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym603 := z.EncBinary()
	_ = yym603
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym604 := z.DecBinary()
	_ = yym604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym605 := z.EncBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym606 := z.DecBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym607 := z.EncBinary()
	_ = yym607
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym608 := z.DecBinary()
	_ = yym608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [1]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			var yynn610 int
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(1)
			} else {
				yynn610 = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
				yynn610 = 0
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct615 := r.ContainerType()
		if yyct615 == codecSelferValueTypeMap1234 {
			yyl615 := r.ReadMapStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl615, d)
			}
		} else if yyct615 == codecSelferValueTypeArray1234 {
			yyl615 := r.ReadArrayStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl615, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys616Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys616Slc
	var yyhl616 bool = l >= 0
	for yyj616 := 0; ; yyj616++ {
		if yyhl616 {
			if yyj616 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys616Slc = r.DecodeBytes(yys616Slc, true, true)
		yys616 := string(yys616Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys616 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys616)
		} // end switch yys616
	} // end for yyj616
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj618 int
	var yyb618 bool
	var yyhl618 bool = l >= 0
	yyj618++
	if yyhl618 {
		yyb618 = yyj618 > l
	} else {
		yyb618 = r.CheckBreak()
	}
	if yyb618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj618++
		if yyhl618 {
			yyb618 = yyj618 > l
		} else {
			yyb618 = r.CheckBreak()
		}
		if yyb618 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj618-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym620 := z.EncBinary()
		_ = yym620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep621 := !z.EncBinary()
			yy2arr621 := z.EncBasicHandle().StructToArray
			var yyq621 [1]bool
			_, _, _ = yysep621, yyq621, yy2arr621
			const yyr621 bool = false
			yyq621[0] = x.Medium != ""
			var yynn621 int
			if yyr621 || yy2arr621 {
				r.EncodeArrayStart(1)
			} else {
				yynn621 = 0
				for _, b := range yyq621 {
					if b {
						yynn621++
					}
				}
				r.EncodeMapStart(yynn621)
				yynn621 = 0
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq621[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq621[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym623 := z.DecBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct624 := r.ContainerType()
		if yyct624 == codecSelferValueTypeMap1234 {
			yyl624 := r.ReadMapStart()
			if yyl624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl624, d)
			}
		} else if yyct624 == codecSelferValueTypeArray1234 {
			yyl624 := r.ReadArrayStart()
			if yyl624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys625Slc
	var yyhl625 bool = l >= 0
	for yyj625 := 0; ; yyj625++ {
		if yyhl625 {
			if yyj625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys625Slc = r.DecodeBytes(yys625Slc, true, true)
		yys625 := string(yys625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys625 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys625)
		} // end switch yys625
	} // end for yyj625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj627 int
	var yyb627 bool
	var yyhl627 bool = l >= 0
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj627++
		if yyhl627 {
			yyb627 = yyj627 > l
		} else {
			yyb627 = r.CheckBreak()
		}
		if yyb627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym629 := z.EncBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym630 := z.DecBinary()
	_ = yym630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym631 := z.EncBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym632 := z.DecBinary()
	_ = yym632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym633 := z.EncBinary()
		_ = yym633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep634 := !z.EncBinary()
			yy2arr634 := z.EncBasicHandle().StructToArray
			var yyq634 [4]bool
			_, _, _ = yysep634, yyq634, yy2arr634
			const yyr634 bool = false
			yyq634[1] = x.FSType != ""
			yyq634[2] = x.Partition != 0
			yyq634[3] = x.ReadOnly != false
			var yynn634 int
			if yyr634 || yy2arr634 {
				r.EncodeArrayStart(4)
			} else {
				yynn634 = 1
				for _, b := range yyq634 {
					if b {
						yynn634++
					}
				}
				r.EncodeMapStart(yynn634)
				yynn634 = 0
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym636 := z.EncBinary()
				_ = yym636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym637 := z.EncBinary()
				_ = yym637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[1] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[2] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq634[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[3] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq634[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym647 := z.DecBinary()
	_ = yym647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct648 := r.ContainerType()
		if yyct648 == codecSelferValueTypeMap1234 {
			yyl648 := r.ReadMapStart()
			if yyl648 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl648, d)
			}
		} else if yyct648 == codecSelferValueTypeArray1234 {
			yyl648 := r.ReadArrayStart()
			if yyl648 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl648, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys649Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys649Slc
	var yyhl649 bool = l >= 0
	for yyj649 := 0; ; yyj649++ {
		if yyhl649 {
			if yyj649 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys649Slc = r.DecodeBytes(yys649Slc, true, true)
		yys649 := string(yys649Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys649 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys649)
		} // end switch yys649
	} // end for yyj649
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj654 int
	var yyb654 bool
	var yyhl654 bool = l >= 0
	yyj654++
	if yyhl654 {
		yyb654 = yyj654 > l
	} else {
		yyb654 = r.CheckBreak()
	}
	if yyb654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj654++
	if yyhl654 {
		yyb654 = yyj654 > l
	} else {
		yyb654 = r.CheckBreak()
	}
	if yyb654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj654++
	if yyhl654 {
		yyb654 = yyj654 > l
	} else {
		yyb654 = r.CheckBreak()
	}
	if yyb654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj654++
	if yyhl654 {
		yyb654 = yyj654 > l
	} else {
		yyb654 = r.CheckBreak()
	}
	if yyb654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj654++
		if yyhl654 {
			yyb654 = yyj654 > l
		} else {
			yyb654 = r.CheckBreak()
		}
		if yyb654 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj654-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym659 := z.EncBinary()
		_ = yym659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep660 := !z.EncBinary()
			yy2arr660 := z.EncBasicHandle().StructToArray
			var yyq660 [6]bool
			_, _, _ = yysep660, yyq660, yy2arr660
			const yyr660 bool = false
			yyq660[0] = x.TargetPortal != ""
			yyq660[1] = x.IQN != ""
			yyq660[2] = x.Lun != 0
			yyq660[3] = x.ISCSIInterface != ""
			yyq660[4] = x.FSType != ""
			yyq660[5] = x.ReadOnly != false
			var yynn660 int
			if yyr660 || yy2arr660 {
				r.EncodeArrayStart(6)
			} else {
				yynn660 = 0
				for _, b := range yyq660 {
					if b {
						yynn660++
					}
				}
				r.EncodeMapStart(yynn660)
				yynn660 = 0
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[0] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq660[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[1] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq660[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[2] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq660[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[3] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq660[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[4] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq660[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq660[5] {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq660[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym679 := z.DecBinary()
	_ = yym679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct680 := r.ContainerType()
		if yyct680 == codecSelferValueTypeMap1234 {
			yyl680 := r.ReadMapStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl680, d)
			}
		} else if yyct680 == codecSelferValueTypeArray1234 {
			yyl680 := r.ReadArrayStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys681Slc
	var yyhl681 bool = l >= 0
	for yyj681 := 0; ; yyj681++ {
		if yyhl681 {
			if yyj681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys681Slc = r.DecodeBytes(yys681Slc, true, true)
		yys681 := string(yys681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys681 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys681)
		} // end switch yys681
	} // end for yyj681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj688 int
	var yyb688 bool
	var yyhl688 bool = l >= 0
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj688++
	if yyhl688 {
		yyb688 = yyj688 > l
	} else {
		yyb688 = r.CheckBreak()
	}
	if yyb688 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj688++
		if yyhl688 {
			yyb688 = yyj688 > l
		} else {
			yyb688 = r.CheckBreak()
		}
		if yyb688 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj688-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym695 := z.EncBinary()
		_ = yym695
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep696 := !z.EncBinary()
			yy2arr696 := z.EncBasicHandle().StructToArray
			var yyq696 [4]bool
			_, _, _ = yysep696, yyq696, yy2arr696
			const yyr696 bool = false
			yyq696[2] = x.FSType != ""
			yyq696[3] = x.ReadOnly != false
			var yynn696 int
			if yyr696 || yy2arr696 {
				r.EncodeArrayStart(4)
			} else {
				yynn696 = 2
				for _, b := range yyq696 {
					if b {
						yynn696++
					}
				}
				r.EncodeMapStart(yynn696)
				yynn696 = 0
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy701 := *x.Lun
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeInt(int64(yy701))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy703 := *x.Lun
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeInt(int64(yy703))
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq696[2] {
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq696[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq696[3] {
					yym709 := z.EncBinary()
					_ = yym709
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq696[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr696 || yy2arr696 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym711 := z.DecBinary()
	_ = yym711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct712 := r.ContainerType()
		if yyct712 == codecSelferValueTypeMap1234 {
			yyl712 := r.ReadMapStart()
			if yyl712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl712, d)
			}
		} else if yyct712 == codecSelferValueTypeArray1234 {
			yyl712 := r.ReadArrayStart()
			if yyl712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys713Slc
	var yyhl713 bool = l >= 0
	for yyj713 := 0; ; yyj713++ {
		if yyhl713 {
			if yyj713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys713Slc = r.DecodeBytes(yys713Slc, true, true)
		yys713 := string(yys713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys713 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv714 := &x.TargetWWNs
				yym715 := z.DecBinary()
				_ = yym715
				if false {
				} else {
					z.F.DecSliceStringX(yyv714, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym717 := z.DecBinary()
				_ = yym717
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys713)
		} // end switch yys713
	} // end for yyj713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj720 int
	var yyb720 bool
	var yyhl720 bool = l >= 0
	yyj720++
	if yyhl720 {
		yyb720 = yyj720 > l
	} else {
		yyb720 = r.CheckBreak()
	}
	if yyb720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv721 := &x.TargetWWNs
		yym722 := z.DecBinary()
		_ = yym722
		if false {
		} else {
			z.F.DecSliceStringX(yyv721, false, d)
		}
	}
	yyj720++
	if yyhl720 {
		yyb720 = yyj720 > l
	} else {
		yyb720 = r.CheckBreak()
	}
	if yyb720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym724 := z.DecBinary()
		_ = yym724
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj720++
	if yyhl720 {
		yyb720 = yyj720 > l
	} else {
		yyb720 = r.CheckBreak()
	}
	if yyb720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj720++
	if yyhl720 {
		yyb720 = yyj720 > l
	} else {
		yyb720 = r.CheckBreak()
	}
	if yyb720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj720++
		if yyhl720 {
			yyb720 = yyj720 > l
		} else {
			yyb720 = r.CheckBreak()
		}
		if yyb720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym727 := z.EncBinary()
		_ = yym727
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep728 := !z.EncBinary()
			yy2arr728 := z.EncBasicHandle().StructToArray
			var yyq728 [5]bool
			_, _, _ = yysep728, yyq728, yy2arr728
			const yyr728 bool = false
			yyq728[1] = x.FSType != ""
			yyq728[2] = x.SecretRef != nil
			yyq728[3] = x.ReadOnly != false
			yyq728[4] = len(x.Options) != 0
			var yynn728 int
			if yyr728 || yy2arr728 {
				r.EncodeArrayStart(5)
			} else {
				yynn728 = 1
				for _, b := range yyq728 {
					if b {
						yynn728++
					}
				}
				r.EncodeMapStart(yynn728)
				yynn728 = 0
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[1] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq728[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq728[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[3] {
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq728[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq728[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym740 := z.EncBinary()
						_ = yym740
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq728[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym741 := z.EncBinary()
						_ = yym741
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr728 || yy2arr728 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym742 := z.DecBinary()
	_ = yym742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct743 := r.ContainerType()
		if yyct743 == codecSelferValueTypeMap1234 {
			yyl743 := r.ReadMapStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl743, d)
			}
		} else if yyct743 == codecSelferValueTypeArray1234 {
			yyl743 := r.ReadArrayStart()
			if yyl743 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys744Slc
	var yyhl744 bool = l >= 0
	for yyj744 := 0; ; yyj744++ {
		if yyhl744 {
			if yyj744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys744Slc = r.DecodeBytes(yys744Slc, true, true)
		yys744 := string(yys744Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys744 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv749 := &x.Options
				yym750 := z.DecBinary()
				_ = yym750
				if false {
				} else {
					z.F.DecMapStringStringX(yyv749, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys744)
		} // end switch yys744
	} // end for yyj744
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj751 int
	var yyb751 bool
	var yyhl751 bool = l >= 0
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj751++
	if yyhl751 {
		yyb751 = yyj751 > l
	} else {
		yyb751 = r.CheckBreak()
	}
	if yyb751 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv756 := &x.Options
		yym757 := z.DecBinary()
		_ = yym757
		if false {
		} else {
			z.F.DecMapStringStringX(yyv756, false, d)
		}
	}
	for {
		yyj751++
		if yyhl751 {
			yyb751 = yyj751 > l
		} else {
			yyb751 = r.CheckBreak()
		}
		if yyb751 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj751-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [4]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[1] = x.FSType != ""
			yyq759[2] = x.Partition != 0
			yyq759[3] = x.ReadOnly != false
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(4)
			} else {
				yynn759 = 1
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[2] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[3] {
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym772 := z.DecBinary()
	_ = yym772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct773 := r.ContainerType()
		if yyct773 == codecSelferValueTypeMap1234 {
			yyl773 := r.ReadMapStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl773, d)
			}
		} else if yyct773 == codecSelferValueTypeArray1234 {
			yyl773 := r.ReadArrayStart()
			if yyl773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys774Slc
	var yyhl774 bool = l >= 0
	for yyj774 := 0; ; yyj774++ {
		if yyhl774 {
			if yyj774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys774Slc = r.DecodeBytes(yys774Slc, true, true)
		yys774 := string(yys774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys774 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys774)
		} // end switch yys774
	} // end for yyj774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj779 int
	var yyb779 bool
	var yyhl779 bool = l >= 0
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj779++
	if yyhl779 {
		yyb779 = yyj779 > l
	} else {
		yyb779 = r.CheckBreak()
	}
	if yyb779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj779++
		if yyhl779 {
			yyb779 = yyj779 > l
		} else {
			yyb779 = r.CheckBreak()
		}
		if yyb779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [3]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[1] = x.Revision != ""
			yyq785[2] = x.Directory != ""
			var yynn785 int
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(3)
			} else {
				yynn785 = 1
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
				yynn785 = 0
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym787 := z.EncBinary()
				_ = yym787
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym788 := z.EncBinary()
				_ = yym788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[1] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[2] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym795 := z.DecBinary()
	_ = yym795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct796 := r.ContainerType()
		if yyct796 == codecSelferValueTypeMap1234 {
			yyl796 := r.ReadMapStart()
			if yyl796 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl796, d)
			}
		} else if yyct796 == codecSelferValueTypeArray1234 {
			yyl796 := r.ReadArrayStart()
			if yyl796 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys797Slc
	var yyhl797 bool = l >= 0
	for yyj797 := 0; ; yyj797++ {
		if yyhl797 {
			if yyj797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys797Slc = r.DecodeBytes(yys797Slc, true, true)
		yys797 := string(yys797Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys797 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys797)
		} // end switch yys797
	} // end for yyj797
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj801 int
	var yyb801 bool
	var yyhl801 bool = l >= 0
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj801++
		if yyhl801 {
			yyb801 = yyj801 > l
		} else {
			yyb801 = r.CheckBreak()
		}
		if yyb801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [4]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			yyq806[0] = x.SecretName != ""
			yyq806[1] = true
			yyq806[2] = len(x.Items) != 0
			yyq806[3] = x.DefaultMode != nil
			var yynn806 int
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(4)
			} else {
				yynn806 = 0
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
				yynn806 = 0
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[0] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq806[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[1] {
					yy811 := &x.LocalObjectReference
					yy811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq806[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy812 := &x.LocalObjectReference
					yy812.CodecEncodeSelf(e)
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[2] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym814 := z.EncBinary()
						_ = yym814
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq806[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym815 := z.EncBinary()
						_ = yym815
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq806[3] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy817 := *x.DefaultMode
						yym818 := z.EncBinary()
						_ = yym818
						if false {
						} else {
							r.EncodeInt(int64(yy817))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq806[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy819 := *x.DefaultMode
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							r.EncodeInt(int64(yy819))
						}
					}
				}
			}
			if yyr806 || yy2arr806 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct822 := r.ContainerType()
		if yyct822 == codecSelferValueTypeMap1234 {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if yyct822 == codecSelferValueTypeArray1234 {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys823 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.LocalObjectReference = LocalObjectReference{}
			} else {
				yyv825 := &x.LocalObjectReference
				yyv825.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv826 := &x.Items
				yym827 := z.DecBinary()
				_ = yym827
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv826), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj830 int
	var yyb830 bool
	var yyhl830 bool = l >= 0
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LocalObjectReference = LocalObjectReference{}
	} else {
		yyv832 := &x.LocalObjectReference
		yyv832.CodecDecodeSelf(d)
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv833 := &x.Items
		yym834 := z.DecBinary()
		_ = yym834
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv833), d)
		}
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym836 := z.DecBinary()
		_ = yym836
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj830++
		if yyhl830 {
			yyb830 = yyj830 > l
		} else {
			yyb830 = r.CheckBreak()
		}
		if yyb830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym837 := z.EncBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep838 := !z.EncBinary()
			yy2arr838 := z.EncBasicHandle().StructToArray
			var yyq838 [3]bool
			_, _, _ = yysep838, yyq838, yy2arr838
			const yyr838 bool = false
			yyq838[2] = x.ReadOnly != false
			var yynn838 int
			if yyr838 || yy2arr838 {
				r.EncodeArrayStart(3)
			} else {
				yynn838 = 2
				for _, b := range yyq838 {
					if b {
						yynn838++
					}
				}
				r.EncodeMapStart(yynn838)
				yynn838 = 0
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym840 := z.EncBinary()
				_ = yym840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym843 := z.EncBinary()
				_ = yym843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym844 := z.EncBinary()
				_ = yym844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[2] {
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq838[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym848 := z.DecBinary()
	_ = yym848
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct849 := r.ContainerType()
		if yyct849 == codecSelferValueTypeMap1234 {
			yyl849 := r.ReadMapStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl849, d)
			}
		} else if yyct849 == codecSelferValueTypeArray1234 {
			yyl849 := r.ReadArrayStart()
			if yyl849 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl849, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys850Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys850Slc
	var yyhl850 bool = l >= 0
	for yyj850 := 0; ; yyj850++ {
		if yyhl850 {
			if yyj850 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys850Slc = r.DecodeBytes(yys850Slc, true, true)
		yys850 := string(yys850Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys850 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys850)
		} // end switch yys850
	} // end for yyj850
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj854 int
	var yyb854 bool
	var yyhl854 bool = l >= 0
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj854++
	if yyhl854 {
		yyb854 = yyj854 > l
	} else {
		yyb854 = r.CheckBreak()
	}
	if yyb854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj854++
		if yyhl854 {
			yyb854 = yyj854 > l
		} else {
			yyb854 = r.CheckBreak()
		}
		if yyb854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym858 := z.EncBinary()
		_ = yym858
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep859 := !z.EncBinary()
			yy2arr859 := z.EncBasicHandle().StructToArray
			var yyq859 [5]bool
			_, _, _ = yysep859, yyq859, yy2arr859
			const yyr859 bool = false
			yyq859[2] = x.ReadOnly != false
			yyq859[3] = x.User != ""
			yyq859[4] = x.Group != ""
			var yynn859 int
			if yyr859 || yy2arr859 {
				r.EncodeArrayStart(5)
			} else {
				yynn859 = 2
				for _, b := range yyq859 {
					if b {
						yynn859++
					}
				}
				r.EncodeMapStart(yynn859)
				yynn859 = 0
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym861 := z.EncBinary()
				_ = yym861
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym862 := z.EncBinary()
				_ = yym862
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq859[2] {
					yym867 := z.EncBinary()
					_ = yym867
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq859[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq859[3] {
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq859[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq859[4] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq859[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr859 || yy2arr859 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct876 := r.ContainerType()
		if yyct876 == codecSelferValueTypeMap1234 {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if yyct876 == codecSelferValueTypeArray1234 {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys877 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj883 int
	var yyb883 bool
	var yyhl883 bool = l >= 0
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj883++
	if yyhl883 {
		yyb883 = yyj883 > l
	} else {
		yyb883 = r.CheckBreak()
	}
	if yyb883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj883++
		if yyhl883 {
			yyb883 = yyj883 > l
		} else {
			yyb883 = r.CheckBreak()
		}
		if yyb883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym889 := z.EncBinary()
		_ = yym889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep890 := !z.EncBinary()
			yy2arr890 := z.EncBasicHandle().StructToArray
			var yyq890 [3]bool
			_, _, _ = yysep890, yyq890, yy2arr890
			const yyr890 bool = false
			yyq890[2] = x.ReadOnly != false
			var yynn890 int
			if yyr890 || yy2arr890 {
				r.EncodeArrayStart(3)
			} else {
				yynn890 = 2
				for _, b := range yyq890 {
					if b {
						yynn890++
					}
				}
				r.EncodeMapStart(yynn890)
				yynn890 = 0
			}
			if yyr890 || yy2arr890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym892 := z.EncBinary()
				_ = yym892
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr890 || yy2arr890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym895 := z.EncBinary()
				_ = yym895
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym896 := z.EncBinary()
				_ = yym896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr890 || yy2arr890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq890[2] {
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq890[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr890 || yy2arr890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym900 := z.DecBinary()
	_ = yym900
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct901 := r.ContainerType()
		if yyct901 == codecSelferValueTypeMap1234 {
			yyl901 := r.ReadMapStart()
			if yyl901 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl901, d)
			}
		} else if yyct901 == codecSelferValueTypeArray1234 {
			yyl901 := r.ReadArrayStart()
			if yyl901 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl901, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys902Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys902Slc
	var yyhl902 bool = l >= 0
	for yyj902 := 0; ; yyj902++ {
		if yyhl902 {
			if yyj902 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys902Slc = r.DecodeBytes(yys902Slc, true, true)
		yys902 := string(yys902Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys902 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys902)
		} // end switch yys902
	} // end for yyj902
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj906 int
	var yyb906 bool
	var yyhl906 bool = l >= 0
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj906++
		if yyhl906 {
			yyb906 = yyj906 > l
		} else {
			yyb906 = r.CheckBreak()
		}
		if yyb906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [8]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[2] = x.FSType != ""
			yyq911[3] = x.RBDPool != ""
			yyq911[4] = x.RadosUser != ""
			yyq911[5] = x.Keyring != ""
			yyq911[6] = x.SecretRef != nil
			yyq911[7] = x.ReadOnly != false
			var yynn911 int
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(8)
			} else {
				yynn911 = 2
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
				yynn911 = 0
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym916 := z.EncBinary()
				_ = yym916
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[2] {
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[3] {
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[4] {
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[5] {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq911[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq911[7] {
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq911[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr911 || yy2arr911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym934 := z.DecBinary()
	_ = yym934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct935 := r.ContainerType()
		if yyct935 == codecSelferValueTypeMap1234 {
			yyl935 := r.ReadMapStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl935, d)
			}
		} else if yyct935 == codecSelferValueTypeArray1234 {
			yyl935 := r.ReadArrayStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys936Slc
	var yyhl936 bool = l >= 0
	for yyj936 := 0; ; yyj936++ {
		if yyhl936 {
			if yyj936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys936Slc = r.DecodeBytes(yys936Slc, true, true)
		yys936 := string(yys936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys936 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv937 := &x.CephMonitors
				yym938 := z.DecBinary()
				_ = yym938
				if false {
				} else {
					z.F.DecSliceStringX(yyv937, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys936)
		} // end switch yys936
	} // end for yyj936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv947 := &x.CephMonitors
		yym948 := z.DecBinary()
		_ = yym948
		if false {
		} else {
			z.F.DecSliceStringX(yyv947, false, d)
		}
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym956 := z.EncBinary()
		_ = yym956
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep957 := !z.EncBinary()
			yy2arr957 := z.EncBasicHandle().StructToArray
			var yyq957 [3]bool
			_, _, _ = yysep957, yyq957, yy2arr957
			const yyr957 bool = false
			yyq957[1] = x.FSType != ""
			yyq957[2] = x.ReadOnly != false
			var yynn957 int
			if yyr957 || yy2arr957 {
				r.EncodeArrayStart(3)
			} else {
				yynn957 = 1
				for _, b := range yyq957 {
					if b {
						yynn957++
					}
				}
				r.EncodeMapStart(yynn957)
				yynn957 = 0
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym959 := z.EncBinary()
				_ = yym959
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym960 := z.EncBinary()
				_ = yym960
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[1] {
					yym962 := z.EncBinary()
					_ = yym962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq957[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq957[2] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq957[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr957 || yy2arr957 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym967 := z.DecBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct968 := r.ContainerType()
		if yyct968 == codecSelferValueTypeMap1234 {
			yyl968 := r.ReadMapStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl968, d)
			}
		} else if yyct968 == codecSelferValueTypeArray1234 {
			yyl968 := r.ReadArrayStart()
			if yyl968 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl968, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys969Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys969Slc
	var yyhl969 bool = l >= 0
	for yyj969 := 0; ; yyj969++ {
		if yyhl969 {
			if yyj969 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys969Slc = r.DecodeBytes(yys969Slc, true, true)
		yys969 := string(yys969Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys969 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys969)
		} // end switch yys969
	} // end for yyj969
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj973 int
	var yyb973 bool
	var yyhl973 bool = l >= 0
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj973++
		if yyhl973 {
			yyb973 = yyj973 > l
		} else {
			yyb973 = r.CheckBreak()
		}
		if yyb973 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj973-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym977 := z.EncBinary()
		_ = yym977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep978 := !z.EncBinary()
			yy2arr978 := z.EncBasicHandle().StructToArray
			var yyq978 [6]bool
			_, _, _ = yysep978, yyq978, yy2arr978
			const yyr978 bool = false
			yyq978[1] = x.Path != ""
			yyq978[2] = x.User != ""
			yyq978[3] = x.SecretFile != ""
			yyq978[4] = x.SecretRef != nil
			yyq978[5] = x.ReadOnly != false
			var yynn978 int
			if yyr978 || yy2arr978 {
				r.EncodeArrayStart(6)
			} else {
				yynn978 = 1
				for _, b := range yyq978 {
					if b {
						yynn978++
					}
				}
				r.EncodeMapStart(yynn978)
				yynn978 = 0
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[1] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[2] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[3] {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq978[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[5] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq978[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym995 := z.DecBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct996 := r.ContainerType()
		if yyct996 == codecSelferValueTypeMap1234 {
			yyl996 := r.ReadMapStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl996, d)
			}
		} else if yyct996 == codecSelferValueTypeArray1234 {
			yyl996 := r.ReadArrayStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys997Slc
	var yyhl997 bool = l >= 0
	for yyj997 := 0; ; yyj997++ {
		if yyhl997 {
			if yyj997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys997Slc = r.DecodeBytes(yys997Slc, true, true)
		yys997 := string(yys997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys997 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv998 := &x.Monitors
				yym999 := z.DecBinary()
				_ = yym999
				if false {
				} else {
					z.F.DecSliceStringX(yyv998, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys997)
		} // end switch yys997
	} // end for yyj997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1005 int
	var yyb1005 bool
	var yyhl1005 bool = l >= 0
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv1006 := &x.Monitors
		yym1007 := z.DecBinary()
		_ = yym1007
		if false {
		} else {
			z.F.DecSliceStringX(yyv1006, false, d)
		}
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj1005++
	if yyhl1005 {
		yyb1005 = yyj1005 > l
	} else {
		yyb1005 = r.CheckBreak()
	}
	if yyb1005 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1005++
		if yyhl1005 {
			yyb1005 = yyj1005 > l
		} else {
			yyb1005 = r.CheckBreak()
		}
		if yyb1005 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1005-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [2]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = x.DatasetName != ""
			yyq1014[1] = x.DatasetUUID != ""
			var yynn1014 int
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(2)
			} else {
				yynn1014 = 0
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
				yynn1014 = 0
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[0] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1014[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[1] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1014[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("datasetUUID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DatasetUUID))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1022 := r.ContainerType()
		if yyct1022 == codecSelferValueTypeMap1234 {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if yyct1022 == codecSelferValueTypeArray1234 {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1023 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		case "datasetUUID":
			if r.TryDecodeAsNil() {
				x.DatasetUUID = ""
			} else {
				x.DatasetUUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetUUID = ""
	} else {
		x.DatasetUUID = string(r.DecodeString())
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [2]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[0] = len(x.Items) != 0
			yyq1030[1] = x.DefaultMode != nil
			var yynn1030 int
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(2)
			} else {
				yynn1030 = 0
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
				yynn1030 = 0
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1030[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1032 := z.EncBinary()
						_ = yym1032
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1030[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1035 := *x.DefaultMode
						yym1036 := z.EncBinary()
						_ = yym1036
						if false {
						} else {
							r.EncodeInt(int64(yy1035))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1037 := *x.DefaultMode
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							r.EncodeInt(int64(yy1037))
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1039 := z.DecBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1040 := r.ContainerType()
		if yyct1040 == codecSelferValueTypeMap1234 {
			yyl1040 := r.ReadMapStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1040, d)
			}
		} else if yyct1040 == codecSelferValueTypeArray1234 {
			yyl1040 := r.ReadArrayStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1041Slc
	var yyhl1041 bool = l >= 0
	for yyj1041 := 0; ; yyj1041++ {
		if yyhl1041 {
			if yyj1041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1041Slc = r.DecodeBytes(yys1041Slc, true, true)
		yys1041 := string(yys1041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1041 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1042 := &x.Items
				yym1043 := z.DecBinary()
				_ = yym1043
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1042), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1045 := z.DecBinary()
				_ = yym1045
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1041)
		} // end switch yys1041
	} // end for yyj1041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1046 int
	var yyb1046 bool
	var yyhl1046 bool = l >= 0
	yyj1046++
	if yyhl1046 {
		yyb1046 = yyj1046 > l
	} else {
		yyb1046 = r.CheckBreak()
	}
	if yyb1046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1047 := &x.Items
		yym1048 := z.DecBinary()
		_ = yym1048
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1047), d)
		}
	}
	yyj1046++
	if yyhl1046 {
		yyb1046 = yyj1046 > l
	} else {
		yyb1046 = r.CheckBreak()
	}
	if yyb1046 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1050 := z.DecBinary()
		_ = yym1050
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1046++
		if yyhl1046 {
			yyb1046 = yyj1046 > l
		} else {
			yyb1046 = r.CheckBreak()
		}
		if yyb1046 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1046-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [4]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[1] = x.FieldRef != nil
			yyq1052[2] = x.ResourceFieldRef != nil
			yyq1052[3] = x.Mode != nil
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(4)
			} else {
				yynn1052 = 1
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1054 := z.EncBinary()
				_ = yym1054
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1059 := *x.Mode
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							r.EncodeInt(int64(yy1059))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1061 := *x.Mode
						yym1062 := z.EncBinary()
						_ = yym1062
						if false {
						} else {
							r.EncodeInt(int64(yy1061))
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1063 := z.DecBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1064 := r.ContainerType()
		if yyct1064 == codecSelferValueTypeMap1234 {
			yyl1064 := r.ReadMapStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1064, d)
			}
		} else if yyct1064 == codecSelferValueTypeArray1234 {
			yyl1064 := r.ReadArrayStart()
			if yyl1064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1065Slc
	var yyhl1065 bool = l >= 0
	for yyj1065 := 0; ; yyj1065++ {
		if yyhl1065 {
			if yyj1065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1065Slc = r.DecodeBytes(yys1065Slc, true, true)
		yys1065 := string(yys1065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1065 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1070 := z.DecBinary()
				_ = yym1070
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1065)
		} // end switch yys1065
	} // end for yyj1065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1071 int
	var yyb1071 bool
	var yyhl1071 bool = l >= 0
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1076 := z.DecBinary()
		_ = yym1076
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1071++
		if yyhl1071 {
			yyb1071 = yyj1071 > l
		} else {
			yyb1071 = r.CheckBreak()
		}
		if yyb1071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1077 := z.EncBinary()
		_ = yym1077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1078 := !z.EncBinary()
			yy2arr1078 := z.EncBasicHandle().StructToArray
			var yyq1078 [3]bool
			_, _, _ = yysep1078, yyq1078, yy2arr1078
			const yyr1078 bool = false
			yyq1078[2] = x.ReadOnly != false
			var yynn1078 int
			if yyr1078 || yy2arr1078 {
				r.EncodeArrayStart(3)
			} else {
				yynn1078 = 2
				for _, b := range yyq1078 {
					if b {
						yynn1078++
					}
				}
				r.EncodeMapStart(yynn1078)
				yynn1078 = 0
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1081 := z.EncBinary()
				_ = yym1081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1083 := z.EncBinary()
				_ = yym1083
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1084 := z.EncBinary()
				_ = yym1084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1078[2] {
					yym1086 := z.EncBinary()
					_ = yym1086
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1078[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1078 || yy2arr1078 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1088 := z.DecBinary()
	_ = yym1088
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1089 := r.ContainerType()
		if yyct1089 == codecSelferValueTypeMap1234 {
			yyl1089 := r.ReadMapStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1089, d)
			}
		} else if yyct1089 == codecSelferValueTypeArray1234 {
			yyl1089 := r.ReadArrayStart()
			if yyl1089 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1089, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1090Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1090Slc
	var yyhl1090 bool = l >= 0
	for yyj1090 := 0; ; yyj1090++ {
		if yyhl1090 {
			if yyj1090 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1090Slc = r.DecodeBytes(yys1090Slc, true, true)
		yys1090 := string(yys1090Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1090 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1090)
		} // end switch yys1090
	} // end for yyj1090
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1094 int
	var yyb1094 bool
	var yyhl1094 bool = l >= 0
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1094++
		if yyhl1094 {
			yyb1094 = yyj1094 > l
		} else {
			yyb1094 = r.CheckBreak()
		}
		if yyb1094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1098 := z.EncBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1099 := !z.EncBinary()
			yy2arr1099 := z.EncBasicHandle().StructToArray
			var yyq1099 [2]bool
			_, _, _ = yysep1099, yyq1099, yy2arr1099
			const yyr1099 bool = false
			yyq1099[1] = x.FSType != ""
			var yynn1099 int
			if yyr1099 || yy2arr1099 {
				r.EncodeArrayStart(2)
			} else {
				yynn1099 = 1
				for _, b := range yyq1099 {
					if b {
						yynn1099++
					}
				}
				r.EncodeMapStart(yynn1099)
				yynn1099 = 0
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1101 := z.EncBinary()
				_ = yym1101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1099[1] {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1099[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1099 || yy2arr1099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1106 := z.DecBinary()
	_ = yym1106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1107 := r.ContainerType()
		if yyct1107 == codecSelferValueTypeMap1234 {
			yyl1107 := r.ReadMapStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1107, d)
			}
		} else if yyct1107 == codecSelferValueTypeArray1234 {
			yyl1107 := r.ReadArrayStart()
			if yyl1107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1108Slc
	var yyhl1108 bool = l >= 0
	for yyj1108 := 0; ; yyj1108++ {
		if yyhl1108 {
			if yyj1108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1108Slc = r.DecodeBytes(yys1108Slc, true, true)
		yys1108 := string(yys1108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1108 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1108)
		} // end switch yys1108
	} // end for yyj1108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1111 int
	var yyb1111 bool
	var yyhl1111 bool = l >= 0
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1111++
	if yyhl1111 {
		yyb1111 = yyj1111 > l
	} else {
		yyb1111 = r.CheckBreak()
	}
	if yyb1111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1111++
		if yyhl1111 {
			yyb1111 = yyj1111 > l
		} else {
			yyb1111 = r.CheckBreak()
		}
		if yyb1111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1114 := z.EncBinary()
		_ = yym1114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1115 := !z.EncBinary()
			yy2arr1115 := z.EncBasicHandle().StructToArray
			var yyq1115 [2]bool
			_, _, _ = yysep1115, yyq1115, yy2arr1115
			const yyr1115 bool = false
			yyq1115[1] = x.FSType != ""
			var yynn1115 int
			if yyr1115 || yy2arr1115 {
				r.EncodeArrayStart(2)
			} else {
				yynn1115 = 1
				for _, b := range yyq1115 {
					if b {
						yynn1115++
					}
				}
				r.EncodeMapStart(yynn1115)
				yynn1115 = 0
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1117 := z.EncBinary()
				_ = yym1117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1118 := z.EncBinary()
				_ = yym1118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PdID))
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[1] {
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1115[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1122 := z.DecBinary()
	_ = yym1122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1123 := r.ContainerType()
		if yyct1123 == codecSelferValueTypeMap1234 {
			yyl1123 := r.ReadMapStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1123, d)
			}
		} else if yyct1123 == codecSelferValueTypeArray1234 {
			yyl1123 := r.ReadArrayStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1124Slc
	var yyhl1124 bool = l >= 0
	for yyj1124 := 0; ; yyj1124++ {
		if yyhl1124 {
			if yyj1124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1124Slc = r.DecodeBytes(yys1124Slc, true, true)
		yys1124 := string(yys1124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1124 {
		case "pdID":
			if r.TryDecodeAsNil() {
				x.PdID = ""
			} else {
				x.PdID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1124)
		} // end switch yys1124
	} // end for yyj1124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PhotonPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1127 int
	var yyb1127 bool
	var yyhl1127 bool = l >= 0
	yyj1127++
	if yyhl1127 {
		yyb1127 = yyj1127 > l
	} else {
		yyb1127 = r.CheckBreak()
	}
	if yyb1127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PdID = ""
	} else {
		x.PdID = string(r.DecodeString())
	}
	yyj1127++
	if yyhl1127 {
		yyb1127 = yyj1127 > l
	} else {
		yyb1127 = r.CheckBreak()
	}
	if yyb1127 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1127++
		if yyhl1127 {
			yyb1127 = yyj1127 > l
		} else {
			yyb1127 = r.CheckBreak()
		}
		if yyb1127 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1127-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x AzureDataDiskCachingMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1130 := z.EncBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *AzureDataDiskCachingMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1131 := z.DecBinary()
	_ = yym1131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AzureDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [5]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			yyq1133[2] = x.CachingMode != nil
			yyq1133[3] = x.FSType != nil
			yyq1133[4] = x.ReadOnly != nil
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(5)
			} else {
				yynn1133 = 2
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DiskName))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("diskURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1139 := z.EncBinary()
				_ = yym1139
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DataDiskURI))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[2] {
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1141 := *x.CachingMode
						yy1141.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cachingMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CachingMode == nil {
						r.EncodeNil()
					} else {
						yy1142 := *x.CachingMode
						yy1142.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[3] {
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1144 := *x.FSType
						yym1145 := z.EncBinary()
						_ = yym1145
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1144))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSType == nil {
						r.EncodeNil()
					} else {
						yy1146 := *x.FSType
						yym1147 := z.EncBinary()
						_ = yym1147
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1146))
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1133[4] {
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1149 := *x.ReadOnly
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else {
							r.EncodeBool(bool(yy1149))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1133[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnly == nil {
						r.EncodeNil()
					} else {
						yy1151 := *x.ReadOnly
						yym1152 := z.EncBinary()
						_ = yym1152
						if false {
						} else {
							r.EncodeBool(bool(yy1151))
						}
					}
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1153 := z.DecBinary()
	_ = yym1153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1154 := r.ContainerType()
		if yyct1154 == codecSelferValueTypeMap1234 {
			yyl1154 := r.ReadMapStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1154, d)
			}
		} else if yyct1154 == codecSelferValueTypeArray1234 {
			yyl1154 := r.ReadArrayStart()
			if yyl1154 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1154, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1155Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1155Slc
	var yyhl1155 bool = l >= 0
	for yyj1155 := 0; ; yyj1155++ {
		if yyhl1155 {
			if yyj1155 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1155Slc = r.DecodeBytes(yys1155Slc, true, true)
		yys1155 := string(yys1155Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1155 {
		case "diskName":
			if r.TryDecodeAsNil() {
				x.DiskName = ""
			} else {
				x.DiskName = string(r.DecodeString())
			}
		case "diskURI":
			if r.TryDecodeAsNil() {
				x.DataDiskURI = ""
			} else {
				x.DataDiskURI = string(r.DecodeString())
			}
		case "cachingMode":
			if r.TryDecodeAsNil() {
				if x.CachingMode != nil {
					x.CachingMode = nil
				}
			} else {
				if x.CachingMode == nil {
					x.CachingMode = new(AzureDataDiskCachingMode)
				}
				x.CachingMode.CodecDecodeSelf(d)
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				if x.FSType != nil {
					x.FSType = nil
				}
			} else {
				if x.FSType == nil {
					x.FSType = new(string)
				}
				yym1160 := z.DecBinary()
				_ = yym1160
				if false {
				} else {
					*((*string)(x.FSType)) = r.DecodeString()
				}
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				if x.ReadOnly != nil {
					x.ReadOnly = nil
				}
			} else {
				if x.ReadOnly == nil {
					x.ReadOnly = new(bool)
				}
				yym1162 := z.DecBinary()
				_ = yym1162
				if false {
				} else {
					*((*bool)(x.ReadOnly)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1155)
		} // end switch yys1155
	} // end for yyj1155
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1163 int
	var yyb1163 bool
	var yyhl1163 bool = l >= 0
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DiskName = ""
	} else {
		x.DiskName = string(r.DecodeString())
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DataDiskURI = ""
	} else {
		x.DataDiskURI = string(r.DecodeString())
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CachingMode != nil {
			x.CachingMode = nil
		}
	} else {
		if x.CachingMode == nil {
			x.CachingMode = new(AzureDataDiskCachingMode)
		}
		x.CachingMode.CodecDecodeSelf(d)
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSType != nil {
			x.FSType = nil
		}
	} else {
		if x.FSType == nil {
			x.FSType = new(string)
		}
		yym1168 := z.DecBinary()
		_ = yym1168
		if false {
		} else {
			*((*string)(x.FSType)) = r.DecodeString()
		}
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnly != nil {
			x.ReadOnly = nil
		}
	} else {
		if x.ReadOnly == nil {
			x.ReadOnly = new(bool)
		}
		yym1170 := z.DecBinary()
		_ = yym1170
		if false {
		} else {
			*((*bool)(x.ReadOnly)) = r.DecodeBool()
		}
	}
	for {
		yyj1163++
		if yyhl1163 {
			yyb1163 = yyj1163 > l
		} else {
			yyb1163 = r.CheckBreak()
		}
		if yyb1163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1171 := z.EncBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1172 := !z.EncBinary()
			yy2arr1172 := z.EncBasicHandle().StructToArray
			var yyq1172 [3]bool
			_, _, _ = yysep1172, yyq1172, yy2arr1172
			const yyr1172 bool = false
			yyq1172[1] = len(x.Items) != 0
			yyq1172[2] = x.DefaultMode != nil
			var yynn1172 int
			if yyr1172 || yy2arr1172 {
				r.EncodeArrayStart(3)
			} else {
				yynn1172 = 1
				for _, b := range yyq1172 {
					if b {
						yynn1172++
					}
				}
				r.EncodeMapStart(yynn1172)
				yynn1172 = 0
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1175 := z.EncBinary()
				_ = yym1175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1177 := z.EncBinary()
						_ = yym1177
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1178 := z.EncBinary()
						_ = yym1178
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1180 := *x.DefaultMode
						yym1181 := z.EncBinary()
						_ = yym1181
						if false {
						} else {
							r.EncodeInt(int64(yy1180))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1182 := *x.DefaultMode
						yym1183 := z.EncBinary()
						_ = yym1183
						if false {
						} else {
							r.EncodeInt(int64(yy1182))
						}
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1188 := &x.Items
				yym1189 := z.DecBinary()
				_ = yym1189
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1188), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1191 := z.DecBinary()
				_ = yym1191
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1192 int
	var yyb1192 bool
	var yyhl1192 bool = l >= 0
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1194 := &x.Items
		yym1195 := z.DecBinary()
		_ = yym1195
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1194), d)
		}
	}
	yyj1192++
	if yyhl1192 {
		yyb1192 = yyj1192 > l
	} else {
		yyb1192 = r.CheckBreak()
	}
	if yyb1192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1197 := z.DecBinary()
		_ = yym1197
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1192++
		if yyhl1192 {
			yyb1192 = yyj1192 > l
		} else {
			yyb1192 = r.CheckBreak()
		}
		if yyb1192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SystemProjections) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1198 := z.EncBinary()
		_ = yym1198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1199 := !z.EncBinary()
			yy2arr1199 := z.EncBasicHandle().StructToArray
			var yyq1199 [2]bool
			_, _, _ = yysep1199, yyq1199, yy2arr1199
			const yyr1199 bool = false
			yyq1199[1] = x.DefaultMode != nil
			var yynn1199 int
			if yyr1199 || yy2arr1199 {
				r.EncodeArrayStart(2)
			} else {
				yynn1199 = 1
				for _, b := range yyq1199 {
					if b {
						yynn1199++
					}
				}
				r.EncodeMapStart(yynn1199)
				yynn1199 = 0
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Sources == nil {
					r.EncodeNil()
				} else {
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						h.encSliceSystemVolumeProjection(([]SystemVolumeProjection)(x.Sources), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("sources"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Sources == nil {
					r.EncodeNil()
				} else {
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						h.encSliceSystemVolumeProjection(([]SystemVolumeProjection)(x.Sources), e)
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1199[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1204 := *x.DefaultMode
						yym1205 := z.EncBinary()
						_ = yym1205
						if false {
						} else {
							r.EncodeInt(int64(yy1204))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1199[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1206 := *x.DefaultMode
						yym1207 := z.EncBinary()
						_ = yym1207
						if false {
						} else {
							r.EncodeInt(int64(yy1206))
						}
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SystemProjections) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1208 := z.DecBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1209 := r.ContainerType()
		if yyct1209 == codecSelferValueTypeMap1234 {
			yyl1209 := r.ReadMapStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1209, d)
			}
		} else if yyct1209 == codecSelferValueTypeArray1234 {
			yyl1209 := r.ReadArrayStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SystemProjections) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1210Slc
	var yyhl1210 bool = l >= 0
	for yyj1210 := 0; ; yyj1210++ {
		if yyhl1210 {
			if yyj1210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1210Slc = r.DecodeBytes(yys1210Slc, true, true)
		yys1210 := string(yys1210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1210 {
		case "sources":
			if r.TryDecodeAsNil() {
				x.Sources = nil
			} else {
				yyv1211 := &x.Sources
				yym1212 := z.DecBinary()
				_ = yym1212
				if false {
				} else {
					h.decSliceSystemVolumeProjection((*[]SystemVolumeProjection)(yyv1211), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1214 := z.DecBinary()
				_ = yym1214
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1210)
		} // end switch yys1210
	} // end for yyj1210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SystemProjections) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1215 int
	var yyb1215 bool
	var yyhl1215 bool = l >= 0
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Sources = nil
	} else {
		yyv1216 := &x.Sources
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			h.decSliceSystemVolumeProjection((*[]SystemVolumeProjection)(yyv1216), d)
		}
	}
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1219 := z.DecBinary()
		_ = yym1219
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1215++
		if yyhl1215 {
			yyb1215 = yyj1215 > l
		} else {
			yyb1215 = r.CheckBreak()
		}
		if yyb1215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SystemVolumeProjection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1220 := z.EncBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1221 := !z.EncBinary()
			yy2arr1221 := z.EncBasicHandle().StructToArray
			var yyq1221 [3]bool
			_, _, _ = yysep1221, yyq1221, yy2arr1221
			const yyr1221 bool = false
			yyq1221[0] = x.Secret != nil
			yyq1221[1] = x.DownwardAPI != nil
			yyq1221[2] = x.ConfigMap != nil
			var yynn1221 int
			if yyr1221 || yy2arr1221 {
				r.EncodeArrayStart(3)
			} else {
				yynn1221 = 0
				for _, b := range yyq1221 {
					if b {
						yynn1221++
					}
				}
				r.EncodeMapStart(yynn1221)
				yynn1221 = 0
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[0] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[1] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[2] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SystemVolumeProjection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1225 := z.DecBinary()
	_ = yym1225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1226 := r.ContainerType()
		if yyct1226 == codecSelferValueTypeMap1234 {
			yyl1226 := r.ReadMapStart()
			if yyl1226 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1226, d)
			}
		} else if yyct1226 == codecSelferValueTypeArray1234 {
			yyl1226 := r.ReadArrayStart()
			if yyl1226 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1226, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SystemVolumeProjection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1227Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1227Slc
	var yyhl1227 bool = l >= 0
	for yyj1227 := 0; ; yyj1227++ {
		if yyhl1227 {
			if yyj1227 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1227Slc = r.DecodeBytes(yys1227Slc, true, true)
		yys1227 := string(yys1227Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1227 {
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1227)
		} // end switch yys1227
	} // end for yyj1227
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SystemVolumeProjection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1231 int
	var yyb1231 bool
	var yyhl1231 bool = l >= 0
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj1231++
	if yyhl1231 {
		yyb1231 = yyj1231 > l
	} else {
		yyb1231 = r.CheckBreak()
	}
	if yyb1231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	for {
		yyj1231++
		if yyhl1231 {
			yyb1231 = yyj1231 > l
		} else {
			yyb1231 = r.CheckBreak()
		}
		if yyb1231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1235 := z.EncBinary()
		_ = yym1235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1236 := !z.EncBinary()
			yy2arr1236 := z.EncBasicHandle().StructToArray
			var yyq1236 [3]bool
			_, _, _ = yysep1236, yyq1236, yy2arr1236
			const yyr1236 bool = false
			yyq1236[2] = x.Mode != nil
			var yynn1236 int
			if yyr1236 || yy2arr1236 {
				r.EncodeArrayStart(3)
			} else {
				yynn1236 = 2
				for _, b := range yyq1236 {
					if b {
						yynn1236++
					}
				}
				r.EncodeMapStart(yynn1236)
				yynn1236 = 0
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1238 := z.EncBinary()
				_ = yym1238
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1236[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1244 := *x.Mode
						yym1245 := z.EncBinary()
						_ = yym1245
						if false {
						} else {
							r.EncodeInt(int64(yy1244))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1246 := *x.Mode
						yym1247 := z.EncBinary()
						_ = yym1247
						if false {
						} else {
							r.EncodeInt(int64(yy1246))
						}
					}
				}
			}
			if yyr1236 || yy2arr1236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1248 := z.DecBinary()
	_ = yym1248
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1249 := r.ContainerType()
		if yyct1249 == codecSelferValueTypeMap1234 {
			yyl1249 := r.ReadMapStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1249, d)
			}
		} else if yyct1249 == codecSelferValueTypeArray1234 {
			yyl1249 := r.ReadArrayStart()
			if yyl1249 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1249, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1250Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1250Slc
	var yyhl1250 bool = l >= 0
	for yyj1250 := 0; ; yyj1250++ {
		if yyhl1250 {
			if yyj1250 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1250Slc = r.DecodeBytes(yys1250Slc, true, true)
		yys1250 := string(yys1250Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1250 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1254 := z.DecBinary()
				_ = yym1254
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1250)
		} // end switch yys1250
	} // end for yyj1250
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1255 int
	var yyb1255 bool
	var yyhl1255 bool = l >= 0
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1259 := z.DecBinary()
		_ = yym1259
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1255++
		if yyhl1255 {
			yyb1255 = yyj1255 > l
		} else {
			yyb1255 = r.CheckBreak()
		}
		if yyb1255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1260 := z.EncBinary()
		_ = yym1260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1261 := !z.EncBinary()
			yy2arr1261 := z.EncBasicHandle().StructToArray
			var yyq1261 [5]bool
			_, _, _ = yysep1261, yyq1261, yy2arr1261
			const yyr1261 bool = false
			yyq1261[0] = x.Name != ""
			yyq1261[1] = x.HostPort != 0
			yyq1261[3] = x.Protocol != ""
			yyq1261[4] = x.HostIP != ""
			var yynn1261 int
			if yyr1261 || yy2arr1261 {
				r.EncodeArrayStart(5)
			} else {
				yynn1261 = 1
				for _, b := range yyq1261 {
					if b {
						yynn1261++
					}
				}
				r.EncodeMapStart(yynn1261)
				yynn1261 = 0
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[0] {
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[1] {
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1269 := z.EncBinary()
				_ = yym1269
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1270 := z.EncBinary()
				_ = yym1270
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1261[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1261[4] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1261[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1261 || yy2arr1261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1275 := z.DecBinary()
	_ = yym1275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1276 := r.ContainerType()
		if yyct1276 == codecSelferValueTypeMap1234 {
			yyl1276 := r.ReadMapStart()
			if yyl1276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1276, d)
			}
		} else if yyct1276 == codecSelferValueTypeArray1234 {
			yyl1276 := r.ReadArrayStart()
			if yyl1276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1277Slc
	var yyhl1277 bool = l >= 0
	for yyj1277 := 0; ; yyj1277++ {
		if yyhl1277 {
			if yyj1277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1277Slc = r.DecodeBytes(yys1277Slc, true, true)
		yys1277 := string(yys1277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1277 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1277)
		} // end switch yys1277
	} // end for yyj1277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1283 int
	var yyb1283 bool
	var yyhl1283 bool = l >= 0
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1283++
		if yyhl1283 {
			yyb1283 = yyj1283 > l
		} else {
			yyb1283 = r.CheckBreak()
		}
		if yyb1283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1289 := z.EncBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1290 := !z.EncBinary()
			yy2arr1290 := z.EncBasicHandle().StructToArray
			var yyq1290 [4]bool
			_, _, _ = yysep1290, yyq1290, yy2arr1290
			const yyr1290 bool = false
			yyq1290[1] = x.ReadOnly != false
			yyq1290[3] = x.SubPath != ""
			var yynn1290 int
			if yyr1290 || yy2arr1290 {
				r.EncodeArrayStart(4)
			} else {
				yynn1290 = 2
				for _, b := range yyq1290 {
					if b {
						yynn1290++
					}
				}
				r.EncodeMapStart(yynn1290)
				yynn1290 = 0
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[1] {
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1296 := z.EncBinary()
					_ = yym1296
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1299 := z.EncBinary()
				_ = yym1299
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1290[3] {
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1290 || yy2arr1290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1303 := z.DecBinary()
	_ = yym1303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1304 := r.ContainerType()
		if yyct1304 == codecSelferValueTypeMap1234 {
			yyl1304 := r.ReadMapStart()
			if yyl1304 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1304, d)
			}
		} else if yyct1304 == codecSelferValueTypeArray1234 {
			yyl1304 := r.ReadArrayStart()
			if yyl1304 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1305Slc
	var yyhl1305 bool = l >= 0
	for yyj1305 := 0; ; yyj1305++ {
		if yyhl1305 {
			if yyj1305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1305Slc = r.DecodeBytes(yys1305Slc, true, true)
		yys1305 := string(yys1305Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1305 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1305)
		} // end switch yys1305
	} // end for yyj1305
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1315 := z.EncBinary()
		_ = yym1315
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1316 := !z.EncBinary()
			yy2arr1316 := z.EncBasicHandle().StructToArray
			var yyq1316 [3]bool
			_, _, _ = yysep1316, yyq1316, yy2arr1316
			const yyr1316 bool = false
			yyq1316[1] = x.Value != ""
			yyq1316[2] = x.ValueFrom != nil
			var yynn1316 int
			if yyr1316 || yy2arr1316 {
				r.EncodeArrayStart(3)
			} else {
				yynn1316 = 1
				for _, b := range yyq1316 {
					if b {
						yynn1316++
					}
				}
				r.EncodeMapStart(yynn1316)
				yynn1316 = 0
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1318 := z.EncBinary()
				_ = yym1318
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1316[1] {
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1316[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1316[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1316[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1316 || yy2arr1316 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1324 := z.DecBinary()
	_ = yym1324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1325 := r.ContainerType()
		if yyct1325 == codecSelferValueTypeMap1234 {
			yyl1325 := r.ReadMapStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1325, d)
			}
		} else if yyct1325 == codecSelferValueTypeArray1234 {
			yyl1325 := r.ReadArrayStart()
			if yyl1325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1326Slc
	var yyhl1326 bool = l >= 0
	for yyj1326 := 0; ; yyj1326++ {
		if yyhl1326 {
			if yyj1326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1326Slc = r.DecodeBytes(yys1326Slc, true, true)
		yys1326 := string(yys1326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1326 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1326)
		} // end switch yys1326
	} // end for yyj1326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1334 := z.EncBinary()
		_ = yym1334
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1335 := !z.EncBinary()
			yy2arr1335 := z.EncBasicHandle().StructToArray
			var yyq1335 [4]bool
			_, _, _ = yysep1335, yyq1335, yy2arr1335
			const yyr1335 bool = false
			yyq1335[0] = x.FieldRef != nil
			yyq1335[1] = x.ResourceFieldRef != nil
			yyq1335[2] = x.ConfigMapKeyRef != nil
			yyq1335[3] = x.SecretKeyRef != nil
			var yynn1335 int
			if yyr1335 || yy2arr1335 {
				r.EncodeArrayStart(4)
			} else {
				yynn1335 = 0
				for _, b := range yyq1335 {
					if b {
						yynn1335++
					}
				}
				r.EncodeMapStart(yynn1335)
				yynn1335 = 0
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1335[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1335[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1335[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1335[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1335[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1335[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1335[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1335[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1335 || yy2arr1335 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1341 := r.ContainerType()
		if yyct1341 == codecSelferValueTypeMap1234 {
			yyl1341 := r.ReadMapStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1341, d)
			}
		} else if yyct1341 == codecSelferValueTypeArray1234 {
			yyl1341 := r.ReadArrayStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1342Slc
	var yyhl1342 bool = l >= 0
	for yyj1342 := 0; ; yyj1342++ {
		if yyhl1342 {
			if yyj1342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1342Slc = r.DecodeBytes(yys1342Slc, true, true)
		yys1342 := string(yys1342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1342 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1342)
		} // end switch yys1342
	} // end for yyj1342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1347 int
	var yyb1347 bool
	var yyhl1347 bool = l >= 0
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1347++
	if yyhl1347 {
		yyb1347 = yyj1347 > l
	} else {
		yyb1347 = r.CheckBreak()
	}
	if yyb1347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1347++
		if yyhl1347 {
			yyb1347 = yyj1347 > l
		} else {
			yyb1347 = r.CheckBreak()
		}
		if yyb1347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1352 := z.EncBinary()
		_ = yym1352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1353 := !z.EncBinary()
			yy2arr1353 := z.EncBasicHandle().StructToArray
			var yyq1353 [2]bool
			_, _, _ = yysep1353, yyq1353, yy2arr1353
			const yyr1353 bool = false
			var yynn1353 int
			if yyr1353 || yy2arr1353 {
				r.EncodeArrayStart(2)
			} else {
				yynn1353 = 2
				for _, b := range yyq1353 {
					if b {
						yynn1353++
					}
				}
				r.EncodeMapStart(yynn1353)
				yynn1353 = 0
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1356 := z.EncBinary()
				_ = yym1356
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1358 := z.EncBinary()
				_ = yym1358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1359 := z.EncBinary()
				_ = yym1359
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1353 || yy2arr1353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1360 := z.DecBinary()
	_ = yym1360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1361 := r.ContainerType()
		if yyct1361 == codecSelferValueTypeMap1234 {
			yyl1361 := r.ReadMapStart()
			if yyl1361 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1361, d)
			}
		} else if yyct1361 == codecSelferValueTypeArray1234 {
			yyl1361 := r.ReadArrayStart()
			if yyl1361 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1362Slc
	var yyhl1362 bool = l >= 0
	for yyj1362 := 0; ; yyj1362++ {
		if yyhl1362 {
			if yyj1362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1362Slc = r.DecodeBytes(yys1362Slc, true, true)
		yys1362 := string(yys1362Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1362 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1362)
		} // end switch yys1362
	} // end for yyj1362
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1365 int
	var yyb1365 bool
	var yyhl1365 bool = l >= 0
	yyj1365++
	if yyhl1365 {
		yyb1365 = yyj1365 > l
	} else {
		yyb1365 = r.CheckBreak()
	}
	if yyb1365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1365++
	if yyhl1365 {
		yyb1365 = yyj1365 > l
	} else {
		yyb1365 = r.CheckBreak()
	}
	if yyb1365 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1365++
		if yyhl1365 {
			yyb1365 = yyj1365 > l
		} else {
			yyb1365 = r.CheckBreak()
		}
		if yyb1365 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1365-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1368 := z.EncBinary()
		_ = yym1368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1369 := !z.EncBinary()
			yy2arr1369 := z.EncBasicHandle().StructToArray
			var yyq1369 [3]bool
			_, _, _ = yysep1369, yyq1369, yy2arr1369
			const yyr1369 bool = false
			yyq1369[0] = x.ContainerName != ""
			yyq1369[2] = true
			var yynn1369 int
			if yyr1369 || yy2arr1369 {
				r.EncodeArrayStart(3)
			} else {
				yynn1369 = 1
				for _, b := range yyq1369 {
					if b {
						yynn1369++
					}
				}
				r.EncodeMapStart(yynn1369)
				yynn1369 = 0
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[0] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1374 := z.EncBinary()
				_ = yym1374
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1375 := z.EncBinary()
				_ = yym1375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1369[2] {
					yy1377 := &x.Divisor
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1377) {
					} else if !yym1378 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1377)
					} else {
						z.EncFallback(yy1377)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1369[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1379 := &x.Divisor
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1379) {
					} else if !yym1380 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1379)
					} else {
						z.EncFallback(yy1379)
					}
				}
			}
			if yyr1369 || yy2arr1369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1382 := r.ContainerType()
		if yyct1382 == codecSelferValueTypeMap1234 {
			yyl1382 := r.ReadMapStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1382, d)
			}
		} else if yyct1382 == codecSelferValueTypeArray1234 {
			yyl1382 := r.ReadArrayStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1383Slc
	var yyhl1383 bool = l >= 0
	for yyj1383 := 0; ; yyj1383++ {
		if yyhl1383 {
			if yyj1383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1383Slc = r.DecodeBytes(yys1383Slc, true, true)
		yys1383 := string(yys1383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1383 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1386 := &x.Divisor
				yym1387 := z.DecBinary()
				_ = yym1387
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1386) {
				} else if !yym1387 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1386)
				} else {
					z.DecFallback(yyv1386, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1383)
		} // end switch yys1383
	} // end for yyj1383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1388 int
	var yyb1388 bool
	var yyhl1388 bool = l >= 0
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1391 := &x.Divisor
		yym1392 := z.DecBinary()
		_ = yym1392
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1391) {
		} else if !yym1392 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1391)
		} else {
			z.DecFallback(yyv1391, false)
		}
	}
	for {
		yyj1388++
		if yyhl1388 {
			yyb1388 = yyj1388 > l
		} else {
			yyb1388 = r.CheckBreak()
		}
		if yyb1388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1393 := z.EncBinary()
		_ = yym1393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1394 := !z.EncBinary()
			yy2arr1394 := z.EncBasicHandle().StructToArray
			var yyq1394 [2]bool
			_, _, _ = yysep1394, yyq1394, yy2arr1394
			const yyr1394 bool = false
			var yynn1394 int
			if yyr1394 || yy2arr1394 {
				r.EncodeArrayStart(2)
			} else {
				yynn1394 = 2
				for _, b := range yyq1394 {
					if b {
						yynn1394++
					}
				}
				r.EncodeMapStart(yynn1394)
				yynn1394 = 0
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1396 := z.EncBinary()
				_ = yym1396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1397 := z.EncBinary()
				_ = yym1397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1399 := z.EncBinary()
				_ = yym1399
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1400 := z.EncBinary()
				_ = yym1400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1401 := z.DecBinary()
	_ = yym1401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1402 := r.ContainerType()
		if yyct1402 == codecSelferValueTypeMap1234 {
			yyl1402 := r.ReadMapStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1402, d)
			}
		} else if yyct1402 == codecSelferValueTypeArray1234 {
			yyl1402 := r.ReadArrayStart()
			if yyl1402 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1403Slc
	var yyhl1403 bool = l >= 0
	for yyj1403 := 0; ; yyj1403++ {
		if yyhl1403 {
			if yyj1403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1403Slc = r.DecodeBytes(yys1403Slc, true, true)
		yys1403 := string(yys1403Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1403 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1403)
		} // end switch yys1403
	} // end for yyj1403
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1406 int
	var yyb1406 bool
	var yyhl1406 bool = l >= 0
	yyj1406++
	if yyhl1406 {
		yyb1406 = yyj1406 > l
	} else {
		yyb1406 = r.CheckBreak()
	}
	if yyb1406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1406++
	if yyhl1406 {
		yyb1406 = yyj1406 > l
	} else {
		yyb1406 = r.CheckBreak()
	}
	if yyb1406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1406++
		if yyhl1406 {
			yyb1406 = yyj1406 > l
		} else {
			yyb1406 = r.CheckBreak()
		}
		if yyb1406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1409 := z.EncBinary()
		_ = yym1409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1410 := !z.EncBinary()
			yy2arr1410 := z.EncBasicHandle().StructToArray
			var yyq1410 [2]bool
			_, _, _ = yysep1410, yyq1410, yy2arr1410
			const yyr1410 bool = false
			var yynn1410 int
			if yyr1410 || yy2arr1410 {
				r.EncodeArrayStart(2)
			} else {
				yynn1410 = 2
				for _, b := range yyq1410 {
					if b {
						yynn1410++
					}
				}
				r.EncodeMapStart(yynn1410)
				yynn1410 = 0
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1412 := z.EncBinary()
				_ = yym1412
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1415 := z.EncBinary()
				_ = yym1415
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1416 := z.EncBinary()
				_ = yym1416
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1417 := z.DecBinary()
	_ = yym1417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1418 := r.ContainerType()
		if yyct1418 == codecSelferValueTypeMap1234 {
			yyl1418 := r.ReadMapStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1418, d)
			}
		} else if yyct1418 == codecSelferValueTypeArray1234 {
			yyl1418 := r.ReadArrayStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1419Slc
	var yyhl1419 bool = l >= 0
	for yyj1419 := 0; ; yyj1419++ {
		if yyhl1419 {
			if yyj1419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1419Slc = r.DecodeBytes(yys1419Slc, true, true)
		yys1419 := string(yys1419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1419 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1419)
		} // end switch yys1419
	} // end for yyj1419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1422 int
	var yyb1422 bool
	var yyhl1422 bool = l >= 0
	yyj1422++
	if yyhl1422 {
		yyb1422 = yyj1422 > l
	} else {
		yyb1422 = r.CheckBreak()
	}
	if yyb1422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1422++
	if yyhl1422 {
		yyb1422 = yyj1422 > l
	} else {
		yyb1422 = r.CheckBreak()
	}
	if yyb1422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1422++
		if yyhl1422 {
			yyb1422 = yyj1422 > l
		} else {
			yyb1422 = r.CheckBreak()
		}
		if yyb1422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1425 := z.EncBinary()
		_ = yym1425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1426 := !z.EncBinary()
			yy2arr1426 := z.EncBasicHandle().StructToArray
			var yyq1426 [2]bool
			_, _, _ = yysep1426, yyq1426, yy2arr1426
			const yyr1426 bool = false
			var yynn1426 int
			if yyr1426 || yy2arr1426 {
				r.EncodeArrayStart(2)
			} else {
				yynn1426 = 2
				for _, b := range yyq1426 {
					if b {
						yynn1426++
					}
				}
				r.EncodeMapStart(yynn1426)
				yynn1426 = 0
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1428 := z.EncBinary()
				_ = yym1428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1429 := z.EncBinary()
				_ = yym1429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1431 := z.EncBinary()
				_ = yym1431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1432 := z.EncBinary()
				_ = yym1432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1434 := r.ContainerType()
		if yyct1434 == codecSelferValueTypeMap1234 {
			yyl1434 := r.ReadMapStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1434, d)
			}
		} else if yyct1434 == codecSelferValueTypeArray1234 {
			yyl1434 := r.ReadArrayStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1435Slc
	var yyhl1435 bool = l >= 0
	for yyj1435 := 0; ; yyj1435++ {
		if yyhl1435 {
			if yyj1435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1435Slc = r.DecodeBytes(yys1435Slc, true, true)
		yys1435 := string(yys1435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1435 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1435)
		} // end switch yys1435
	} // end for yyj1435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1438 int
	var yyb1438 bool
	var yyhl1438 bool = l >= 0
	yyj1438++
	if yyhl1438 {
		yyb1438 = yyj1438 > l
	} else {
		yyb1438 = r.CheckBreak()
	}
	if yyb1438 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1438++
	if yyhl1438 {
		yyb1438 = yyj1438 > l
	} else {
		yyb1438 = r.CheckBreak()
	}
	if yyb1438 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1438++
		if yyhl1438 {
			yyb1438 = yyj1438 > l
		} else {
			yyb1438 = r.CheckBreak()
		}
		if yyb1438 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1438-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1441 := z.EncBinary()
		_ = yym1441
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1442 := !z.EncBinary()
			yy2arr1442 := z.EncBasicHandle().StructToArray
			var yyq1442 [5]bool
			_, _, _ = yysep1442, yyq1442, yy2arr1442
			const yyr1442 bool = false
			yyq1442[0] = x.Path != ""
			yyq1442[1] = true
			yyq1442[2] = x.Host != ""
			yyq1442[3] = x.Scheme != ""
			yyq1442[4] = len(x.HTTPHeaders) != 0
			var yynn1442 int
			if yyr1442 || yy2arr1442 {
				r.EncodeArrayStart(5)
			} else {
				yynn1442 = 0
				for _, b := range yyq1442 {
					if b {
						yynn1442++
					}
				}
				r.EncodeMapStart(yynn1442)
				yynn1442 = 0
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[0] {
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1442[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[1] {
					yy1447 := &x.Port
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1447) {
					} else if !yym1448 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1447)
					} else {
						z.EncFallback(yy1447)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1449 := &x.Port
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1449) {
					} else if !yym1450 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1449)
					} else {
						z.EncFallback(yy1449)
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[2] {
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1442[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1442[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1442[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1456 := z.EncBinary()
						_ = yym1456
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1442[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1442 || yy2arr1442 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1458 := z.DecBinary()
	_ = yym1458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1459 := r.ContainerType()
		if yyct1459 == codecSelferValueTypeMap1234 {
			yyl1459 := r.ReadMapStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1459, d)
			}
		} else if yyct1459 == codecSelferValueTypeArray1234 {
			yyl1459 := r.ReadArrayStart()
			if yyl1459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1460Slc
	var yyhl1460 bool = l >= 0
	for yyj1460 := 0; ; yyj1460++ {
		if yyhl1460 {
			if yyj1460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1460Slc = r.DecodeBytes(yys1460Slc, true, true)
		yys1460 := string(yys1460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1460 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1462 := &x.Port
				yym1463 := z.DecBinary()
				_ = yym1463
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1462) {
				} else if !yym1463 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1462)
				} else {
					z.DecFallback(yyv1462, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1466 := &x.HTTPHeaders
				yym1467 := z.DecBinary()
				_ = yym1467
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1460)
		} // end switch yys1460
	} // end for yyj1460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1468 int
	var yyb1468 bool
	var yyhl1468 bool = l >= 0
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1470 := &x.Port
		yym1471 := z.DecBinary()
		_ = yym1471
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1470) {
		} else if !yym1471 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1470)
		} else {
			z.DecFallback(yyv1470, false)
		}
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1474 := &x.HTTPHeaders
		yym1475 := z.DecBinary()
		_ = yym1475
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1474), d)
		}
	}
	for {
		yyj1468++
		if yyhl1468 {
			yyb1468 = yyj1468 > l
		} else {
			yyb1468 = r.CheckBreak()
		}
		if yyb1468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1476 := z.EncBinary()
	_ = yym1476
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1477 := z.DecBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1478 := z.EncBinary()
		_ = yym1478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1479 := !z.EncBinary()
			yy2arr1479 := z.EncBasicHandle().StructToArray
			var yyq1479 [1]bool
			_, _, _ = yysep1479, yyq1479, yy2arr1479
			const yyr1479 bool = false
			yyq1479[0] = true
			var yynn1479 int
			if yyr1479 || yy2arr1479 {
				r.EncodeArrayStart(1)
			} else {
				yynn1479 = 0
				for _, b := range yyq1479 {
					if b {
						yynn1479++
					}
				}
				r.EncodeMapStart(yynn1479)
				yynn1479 = 0
			}
			if yyr1479 || yy2arr1479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1479[0] {
					yy1481 := &x.Port
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1481) {
					} else if !yym1482 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1481)
					} else {
						z.EncFallback(yy1481)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1479[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1483 := &x.Port
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1483) {
					} else if !yym1484 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1483)
					} else {
						z.EncFallback(yy1483)
					}
				}
			}
			if yyr1479 || yy2arr1479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1485 := z.DecBinary()
	_ = yym1485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1486 := r.ContainerType()
		if yyct1486 == codecSelferValueTypeMap1234 {
			yyl1486 := r.ReadMapStart()
			if yyl1486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1486, d)
			}
		} else if yyct1486 == codecSelferValueTypeArray1234 {
			yyl1486 := r.ReadArrayStart()
			if yyl1486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1487Slc
	var yyhl1487 bool = l >= 0
	for yyj1487 := 0; ; yyj1487++ {
		if yyhl1487 {
			if yyj1487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1487Slc = r.DecodeBytes(yys1487Slc, true, true)
		yys1487 := string(yys1487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1487 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1488 := &x.Port
				yym1489 := z.DecBinary()
				_ = yym1489
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1488) {
				} else if !yym1489 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1488)
				} else {
					z.DecFallback(yyv1488, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1487)
		} // end switch yys1487
	} // end for yyj1487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1490 int
	var yyb1490 bool
	var yyhl1490 bool = l >= 0
	yyj1490++
	if yyhl1490 {
		yyb1490 = yyj1490 > l
	} else {
		yyb1490 = r.CheckBreak()
	}
	if yyb1490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1491 := &x.Port
		yym1492 := z.DecBinary()
		_ = yym1492
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1491) {
		} else if !yym1492 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1491)
		} else {
			z.DecFallback(yyv1491, false)
		}
	}
	for {
		yyj1490++
		if yyhl1490 {
			yyb1490 = yyj1490 > l
		} else {
			yyb1490 = r.CheckBreak()
		}
		if yyb1490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1493 := z.EncBinary()
		_ = yym1493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1494 := !z.EncBinary()
			yy2arr1494 := z.EncBasicHandle().StructToArray
			var yyq1494 [1]bool
			_, _, _ = yysep1494, yyq1494, yy2arr1494
			const yyr1494 bool = false
			yyq1494[0] = len(x.Command) != 0
			var yynn1494 int
			if yyr1494 || yy2arr1494 {
				r.EncodeArrayStart(1)
			} else {
				yynn1494 = 0
				for _, b := range yyq1494 {
					if b {
						yynn1494++
					}
				}
				r.EncodeMapStart(yynn1494)
				yynn1494 = 0
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1496 := z.EncBinary()
						_ = yym1496
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1497 := z.EncBinary()
						_ = yym1497
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1498 := z.DecBinary()
	_ = yym1498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1499 := r.ContainerType()
		if yyct1499 == codecSelferValueTypeMap1234 {
			yyl1499 := r.ReadMapStart()
			if yyl1499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1499, d)
			}
		} else if yyct1499 == codecSelferValueTypeArray1234 {
			yyl1499 := r.ReadArrayStart()
			if yyl1499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1500Slc
	var yyhl1500 bool = l >= 0
	for yyj1500 := 0; ; yyj1500++ {
		if yyhl1500 {
			if yyj1500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1500Slc = r.DecodeBytes(yys1500Slc, true, true)
		yys1500 := string(yys1500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1500 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1501 := &x.Command
				yym1502 := z.DecBinary()
				_ = yym1502
				if false {
				} else {
					z.F.DecSliceStringX(yyv1501, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1500)
		} // end switch yys1500
	} // end for yyj1500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1503 int
	var yyb1503 bool
	var yyhl1503 bool = l >= 0
	yyj1503++
	if yyhl1503 {
		yyb1503 = yyj1503 > l
	} else {
		yyb1503 = r.CheckBreak()
	}
	if yyb1503 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1504 := &x.Command
		yym1505 := z.DecBinary()
		_ = yym1505
		if false {
		} else {
			z.F.DecSliceStringX(yyv1504, false, d)
		}
	}
	for {
		yyj1503++
		if yyhl1503 {
			yyb1503 = yyj1503 > l
		} else {
			yyb1503 = r.CheckBreak()
		}
		if yyb1503 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1503-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1506 := z.EncBinary()
		_ = yym1506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1507 := !z.EncBinary()
			yy2arr1507 := z.EncBasicHandle().StructToArray
			var yyq1507 [8]bool
			_, _, _ = yysep1507, yyq1507, yy2arr1507
			const yyr1507 bool = false
			yyq1507[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1507[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1507[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1507[3] = x.InitialDelaySeconds != 0
			yyq1507[4] = x.TimeoutSeconds != 0
			yyq1507[5] = x.PeriodSeconds != 0
			yyq1507[6] = x.SuccessThreshold != 0
			yyq1507[7] = x.FailureThreshold != 0
			var yynn1507 int
			if yyr1507 || yy2arr1507 {
				r.EncodeArrayStart(8)
			} else {
				yynn1507 = 0
				for _, b := range yyq1507 {
					if b {
						yynn1507++
					}
				}
				r.EncodeMapStart(yynn1507)
				yynn1507 = 0
			}
			var yyn1508 bool
			if x.Handler.Exec == nil {
				yyn1508 = true
				goto LABEL1508
			}
		LABEL1508:
			if yyr1507 || yy2arr1507 {
				if yyn1508 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1507[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1508 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1509 bool
			if x.Handler.HTTPGet == nil {
				yyn1509 = true
				goto LABEL1509
			}
		LABEL1509:
			if yyr1507 || yy2arr1507 {
				if yyn1509 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1507[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1509 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1510 bool
			if x.Handler.TCPSocket == nil {
				yyn1510 = true
				goto LABEL1510
			}
		LABEL1510:
			if yyr1507 || yy2arr1507 {
				if yyn1510 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1507[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1507[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1510 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[3] {
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1507[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1513 := z.EncBinary()
					_ = yym1513
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[4] {
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1507[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[5] {
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1507[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[6] {
					yym1521 := z.EncBinary()
					_ = yym1521
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1507[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1522 := z.EncBinary()
					_ = yym1522
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1507[7] {
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1507[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1525 := z.EncBinary()
					_ = yym1525
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1507 || yy2arr1507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1526 := z.DecBinary()
	_ = yym1526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1527 := r.ContainerType()
		if yyct1527 == codecSelferValueTypeMap1234 {
			yyl1527 := r.ReadMapStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1527, d)
			}
		} else if yyct1527 == codecSelferValueTypeArray1234 {
			yyl1527 := r.ReadArrayStart()
			if yyl1527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1528Slc
	var yyhl1528 bool = l >= 0
	for yyj1528 := 0; ; yyj1528++ {
		if yyhl1528 {
			if yyj1528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1528Slc = r.DecodeBytes(yys1528Slc, true, true)
		yys1528 := string(yys1528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1528 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1528)
		} // end switch yys1528
	} // end for yyj1528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1537 int
	var yyb1537 bool
	var yyhl1537 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1537++
	if yyhl1537 {
		yyb1537 = yyj1537 > l
	} else {
		yyb1537 = r.CheckBreak()
	}
	if yyb1537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1537++
		if yyhl1537 {
			yyb1537 = yyj1537 > l
		} else {
			yyb1537 = r.CheckBreak()
		}
		if yyb1537 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1537-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1546 := z.EncBinary()
	_ = yym1546
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1547 := z.DecBinary()
	_ = yym1547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1548 := z.EncBinary()
	_ = yym1548
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1549 := z.DecBinary()
	_ = yym1549
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1550 := z.EncBinary()
		_ = yym1550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1551 := !z.EncBinary()
			yy2arr1551 := z.EncBasicHandle().StructToArray
			var yyq1551 [2]bool
			_, _, _ = yysep1551, yyq1551, yy2arr1551
			const yyr1551 bool = false
			yyq1551[0] = len(x.Add) != 0
			yyq1551[1] = len(x.Drop) != 0
			var yynn1551 int
			if yyr1551 || yy2arr1551 {
				r.EncodeArrayStart(2)
			} else {
				yynn1551 = 0
				for _, b := range yyq1551 {
					if b {
						yynn1551++
					}
				}
				r.EncodeMapStart(yynn1551)
				yynn1551 = 0
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1551[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1553 := z.EncBinary()
						_ = yym1553
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1554 := z.EncBinary()
						_ = yym1554
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1551[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1551[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1557 := z.EncBinary()
						_ = yym1557
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1551 || yy2arr1551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1558 := z.DecBinary()
	_ = yym1558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1559 := r.ContainerType()
		if yyct1559 == codecSelferValueTypeMap1234 {
			yyl1559 := r.ReadMapStart()
			if yyl1559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1559, d)
			}
		} else if yyct1559 == codecSelferValueTypeArray1234 {
			yyl1559 := r.ReadArrayStart()
			if yyl1559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1560Slc
	var yyhl1560 bool = l >= 0
	for yyj1560 := 0; ; yyj1560++ {
		if yyhl1560 {
			if yyj1560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1560Slc = r.DecodeBytes(yys1560Slc, true, true)
		yys1560 := string(yys1560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1560 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1561 := &x.Add
				yym1562 := z.DecBinary()
				_ = yym1562
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1561), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1563 := &x.Drop
				yym1564 := z.DecBinary()
				_ = yym1564
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1563), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1560)
		} // end switch yys1560
	} // end for yyj1560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1565 int
	var yyb1565 bool
	var yyhl1565 bool = l >= 0
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1566 := &x.Add
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1566), d)
		}
	}
	yyj1565++
	if yyhl1565 {
		yyb1565 = yyj1565 > l
	} else {
		yyb1565 = r.CheckBreak()
	}
	if yyb1565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1568 := &x.Drop
		yym1569 := z.DecBinary()
		_ = yym1569
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1568), d)
		}
	}
	for {
		yyj1565++
		if yyhl1565 {
			yyb1565 = yyj1565 > l
		} else {
			yyb1565 = r.CheckBreak()
		}
		if yyb1565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1570 := z.EncBinary()
		_ = yym1570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1571 := !z.EncBinary()
			yy2arr1571 := z.EncBasicHandle().StructToArray
			var yyq1571 [2]bool
			_, _, _ = yysep1571, yyq1571, yy2arr1571
			const yyr1571 bool = false
			yyq1571[0] = len(x.Limits) != 0
			yyq1571[1] = len(x.Requests) != 0
			var yynn1571 int
			if yyr1571 || yy2arr1571 {
				r.EncodeArrayStart(2)
			} else {
				yynn1571 = 0
				for _, b := range yyq1571 {
					if b {
						yynn1571++
					}
				}
				r.EncodeMapStart(yynn1571)
				yynn1571 = 0
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1571[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1571[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1571[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1571 || yy2arr1571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1574 := z.DecBinary()
	_ = yym1574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1575 := r.ContainerType()
		if yyct1575 == codecSelferValueTypeMap1234 {
			yyl1575 := r.ReadMapStart()
			if yyl1575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1575, d)
			}
		} else if yyct1575 == codecSelferValueTypeArray1234 {
			yyl1575 := r.ReadArrayStart()
			if yyl1575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1576Slc
	var yyhl1576 bool = l >= 0
	for yyj1576 := 0; ; yyj1576++ {
		if yyhl1576 {
			if yyj1576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1576Slc = r.DecodeBytes(yys1576Slc, true, true)
		yys1576 := string(yys1576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1576 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1577 := &x.Limits
				yyv1577.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1578 := &x.Requests
				yyv1578.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1576)
		} // end switch yys1576
	} // end for yyj1576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1579 int
	var yyb1579 bool
	var yyhl1579 bool = l >= 0
	yyj1579++
	if yyhl1579 {
		yyb1579 = yyj1579 > l
	} else {
		yyb1579 = r.CheckBreak()
	}
	if yyb1579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1580 := &x.Limits
		yyv1580.CodecDecodeSelf(d)
	}
	yyj1579++
	if yyhl1579 {
		yyb1579 = yyj1579 > l
	} else {
		yyb1579 = r.CheckBreak()
	}
	if yyb1579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1581 := &x.Requests
		yyv1581.CodecDecodeSelf(d)
	}
	for {
		yyj1579++
		if yyhl1579 {
			yyb1579 = yyj1579 > l
		} else {
			yyb1579 = r.CheckBreak()
		}
		if yyb1579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1582 := z.EncBinary()
		_ = yym1582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1583 := !z.EncBinary()
			yy2arr1583 := z.EncBasicHandle().StructToArray
			var yyq1583 [18]bool
			_, _, _ = yysep1583, yyq1583, yy2arr1583
			const yyr1583 bool = false
			yyq1583[2] = len(x.Command) != 0
			yyq1583[3] = len(x.Args) != 0
			yyq1583[4] = x.WorkingDir != ""
			yyq1583[5] = len(x.Ports) != 0
			yyq1583[6] = len(x.Env) != 0
			yyq1583[7] = true
			yyq1583[8] = len(x.VolumeMounts) != 0
			yyq1583[9] = x.LivenessProbe != nil
			yyq1583[10] = x.ReadinessProbe != nil
			yyq1583[11] = x.Lifecycle != nil
			yyq1583[12] = x.TerminationMessagePath != ""
			yyq1583[14] = x.SecurityContext != nil
			yyq1583[15] = x.Stdin != false
			yyq1583[16] = x.StdinOnce != false
			yyq1583[17] = x.TTY != false
			var yynn1583 int
			if yyr1583 || yy2arr1583 {
				r.EncodeArrayStart(18)
			} else {
				yynn1583 = 3
				for _, b := range yyq1583 {
					if b {
						yynn1583++
					}
				}
				r.EncodeMapStart(yynn1583)
				yynn1583 = 0
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1585 := z.EncBinary()
				_ = yym1585
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1586 := z.EncBinary()
				_ = yym1586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1588 := z.EncBinary()
				_ = yym1588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1589 := z.EncBinary()
				_ = yym1589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1591 := z.EncBinary()
						_ = yym1591
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1592 := z.EncBinary()
						_ = yym1592
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1594 := z.EncBinary()
						_ = yym1594
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1595 := z.EncBinary()
						_ = yym1595
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[4] {
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1583[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1598 := z.EncBinary()
					_ = yym1598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1600 := z.EncBinary()
						_ = yym1600
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1601 := z.EncBinary()
						_ = yym1601
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1603 := z.EncBinary()
						_ = yym1603
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1604 := z.EncBinary()
						_ = yym1604
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[7] {
					yy1606 := &x.Resources
					yy1606.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1607 := &x.Resources
					yy1607.CodecEncodeSelf(e)
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1609 := z.EncBinary()
						_ = yym1609
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1610 := z.EncBinary()
						_ = yym1610
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[12] {
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1583[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1583[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[15] {
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1583[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1621 := z.EncBinary()
					_ = yym1621
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[16] {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1583[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1583[17] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1583[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1583 || yy2arr1583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1628 := z.DecBinary()
	_ = yym1628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1629 := r.ContainerType()
		if yyct1629 == codecSelferValueTypeMap1234 {
			yyl1629 := r.ReadMapStart()
			if yyl1629 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1629, d)
			}
		} else if yyct1629 == codecSelferValueTypeArray1234 {
			yyl1629 := r.ReadArrayStart()
			if yyl1629 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1630Slc
	var yyhl1630 bool = l >= 0
	for yyj1630 := 0; ; yyj1630++ {
		if yyhl1630 {
			if yyj1630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1630Slc = r.DecodeBytes(yys1630Slc, true, true)
		yys1630 := string(yys1630Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1630 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1633 := &x.Command
				yym1634 := z.DecBinary()
				_ = yym1634
				if false {
				} else {
					z.F.DecSliceStringX(yyv1633, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1635 := &x.Args
				yym1636 := z.DecBinary()
				_ = yym1636
				if false {
				} else {
					z.F.DecSliceStringX(yyv1635, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1638 := &x.Ports
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1638), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1640 := &x.Env
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1640), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1642 := &x.Resources
				yyv1642.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1643 := &x.VolumeMounts
				yym1644 := z.DecBinary()
				_ = yym1644
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1643), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1630)
		} // end switch yys1630
	} // end for yyj1630
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1654 int
	var yyb1654 bool
	var yyhl1654 bool = l >= 0
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1657 := &x.Command
		yym1658 := z.DecBinary()
		_ = yym1658
		if false {
		} else {
			z.F.DecSliceStringX(yyv1657, false, d)
		}
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1659 := &x.Args
		yym1660 := z.DecBinary()
		_ = yym1660
		if false {
		} else {
			z.F.DecSliceStringX(yyv1659, false, d)
		}
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1662 := &x.Ports
		yym1663 := z.DecBinary()
		_ = yym1663
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1662), d)
		}
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1664 := &x.Env
		yym1665 := z.DecBinary()
		_ = yym1665
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1664), d)
		}
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1666 := &x.Resources
		yyv1666.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1667 := &x.VolumeMounts
		yym1668 := z.DecBinary()
		_ = yym1668
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1667), d)
		}
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1654++
	if yyhl1654 {
		yyb1654 = yyj1654 > l
	} else {
		yyb1654 = r.CheckBreak()
	}
	if yyb1654 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1654++
		if yyhl1654 {
			yyb1654 = yyj1654 > l
		} else {
			yyb1654 = r.CheckBreak()
		}
		if yyb1654 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1654-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1678 := z.EncBinary()
		_ = yym1678
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1679 := !z.EncBinary()
			yy2arr1679 := z.EncBasicHandle().StructToArray
			var yyq1679 [3]bool
			_, _, _ = yysep1679, yyq1679, yy2arr1679
			const yyr1679 bool = false
			yyq1679[0] = x.Exec != nil
			yyq1679[1] = x.HTTPGet != nil
			yyq1679[2] = x.TCPSocket != nil
			var yynn1679 int
			if yyr1679 || yy2arr1679 {
				r.EncodeArrayStart(3)
			} else {
				yynn1679 = 0
				for _, b := range yyq1679 {
					if b {
						yynn1679++
					}
				}
				r.EncodeMapStart(yynn1679)
				yynn1679 = 0
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1679[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1679[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1679 || yy2arr1679 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1683 := z.DecBinary()
	_ = yym1683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1684 := r.ContainerType()
		if yyct1684 == codecSelferValueTypeMap1234 {
			yyl1684 := r.ReadMapStart()
			if yyl1684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1684, d)
			}
		} else if yyct1684 == codecSelferValueTypeArray1234 {
			yyl1684 := r.ReadArrayStart()
			if yyl1684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1685Slc
	var yyhl1685 bool = l >= 0
	for yyj1685 := 0; ; yyj1685++ {
		if yyhl1685 {
			if yyj1685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1685Slc = r.DecodeBytes(yys1685Slc, true, true)
		yys1685 := string(yys1685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1685 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1685)
		} // end switch yys1685
	} // end for yyj1685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1689 int
	var yyb1689 bool
	var yyhl1689 bool = l >= 0
	yyj1689++
	if yyhl1689 {
		yyb1689 = yyj1689 > l
	} else {
		yyb1689 = r.CheckBreak()
	}
	if yyb1689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1689++
	if yyhl1689 {
		yyb1689 = yyj1689 > l
	} else {
		yyb1689 = r.CheckBreak()
	}
	if yyb1689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1689++
	if yyhl1689 {
		yyb1689 = yyj1689 > l
	} else {
		yyb1689 = r.CheckBreak()
	}
	if yyb1689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1689++
		if yyhl1689 {
			yyb1689 = yyj1689 > l
		} else {
			yyb1689 = r.CheckBreak()
		}
		if yyb1689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1693 := z.EncBinary()
		_ = yym1693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1694 := !z.EncBinary()
			yy2arr1694 := z.EncBasicHandle().StructToArray
			var yyq1694 [2]bool
			_, _, _ = yysep1694, yyq1694, yy2arr1694
			const yyr1694 bool = false
			yyq1694[0] = x.PostStart != nil
			yyq1694[1] = x.PreStop != nil
			var yynn1694 int
			if yyr1694 || yy2arr1694 {
				r.EncodeArrayStart(2)
			} else {
				yynn1694 = 0
				for _, b := range yyq1694 {
					if b {
						yynn1694++
					}
				}
				r.EncodeMapStart(yynn1694)
				yynn1694 = 0
			}
			if yyr1694 || yy2arr1694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1694[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1694[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1694 || yy2arr1694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1694[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1694[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1694 || yy2arr1694 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1697 := z.DecBinary()
	_ = yym1697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1698 := r.ContainerType()
		if yyct1698 == codecSelferValueTypeMap1234 {
			yyl1698 := r.ReadMapStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1698, d)
			}
		} else if yyct1698 == codecSelferValueTypeArray1234 {
			yyl1698 := r.ReadArrayStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1699Slc
	var yyhl1699 bool = l >= 0
	for yyj1699 := 0; ; yyj1699++ {
		if yyhl1699 {
			if yyj1699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1699Slc = r.DecodeBytes(yys1699Slc, true, true)
		yys1699 := string(yys1699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1699 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1699)
		} // end switch yys1699
	} // end for yyj1699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1705 := z.EncBinary()
	_ = yym1705
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1706 := z.DecBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [2]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[0] = x.Reason != ""
			yyq1708[1] = x.Message != ""
			var yynn1708 int
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(2)
			} else {
				yynn1708 = 0
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
				yynn1708 = 0
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[0] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1715 := z.DecBinary()
	_ = yym1715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1716 := r.ContainerType()
		if yyct1716 == codecSelferValueTypeMap1234 {
			yyl1716 := r.ReadMapStart()
			if yyl1716 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1716, d)
			}
		} else if yyct1716 == codecSelferValueTypeArray1234 {
			yyl1716 := r.ReadArrayStart()
			if yyl1716 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1716, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1717Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1717Slc
	var yyhl1717 bool = l >= 0
	for yyj1717 := 0; ; yyj1717++ {
		if yyhl1717 {
			if yyj1717 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1717Slc = r.DecodeBytes(yys1717Slc, true, true)
		yys1717 := string(yys1717Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1717 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1717)
		} // end switch yys1717
	} // end for yyj1717
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1720 int
	var yyb1720 bool
	var yyhl1720 bool = l >= 0
	yyj1720++
	if yyhl1720 {
		yyb1720 = yyj1720 > l
	} else {
		yyb1720 = r.CheckBreak()
	}
	if yyb1720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1720++
	if yyhl1720 {
		yyb1720 = yyj1720 > l
	} else {
		yyb1720 = r.CheckBreak()
	}
	if yyb1720 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1720++
		if yyhl1720 {
			yyb1720 = yyj1720 > l
		} else {
			yyb1720 = r.CheckBreak()
		}
		if yyb1720 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1720-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1723 := z.EncBinary()
		_ = yym1723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1724 := !z.EncBinary()
			yy2arr1724 := z.EncBasicHandle().StructToArray
			var yyq1724 [1]bool
			_, _, _ = yysep1724, yyq1724, yy2arr1724
			const yyr1724 bool = false
			yyq1724[0] = true
			var yynn1724 int
			if yyr1724 || yy2arr1724 {
				r.EncodeArrayStart(1)
			} else {
				yynn1724 = 0
				for _, b := range yyq1724 {
					if b {
						yynn1724++
					}
				}
				r.EncodeMapStart(yynn1724)
				yynn1724 = 0
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1724[0] {
					yy1726 := &x.StartedAt
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1726) {
					} else if yym1727 {
						z.EncBinaryMarshal(yy1726)
					} else if !yym1727 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1726)
					} else {
						z.EncFallback(yy1726)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1724[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1728 := &x.StartedAt
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1728) {
					} else if yym1729 {
						z.EncBinaryMarshal(yy1728)
					} else if !yym1729 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1728)
					} else {
						z.EncFallback(yy1728)
					}
				}
			}
			if yyr1724 || yy2arr1724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1730 := z.DecBinary()
	_ = yym1730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1731 := r.ContainerType()
		if yyct1731 == codecSelferValueTypeMap1234 {
			yyl1731 := r.ReadMapStart()
			if yyl1731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1731, d)
			}
		} else if yyct1731 == codecSelferValueTypeArray1234 {
			yyl1731 := r.ReadArrayStart()
			if yyl1731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1732Slc
	var yyhl1732 bool = l >= 0
	for yyj1732 := 0; ; yyj1732++ {
		if yyhl1732 {
			if yyj1732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1732Slc = r.DecodeBytes(yys1732Slc, true, true)
		yys1732 := string(yys1732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1732 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1733 := &x.StartedAt
				yym1734 := z.DecBinary()
				_ = yym1734
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1733) {
				} else if yym1734 {
					z.DecBinaryUnmarshal(yyv1733)
				} else if !yym1734 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1733)
				} else {
					z.DecFallback(yyv1733, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1732)
		} // end switch yys1732
	} // end for yyj1732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1735 int
	var yyb1735 bool
	var yyhl1735 bool = l >= 0
	yyj1735++
	if yyhl1735 {
		yyb1735 = yyj1735 > l
	} else {
		yyb1735 = r.CheckBreak()
	}
	if yyb1735 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1736 := &x.StartedAt
		yym1737 := z.DecBinary()
		_ = yym1737
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1736) {
		} else if yym1737 {
			z.DecBinaryUnmarshal(yyv1736)
		} else if !yym1737 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1736)
		} else {
			z.DecFallback(yyv1736, false)
		}
	}
	for {
		yyj1735++
		if yyhl1735 {
			yyb1735 = yyj1735 > l
		} else {
			yyb1735 = r.CheckBreak()
		}
		if yyb1735 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1735-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1738 := z.EncBinary()
		_ = yym1738
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1739 := !z.EncBinary()
			yy2arr1739 := z.EncBasicHandle().StructToArray
			var yyq1739 [7]bool
			_, _, _ = yysep1739, yyq1739, yy2arr1739
			const yyr1739 bool = false
			yyq1739[1] = x.Signal != 0
			yyq1739[2] = x.Reason != ""
			yyq1739[3] = x.Message != ""
			yyq1739[4] = true
			yyq1739[5] = true
			yyq1739[6] = x.ContainerID != ""
			var yynn1739 int
			if yyr1739 || yy2arr1739 {
				r.EncodeArrayStart(7)
			} else {
				yynn1739 = 1
				for _, b := range yyq1739 {
					if b {
						yynn1739++
					}
				}
				r.EncodeMapStart(yynn1739)
				yynn1739 = 0
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1741 := z.EncBinary()
				_ = yym1741
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[1] {
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1739[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[2] {
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1748 := z.EncBinary()
					_ = yym1748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[3] {
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1751 := z.EncBinary()
					_ = yym1751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[4] {
					yy1753 := &x.StartedAt
					yym1754 := z.EncBinary()
					_ = yym1754
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1753) {
					} else if yym1754 {
						z.EncBinaryMarshal(yy1753)
					} else if !yym1754 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1753)
					} else {
						z.EncFallback(yy1753)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1755 := &x.StartedAt
					yym1756 := z.EncBinary()
					_ = yym1756
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1755) {
					} else if yym1756 {
						z.EncBinaryMarshal(yy1755)
					} else if !yym1756 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1755)
					} else {
						z.EncFallback(yy1755)
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[5] {
					yy1758 := &x.FinishedAt
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1758) {
					} else if yym1759 {
						z.EncBinaryMarshal(yy1758)
					} else if !yym1759 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1758)
					} else {
						z.EncFallback(yy1758)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1739[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1760 := &x.FinishedAt
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1760) {
					} else if yym1761 {
						z.EncBinaryMarshal(yy1760)
					} else if !yym1761 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1760)
					} else {
						z.EncFallback(yy1760)
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1739[6] {
					yym1763 := z.EncBinary()
					_ = yym1763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1739[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1764 := z.EncBinary()
					_ = yym1764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1739 || yy2arr1739 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1765 := z.DecBinary()
	_ = yym1765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1766 := r.ContainerType()
		if yyct1766 == codecSelferValueTypeMap1234 {
			yyl1766 := r.ReadMapStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1766, d)
			}
		} else if yyct1766 == codecSelferValueTypeArray1234 {
			yyl1766 := r.ReadArrayStart()
			if yyl1766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1767Slc
	var yyhl1767 bool = l >= 0
	for yyj1767 := 0; ; yyj1767++ {
		if yyhl1767 {
			if yyj1767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1767Slc = r.DecodeBytes(yys1767Slc, true, true)
		yys1767 := string(yys1767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1767 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1772 := &x.StartedAt
				yym1773 := z.DecBinary()
				_ = yym1773
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1772) {
				} else if yym1773 {
					z.DecBinaryUnmarshal(yyv1772)
				} else if !yym1773 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1772)
				} else {
					z.DecFallback(yyv1772, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1774 := &x.FinishedAt
				yym1775 := z.DecBinary()
				_ = yym1775
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1774) {
				} else if yym1775 {
					z.DecBinaryUnmarshal(yyv1774)
				} else if !yym1775 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1774)
				} else {
					z.DecFallback(yyv1774, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1767)
		} // end switch yys1767
	} // end for yyj1767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1777 int
	var yyb1777 bool
	var yyhl1777 bool = l >= 0
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1782 := &x.StartedAt
		yym1783 := z.DecBinary()
		_ = yym1783
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1782) {
		} else if yym1783 {
			z.DecBinaryUnmarshal(yyv1782)
		} else if !yym1783 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1782)
		} else {
			z.DecFallback(yyv1782, false)
		}
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1784 := &x.FinishedAt
		yym1785 := z.DecBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1784) {
		} else if yym1785 {
			z.DecBinaryUnmarshal(yyv1784)
		} else if !yym1785 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1784)
		} else {
			z.DecFallback(yyv1784, false)
		}
	}
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1777++
		if yyhl1777 {
			yyb1777 = yyj1777 > l
		} else {
			yyb1777 = r.CheckBreak()
		}
		if yyb1777 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1777-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1787 := z.EncBinary()
		_ = yym1787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1788 := !z.EncBinary()
			yy2arr1788 := z.EncBasicHandle().StructToArray
			var yyq1788 [3]bool
			_, _, _ = yysep1788, yyq1788, yy2arr1788
			const yyr1788 bool = false
			yyq1788[0] = x.Waiting != nil
			yyq1788[1] = x.Running != nil
			yyq1788[2] = x.Terminated != nil
			var yynn1788 int
			if yyr1788 || yy2arr1788 {
				r.EncodeArrayStart(3)
			} else {
				yynn1788 = 0
				for _, b := range yyq1788 {
					if b {
						yynn1788++
					}
				}
				r.EncodeMapStart(yynn1788)
				yynn1788 = 0
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1788[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1788 || yy2arr1788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1792 := z.DecBinary()
	_ = yym1792
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1793 := r.ContainerType()
		if yyct1793 == codecSelferValueTypeMap1234 {
			yyl1793 := r.ReadMapStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1793, d)
			}
		} else if yyct1793 == codecSelferValueTypeArray1234 {
			yyl1793 := r.ReadArrayStart()
			if yyl1793 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1793, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1794Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1794Slc
	var yyhl1794 bool = l >= 0
	for yyj1794 := 0; ; yyj1794++ {
		if yyhl1794 {
			if yyj1794 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1794Slc = r.DecodeBytes(yys1794Slc, true, true)
		yys1794 := string(yys1794Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1794 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1794)
		} // end switch yys1794
	} // end for yyj1794
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1798 int
	var yyb1798 bool
	var yyhl1798 bool = l >= 0
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1798++
	if yyhl1798 {
		yyb1798 = yyj1798 > l
	} else {
		yyb1798 = r.CheckBreak()
	}
	if yyb1798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1798++
		if yyhl1798 {
			yyb1798 = yyj1798 > l
		} else {
			yyb1798 = r.CheckBreak()
		}
		if yyb1798 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1798-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1802 := z.EncBinary()
		_ = yym1802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1803 := !z.EncBinary()
			yy2arr1803 := z.EncBasicHandle().StructToArray
			var yyq1803 [8]bool
			_, _, _ = yysep1803, yyq1803, yy2arr1803
			const yyr1803 bool = false
			yyq1803[1] = true
			yyq1803[2] = true
			yyq1803[7] = x.ContainerID != ""
			var yynn1803 int
			if yyr1803 || yy2arr1803 {
				r.EncodeArrayStart(8)
			} else {
				yynn1803 = 5
				for _, b := range yyq1803 {
					if b {
						yynn1803++
					}
				}
				r.EncodeMapStart(yynn1803)
				yynn1803 = 0
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1805 := z.EncBinary()
				_ = yym1805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1806 := z.EncBinary()
				_ = yym1806
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[1] {
					yy1808 := &x.State
					yy1808.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1809 := &x.State
					yy1809.CodecEncodeSelf(e)
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[2] {
					yy1811 := &x.LastTerminationState
					yy1811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1812 := &x.LastTerminationState
					yy1812.CodecEncodeSelf(e)
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1814 := z.EncBinary()
				_ = yym1814
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1815 := z.EncBinary()
				_ = yym1815
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1817 := z.EncBinary()
				_ = yym1817
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1818 := z.EncBinary()
				_ = yym1818
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1820 := z.EncBinary()
				_ = yym1820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1821 := z.EncBinary()
				_ = yym1821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1823 := z.EncBinary()
				_ = yym1823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1824 := z.EncBinary()
				_ = yym1824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[7] {
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1829 := r.ContainerType()
		if yyct1829 == codecSelferValueTypeMap1234 {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if yyct1829 == codecSelferValueTypeArray1234 {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1830 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1832 := &x.State
				yyv1832.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1833 := &x.LastTerminationState
				yyv1833.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1839 int
	var yyb1839 bool
	var yyhl1839 bool = l >= 0
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1841 := &x.State
		yyv1841.CodecDecodeSelf(d)
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1842 := &x.LastTerminationState
		yyv1842.CodecDecodeSelf(d)
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1839++
	if yyhl1839 {
		yyb1839 = yyj1839 > l
	} else {
		yyb1839 = r.CheckBreak()
	}
	if yyb1839 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1839++
		if yyhl1839 {
			yyb1839 = yyj1839 > l
		} else {
			yyb1839 = r.CheckBreak()
		}
		if yyb1839 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1839-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1848 := z.EncBinary()
	_ = yym1848
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1849 := z.DecBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1850 := z.EncBinary()
	_ = yym1850
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1851 := z.DecBinary()
	_ = yym1851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1852 := z.EncBinary()
		_ = yym1852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1853 := !z.EncBinary()
			yy2arr1853 := z.EncBasicHandle().StructToArray
			var yyq1853 [6]bool
			_, _, _ = yysep1853, yyq1853, yy2arr1853
			const yyr1853 bool = false
			yyq1853[2] = true
			yyq1853[3] = true
			yyq1853[4] = x.Reason != ""
			yyq1853[5] = x.Message != ""
			var yynn1853 int
			if yyr1853 || yy2arr1853 {
				r.EncodeArrayStart(6)
			} else {
				yynn1853 = 2
				for _, b := range yyq1853 {
					if b {
						yynn1853++
					}
				}
				r.EncodeMapStart(yynn1853)
				yynn1853 = 0
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[2] {
					yy1857 := &x.LastProbeTime
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1857) {
					} else if yym1858 {
						z.EncBinaryMarshal(yy1857)
					} else if !yym1858 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1857)
					} else {
						z.EncFallback(yy1857)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1853[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1859 := &x.LastProbeTime
					yym1860 := z.EncBinary()
					_ = yym1860
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1859) {
					} else if yym1860 {
						z.EncBinaryMarshal(yy1859)
					} else if !yym1860 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1859)
					} else {
						z.EncFallback(yy1859)
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[3] {
					yy1862 := &x.LastTransitionTime
					yym1863 := z.EncBinary()
					_ = yym1863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1862) {
					} else if yym1863 {
						z.EncBinaryMarshal(yy1862)
					} else if !yym1863 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1862)
					} else {
						z.EncFallback(yy1862)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1853[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1864 := &x.LastTransitionTime
					yym1865 := z.EncBinary()
					_ = yym1865
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1864) {
					} else if yym1865 {
						z.EncBinaryMarshal(yy1864)
					} else if !yym1865 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1864)
					} else {
						z.EncFallback(yy1864)
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[4] {
					yym1867 := z.EncBinary()
					_ = yym1867
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1853[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1868 := z.EncBinary()
					_ = yym1868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[5] {
					yym1870 := z.EncBinary()
					_ = yym1870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1853[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1871 := z.EncBinary()
					_ = yym1871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1873 := r.ContainerType()
		if yyct1873 == codecSelferValueTypeMap1234 {
			yyl1873 := r.ReadMapStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1873, d)
			}
		} else if yyct1873 == codecSelferValueTypeArray1234 {
			yyl1873 := r.ReadArrayStart()
			if yyl1873 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1873, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1874Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1874Slc
	var yyhl1874 bool = l >= 0
	for yyj1874 := 0; ; yyj1874++ {
		if yyhl1874 {
			if yyj1874 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1874Slc = r.DecodeBytes(yys1874Slc, true, true)
		yys1874 := string(yys1874Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1874 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1877 := &x.LastProbeTime
				yym1878 := z.DecBinary()
				_ = yym1878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1877) {
				} else if yym1878 {
					z.DecBinaryUnmarshal(yyv1877)
				} else if !yym1878 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1877)
				} else {
					z.DecFallback(yyv1877, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1879 := &x.LastTransitionTime
				yym1880 := z.DecBinary()
				_ = yym1880
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1879) {
				} else if yym1880 {
					z.DecBinaryUnmarshal(yyv1879)
				} else if !yym1880 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1879)
				} else {
					z.DecFallback(yyv1879, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1874)
		} // end switch yys1874
	} // end for yyj1874
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1883 int
	var yyb1883 bool
	var yyhl1883 bool = l >= 0
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1886 := &x.LastProbeTime
		yym1887 := z.DecBinary()
		_ = yym1887
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1886) {
		} else if yym1887 {
			z.DecBinaryUnmarshal(yyv1886)
		} else if !yym1887 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1886)
		} else {
			z.DecFallback(yyv1886, false)
		}
	}
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1888 := &x.LastTransitionTime
		yym1889 := z.DecBinary()
		_ = yym1889
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1888) {
		} else if yym1889 {
			z.DecBinaryUnmarshal(yyv1888)
		} else if !yym1889 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1888)
		} else {
			z.DecFallback(yyv1888, false)
		}
	}
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1883++
	if yyhl1883 {
		yyb1883 = yyj1883 > l
	} else {
		yyb1883 = r.CheckBreak()
	}
	if yyb1883 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1883++
		if yyhl1883 {
			yyb1883 = yyj1883 > l
		} else {
			yyb1883 = r.CheckBreak()
		}
		if yyb1883 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1883-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1892 := z.EncBinary()
	_ = yym1892
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1893 := z.DecBinary()
	_ = yym1893
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1894 := z.EncBinary()
		_ = yym1894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1895 := !z.EncBinary()
			yy2arr1895 := z.EncBasicHandle().StructToArray
			var yyq1895 [4]bool
			_, _, _ = yysep1895, yyq1895, yy2arr1895
			const yyr1895 bool = false
			yyq1895[0] = x.Kind != ""
			yyq1895[1] = x.APIVersion != ""
			yyq1895[2] = true
			var yynn1895 int
			if yyr1895 || yy2arr1895 {
				r.EncodeArrayStart(4)
			} else {
				yynn1895 = 1
				for _, b := range yyq1895 {
					if b {
						yynn1895++
					}
				}
				r.EncodeMapStart(yynn1895)
				yynn1895 = 0
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[0] {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[1] {
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1901 := z.EncBinary()
					_ = yym1901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1895[2] {
					yy1903 := &x.ListMeta
					yym1904 := z.EncBinary()
					_ = yym1904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1903) {
					} else {
						z.EncFallback(yy1903)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1905 := &x.ListMeta
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1905) {
					} else {
						z.EncFallback(yy1905)
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1909 := z.EncBinary()
					_ = yym1909
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1895 || yy2arr1895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1910 := z.DecBinary()
	_ = yym1910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1911 := r.ContainerType()
		if yyct1911 == codecSelferValueTypeMap1234 {
			yyl1911 := r.ReadMapStart()
			if yyl1911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1911, d)
			}
		} else if yyct1911 == codecSelferValueTypeArray1234 {
			yyl1911 := r.ReadArrayStart()
			if yyl1911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1912Slc
	var yyhl1912 bool = l >= 0
	for yyj1912 := 0; ; yyj1912++ {
		if yyhl1912 {
			if yyj1912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1912Slc = r.DecodeBytes(yys1912Slc, true, true)
		yys1912 := string(yys1912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1912 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1915 := &x.ListMeta
				yym1916 := z.DecBinary()
				_ = yym1916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1915) {
				} else {
					z.DecFallback(yyv1915, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1917 := &x.Items
				yym1918 := z.DecBinary()
				_ = yym1918
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1917), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1912)
		} // end switch yys1912
	} // end for yyj1912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1919 int
	var yyb1919 bool
	var yyhl1919 bool = l >= 0
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1922 := &x.ListMeta
		yym1923 := z.DecBinary()
		_ = yym1923
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1922) {
		} else {
			z.DecFallback(yyv1922, false)
		}
	}
	yyj1919++
	if yyhl1919 {
		yyb1919 = yyj1919 > l
	} else {
		yyb1919 = r.CheckBreak()
	}
	if yyb1919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1924 := &x.Items
		yym1925 := z.DecBinary()
		_ = yym1925
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1924), d)
		}
	}
	for {
		yyj1919++
		if yyhl1919 {
			yyb1919 = yyj1919 > l
		} else {
			yyb1919 = r.CheckBreak()
		}
		if yyb1919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1926 := z.EncBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1927 := z.DecBinary()
	_ = yym1927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1928 := z.EncBinary()
		_ = yym1928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1929 := !z.EncBinary()
			yy2arr1929 := z.EncBasicHandle().StructToArray
			var yyq1929 [1]bool
			_, _, _ = yysep1929, yyq1929, yy2arr1929
			const yyr1929 bool = false
			var yynn1929 int
			if yyr1929 || yy2arr1929 {
				r.EncodeArrayStart(1)
			} else {
				yynn1929 = 1
				for _, b := range yyq1929 {
					if b {
						yynn1929++
					}
				}
				r.EncodeMapStart(yynn1929)
				yynn1929 = 0
			}
			if yyr1929 || yy2arr1929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1929 || yy2arr1929 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1933 := z.DecBinary()
	_ = yym1933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1934 := r.ContainerType()
		if yyct1934 == codecSelferValueTypeMap1234 {
			yyl1934 := r.ReadMapStart()
			if yyl1934 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1934, d)
			}
		} else if yyct1934 == codecSelferValueTypeArray1234 {
			yyl1934 := r.ReadArrayStart()
			if yyl1934 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1935Slc
	var yyhl1935 bool = l >= 0
	for yyj1935 := 0; ; yyj1935++ {
		if yyhl1935 {
			if yyj1935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1935Slc = r.DecodeBytes(yys1935Slc, true, true)
		yys1935 := string(yys1935Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1935 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1936 := &x.NodeSelectorTerms
				yym1937 := z.DecBinary()
				_ = yym1937
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1936), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1935)
		} // end switch yys1935
	} // end for yyj1935
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1938 int
	var yyb1938 bool
	var yyhl1938 bool = l >= 0
	yyj1938++
	if yyhl1938 {
		yyb1938 = yyj1938 > l
	} else {
		yyb1938 = r.CheckBreak()
	}
	if yyb1938 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1939 := &x.NodeSelectorTerms
		yym1940 := z.DecBinary()
		_ = yym1940
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1939), d)
		}
	}
	for {
		yyj1938++
		if yyhl1938 {
			yyb1938 = yyj1938 > l
		} else {
			yyb1938 = r.CheckBreak()
		}
		if yyb1938 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1938-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1941 := z.EncBinary()
		_ = yym1941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1942 := !z.EncBinary()
			yy2arr1942 := z.EncBasicHandle().StructToArray
			var yyq1942 [1]bool
			_, _, _ = yysep1942, yyq1942, yy2arr1942
			const yyr1942 bool = false
			var yynn1942 int
			if yyr1942 || yy2arr1942 {
				r.EncodeArrayStart(1)
			} else {
				yynn1942 = 1
				for _, b := range yyq1942 {
					if b {
						yynn1942++
					}
				}
				r.EncodeMapStart(yynn1942)
				yynn1942 = 0
			}
			if yyr1942 || yy2arr1942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1942 || yy2arr1942 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1946 := z.DecBinary()
	_ = yym1946
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1947 := r.ContainerType()
		if yyct1947 == codecSelferValueTypeMap1234 {
			yyl1947 := r.ReadMapStart()
			if yyl1947 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1947, d)
			}
		} else if yyct1947 == codecSelferValueTypeArray1234 {
			yyl1947 := r.ReadArrayStart()
			if yyl1947 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1947, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1948Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1948Slc
	var yyhl1948 bool = l >= 0
	for yyj1948 := 0; ; yyj1948++ {
		if yyhl1948 {
			if yyj1948 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1948Slc = r.DecodeBytes(yys1948Slc, true, true)
		yys1948 := string(yys1948Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1948 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1949 := &x.MatchExpressions
				yym1950 := z.DecBinary()
				_ = yym1950
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1949), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1948)
		} // end switch yys1948
	} // end for yyj1948
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1951 int
	var yyb1951 bool
	var yyhl1951 bool = l >= 0
	yyj1951++
	if yyhl1951 {
		yyb1951 = yyj1951 > l
	} else {
		yyb1951 = r.CheckBreak()
	}
	if yyb1951 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1952 := &x.MatchExpressions
		yym1953 := z.DecBinary()
		_ = yym1953
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1952), d)
		}
	}
	for {
		yyj1951++
		if yyhl1951 {
			yyb1951 = yyj1951 > l
		} else {
			yyb1951 = r.CheckBreak()
		}
		if yyb1951 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1951-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1954 := z.EncBinary()
		_ = yym1954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1955 := !z.EncBinary()
			yy2arr1955 := z.EncBasicHandle().StructToArray
			var yyq1955 [3]bool
			_, _, _ = yysep1955, yyq1955, yy2arr1955
			const yyr1955 bool = false
			yyq1955[2] = len(x.Values) != 0
			var yynn1955 int
			if yyr1955 || yy2arr1955 {
				r.EncodeArrayStart(3)
			} else {
				yynn1955 = 2
				for _, b := range yyq1955 {
					if b {
						yynn1955++
					}
				}
				r.EncodeMapStart(yynn1955)
				yynn1955 = 0
			}
			if yyr1955 || yy2arr1955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1957 := z.EncBinary()
				_ = yym1957
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1958 := z.EncBinary()
				_ = yym1958
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1955 || yy2arr1955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1955 || yy2arr1955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1955[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1961 := z.EncBinary()
						_ = yym1961
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1955[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1962 := z.EncBinary()
						_ = yym1962
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1955 || yy2arr1955 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1963 := z.DecBinary()
	_ = yym1963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1964 := r.ContainerType()
		if yyct1964 == codecSelferValueTypeMap1234 {
			yyl1964 := r.ReadMapStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1964, d)
			}
		} else if yyct1964 == codecSelferValueTypeArray1234 {
			yyl1964 := r.ReadArrayStart()
			if yyl1964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1965Slc
	var yyhl1965 bool = l >= 0
	for yyj1965 := 0; ; yyj1965++ {
		if yyhl1965 {
			if yyj1965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1965Slc = r.DecodeBytes(yys1965Slc, true, true)
		yys1965 := string(yys1965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1965 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1968 := &x.Values
				yym1969 := z.DecBinary()
				_ = yym1969
				if false {
				} else {
					z.F.DecSliceStringX(yyv1968, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1965)
		} // end switch yys1965
	} // end for yyj1965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1970 int
	var yyb1970 bool
	var yyhl1970 bool = l >= 0
	yyj1970++
	if yyhl1970 {
		yyb1970 = yyj1970 > l
	} else {
		yyb1970 = r.CheckBreak()
	}
	if yyb1970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1970++
	if yyhl1970 {
		yyb1970 = yyj1970 > l
	} else {
		yyb1970 = r.CheckBreak()
	}
	if yyb1970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1970++
	if yyhl1970 {
		yyb1970 = yyj1970 > l
	} else {
		yyb1970 = r.CheckBreak()
	}
	if yyb1970 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1973 := &x.Values
		yym1974 := z.DecBinary()
		_ = yym1974
		if false {
		} else {
			z.F.DecSliceStringX(yyv1973, false, d)
		}
	}
	for {
		yyj1970++
		if yyhl1970 {
			yyb1970 = yyj1970 > l
		} else {
			yyb1970 = r.CheckBreak()
		}
		if yyb1970 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1970-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1975 := z.EncBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1976 := z.DecBinary()
	_ = yym1976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [3]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = x.NodeAffinity != nil
			yyq1978[1] = x.PodAffinity != nil
			yyq1978[2] = x.PodAntiAffinity != nil
			var yynn1978 int
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(3)
			} else {
				yynn1978 = 0
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
				yynn1978 = 0
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1978[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1982 := z.DecBinary()
	_ = yym1982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1983 := r.ContainerType()
		if yyct1983 == codecSelferValueTypeMap1234 {
			yyl1983 := r.ReadMapStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1983, d)
			}
		} else if yyct1983 == codecSelferValueTypeArray1234 {
			yyl1983 := r.ReadArrayStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1984Slc
	var yyhl1984 bool = l >= 0
	for yyj1984 := 0; ; yyj1984++ {
		if yyhl1984 {
			if yyj1984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1984Slc = r.DecodeBytes(yys1984Slc, true, true)
		yys1984 := string(yys1984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1984 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1984)
		} // end switch yys1984
	} // end for yyj1984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1988 int
	var yyb1988 bool
	var yyhl1988 bool = l >= 0
	yyj1988++
	if yyhl1988 {
		yyb1988 = yyj1988 > l
	} else {
		yyb1988 = r.CheckBreak()
	}
	if yyb1988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1988++
	if yyhl1988 {
		yyb1988 = yyj1988 > l
	} else {
		yyb1988 = r.CheckBreak()
	}
	if yyb1988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1988++
	if yyhl1988 {
		yyb1988 = yyj1988 > l
	} else {
		yyb1988 = r.CheckBreak()
	}
	if yyb1988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1988++
		if yyhl1988 {
			yyb1988 = yyj1988 > l
		} else {
			yyb1988 = r.CheckBreak()
		}
		if yyb1988 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1988-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1992 := z.EncBinary()
		_ = yym1992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1993 := !z.EncBinary()
			yy2arr1993 := z.EncBasicHandle().StructToArray
			var yyq1993 [2]bool
			_, _, _ = yysep1993, yyq1993, yy2arr1993
			const yyr1993 bool = false
			yyq1993[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1993[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1993 int
			if yyr1993 || yy2arr1993 {
				r.EncodeArrayStart(2)
			} else {
				yynn1993 = 0
				for _, b := range yyq1993 {
					if b {
						yynn1993++
					}
				}
				r.EncodeMapStart(yynn1993)
				yynn1993 = 0
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1995 := z.EncBinary()
						_ = yym1995
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1996 := z.EncBinary()
						_ = yym1996
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1993[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1998 := z.EncBinary()
						_ = yym1998
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1999 := z.EncBinary()
						_ = yym1999
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1993 || yy2arr1993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2000 := z.DecBinary()
	_ = yym2000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2001 := r.ContainerType()
		if yyct2001 == codecSelferValueTypeMap1234 {
			yyl2001 := r.ReadMapStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2001, d)
			}
		} else if yyct2001 == codecSelferValueTypeArray1234 {
			yyl2001 := r.ReadArrayStart()
			if yyl2001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2002Slc
	var yyhl2002 bool = l >= 0
	for yyj2002 := 0; ; yyj2002++ {
		if yyhl2002 {
			if yyj2002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2002Slc = r.DecodeBytes(yys2002Slc, true, true)
		yys2002 := string(yys2002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2002 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2003 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2004 := z.DecBinary()
				_ = yym2004
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2003), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2005 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2006 := z.DecBinary()
				_ = yym2006
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2005), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2002)
		} // end switch yys2002
	} // end for yyj2002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2007 int
	var yyb2007 bool
	var yyhl2007 bool = l >= 0
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2008 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2009 := z.DecBinary()
		_ = yym2009
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2008), d)
		}
	}
	yyj2007++
	if yyhl2007 {
		yyb2007 = yyj2007 > l
	} else {
		yyb2007 = r.CheckBreak()
	}
	if yyb2007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2010 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2011 := z.DecBinary()
		_ = yym2011
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2010), d)
		}
	}
	for {
		yyj2007++
		if yyhl2007 {
			yyb2007 = yyj2007 > l
		} else {
			yyb2007 = r.CheckBreak()
		}
		if yyb2007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2012 := z.EncBinary()
		_ = yym2012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2013 := !z.EncBinary()
			yy2arr2013 := z.EncBasicHandle().StructToArray
			var yyq2013 [2]bool
			_, _, _ = yysep2013, yyq2013, yy2arr2013
			const yyr2013 bool = false
			yyq2013[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq2013[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2013 int
			if yyr2013 || yy2arr2013 {
				r.EncodeArrayStart(2)
			} else {
				yynn2013 = 0
				for _, b := range yyq2013 {
					if b {
						yynn2013++
					}
				}
				r.EncodeMapStart(yynn2013)
				yynn2013 = 0
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2015 := z.EncBinary()
						_ = yym2015
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2013[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2016 := z.EncBinary()
						_ = yym2016
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2013[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2018 := z.EncBinary()
						_ = yym2018
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2013[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2019 := z.EncBinary()
						_ = yym2019
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2013 || yy2arr2013 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2020 := z.DecBinary()
	_ = yym2020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2021 := r.ContainerType()
		if yyct2021 == codecSelferValueTypeMap1234 {
			yyl2021 := r.ReadMapStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2021, d)
			}
		} else if yyct2021 == codecSelferValueTypeArray1234 {
			yyl2021 := r.ReadArrayStart()
			if yyl2021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2022Slc
	var yyhl2022 bool = l >= 0
	for yyj2022 := 0; ; yyj2022++ {
		if yyhl2022 {
			if yyj2022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2022Slc = r.DecodeBytes(yys2022Slc, true, true)
		yys2022 := string(yys2022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2022 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2023 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym2024 := z.DecBinary()
				_ = yym2024
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2023), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2025 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2026 := z.DecBinary()
				_ = yym2026
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2022)
		} // end switch yys2022
	} // end for yyj2022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2027 int
	var yyb2027 bool
	var yyhl2027 bool = l >= 0
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2028 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym2029 := z.DecBinary()
		_ = yym2029
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv2028), d)
		}
	}
	yyj2027++
	if yyhl2027 {
		yyb2027 = yyj2027 > l
	} else {
		yyb2027 = r.CheckBreak()
	}
	if yyb2027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2030 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2031 := z.DecBinary()
		_ = yym2031
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv2030), d)
		}
	}
	for {
		yyj2027++
		if yyhl2027 {
			yyb2027 = yyj2027 > l
		} else {
			yyb2027 = r.CheckBreak()
		}
		if yyb2027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2032 := z.EncBinary()
		_ = yym2032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2033 := !z.EncBinary()
			yy2arr2033 := z.EncBasicHandle().StructToArray
			var yyq2033 [2]bool
			_, _, _ = yysep2033, yyq2033, yy2arr2033
			const yyr2033 bool = false
			var yynn2033 int
			if yyr2033 || yy2arr2033 {
				r.EncodeArrayStart(2)
			} else {
				yynn2033 = 2
				for _, b := range yyq2033 {
					if b {
						yynn2033++
					}
				}
				r.EncodeMapStart(yynn2033)
				yynn2033 = 0
			}
			if yyr2033 || yy2arr2033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2035 := z.EncBinary()
				_ = yym2035
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2036 := z.EncBinary()
				_ = yym2036
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2033 || yy2arr2033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2038 := &x.PodAffinityTerm
				yy2038.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2039 := &x.PodAffinityTerm
				yy2039.CodecEncodeSelf(e)
			}
			if yyr2033 || yy2arr2033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2040 := z.DecBinary()
	_ = yym2040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2041 := r.ContainerType()
		if yyct2041 == codecSelferValueTypeMap1234 {
			yyl2041 := r.ReadMapStart()
			if yyl2041 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2041, d)
			}
		} else if yyct2041 == codecSelferValueTypeArray1234 {
			yyl2041 := r.ReadArrayStart()
			if yyl2041 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2042Slc
	var yyhl2042 bool = l >= 0
	for yyj2042 := 0; ; yyj2042++ {
		if yyhl2042 {
			if yyj2042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2042Slc = r.DecodeBytes(yys2042Slc, true, true)
		yys2042 := string(yys2042Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2042 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv2044 := &x.PodAffinityTerm
				yyv2044.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2042)
		} // end switch yys2042
	} // end for yyj2042
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2045 int
	var yyb2045 bool
	var yyhl2045 bool = l >= 0
	yyj2045++
	if yyhl2045 {
		yyb2045 = yyj2045 > l
	} else {
		yyb2045 = r.CheckBreak()
	}
	if yyb2045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2045++
	if yyhl2045 {
		yyb2045 = yyj2045 > l
	} else {
		yyb2045 = r.CheckBreak()
	}
	if yyb2045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv2047 := &x.PodAffinityTerm
		yyv2047.CodecDecodeSelf(d)
	}
	for {
		yyj2045++
		if yyhl2045 {
			yyb2045 = yyj2045 > l
		} else {
			yyb2045 = r.CheckBreak()
		}
		if yyb2045 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2045-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2048 := z.EncBinary()
		_ = yym2048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2049 := !z.EncBinary()
			yy2arr2049 := z.EncBasicHandle().StructToArray
			var yyq2049 [3]bool
			_, _, _ = yysep2049, yyq2049, yy2arr2049
			const yyr2049 bool = false
			yyq2049[0] = x.LabelSelector != nil
			yyq2049[2] = x.TopologyKey != ""
			var yynn2049 int
			if yyr2049 || yy2arr2049 {
				r.EncodeArrayStart(3)
			} else {
				yynn2049 = 1
				for _, b := range yyq2049 {
					if b {
						yynn2049++
					}
				}
				r.EncodeMapStart(yynn2049)
				yynn2049 = 0
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2049[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2051 := z.EncBinary()
						_ = yym2051
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2049[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2049[2] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2049[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2059 := z.DecBinary()
	_ = yym2059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2060 := r.ContainerType()
		if yyct2060 == codecSelferValueTypeMap1234 {
			yyl2060 := r.ReadMapStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2060, d)
			}
		} else if yyct2060 == codecSelferValueTypeArray1234 {
			yyl2060 := r.ReadArrayStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2061Slc
	var yyhl2061 bool = l >= 0
	for yyj2061 := 0; ; yyj2061++ {
		if yyhl2061 {
			if yyj2061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2061Slc = r.DecodeBytes(yys2061Slc, true, true)
		yys2061 := string(yys2061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2061 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv2064 := &x.Namespaces
				yym2065 := z.DecBinary()
				_ = yym2065
				if false {
				} else {
					z.F.DecSliceStringX(yyv2064, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2061)
		} // end switch yys2061
	} // end for yyj2061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2067 int
	var yyb2067 bool
	var yyhl2067 bool = l >= 0
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv2070 := &x.Namespaces
		yym2071 := z.DecBinary()
		_ = yym2071
		if false {
		} else {
			z.F.DecSliceStringX(yyv2070, false, d)
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj2067++
		if yyhl2067 {
			yyb2067 = yyj2067 > l
		} else {
			yyb2067 = r.CheckBreak()
		}
		if yyb2067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2073 := z.EncBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2074 := !z.EncBinary()
			yy2arr2074 := z.EncBasicHandle().StructToArray
			var yyq2074 [2]bool
			_, _, _ = yysep2074, yyq2074, yy2arr2074
			const yyr2074 bool = false
			yyq2074[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq2074[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn2074 int
			if yyr2074 || yy2arr2074 {
				r.EncodeArrayStart(2)
			} else {
				yynn2074 = 0
				for _, b := range yyq2074 {
					if b {
						yynn2074++
					}
				}
				r.EncodeMapStart(yynn2074)
				yynn2074 = 0
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2074[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2074[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2074[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2077 := z.EncBinary()
						_ = yym2077
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2074[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym2078 := z.EncBinary()
						_ = yym2078
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2079 := z.DecBinary()
	_ = yym2079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2080 := r.ContainerType()
		if yyct2080 == codecSelferValueTypeMap1234 {
			yyl2080 := r.ReadMapStart()
			if yyl2080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2080, d)
			}
		} else if yyct2080 == codecSelferValueTypeArray1234 {
			yyl2080 := r.ReadArrayStart()
			if yyl2080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2081Slc
	var yyhl2081 bool = l >= 0
	for yyj2081 := 0; ; yyj2081++ {
		if yyhl2081 {
			if yyj2081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2081Slc = r.DecodeBytes(yys2081Slc, true, true)
		yys2081 := string(yys2081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2081 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv2083 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym2084 := z.DecBinary()
				_ = yym2084
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2083), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2081)
		} // end switch yys2081
	} // end for yyj2081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2085 int
	var yyb2085 bool
	var yyhl2085 bool = l >= 0
	yyj2085++
	if yyhl2085 {
		yyb2085 = yyj2085 > l
	} else {
		yyb2085 = r.CheckBreak()
	}
	if yyb2085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj2085++
	if yyhl2085 {
		yyb2085 = yyj2085 > l
	} else {
		yyb2085 = r.CheckBreak()
	}
	if yyb2085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv2087 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv2087), d)
		}
	}
	for {
		yyj2085++
		if yyhl2085 {
			yyb2085 = yyj2085 > l
		} else {
			yyb2085 = r.CheckBreak()
		}
		if yyb2085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [2]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			var yynn2090 int
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(2)
			} else {
				yynn2090 = 2
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
				yynn2090 = 0
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2092 := z.EncBinary()
				_ = yym2092
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2093 := z.EncBinary()
				_ = yym2093
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2095 := &x.Preference
				yy2095.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2096 := &x.Preference
				yy2096.CodecEncodeSelf(e)
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2097 := z.DecBinary()
	_ = yym2097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2098 := r.ContainerType()
		if yyct2098 == codecSelferValueTypeMap1234 {
			yyl2098 := r.ReadMapStart()
			if yyl2098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2098, d)
			}
		} else if yyct2098 == codecSelferValueTypeArray1234 {
			yyl2098 := r.ReadArrayStart()
			if yyl2098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2099Slc
	var yyhl2099 bool = l >= 0
	for yyj2099 := 0; ; yyj2099++ {
		if yyhl2099 {
			if yyj2099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2099Slc = r.DecodeBytes(yys2099Slc, true, true)
		yys2099 := string(yys2099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2099 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv2101 := &x.Preference
				yyv2101.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2099)
		} // end switch yys2099
	} // end for yyj2099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2102 int
	var yyb2102 bool
	var yyhl2102 bool = l >= 0
	yyj2102++
	if yyhl2102 {
		yyb2102 = yyj2102 > l
	} else {
		yyb2102 = r.CheckBreak()
	}
	if yyb2102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj2102++
	if yyhl2102 {
		yyb2102 = yyj2102 > l
	} else {
		yyb2102 = r.CheckBreak()
	}
	if yyb2102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv2104 := &x.Preference
		yyv2104.CodecDecodeSelf(d)
	}
	for {
		yyj2102++
		if yyhl2102 {
			yyb2102 = yyj2102 > l
		} else {
			yyb2102 = r.CheckBreak()
		}
		if yyb2102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2105 := z.EncBinary()
		_ = yym2105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2106 := !z.EncBinary()
			yy2arr2106 := z.EncBasicHandle().StructToArray
			var yyq2106 [3]bool
			_, _, _ = yysep2106, yyq2106, yy2arr2106
			const yyr2106 bool = false
			yyq2106[1] = x.Value != ""
			var yynn2106 int
			if yyr2106 || yy2arr2106 {
				r.EncodeArrayStart(3)
			} else {
				yynn2106 = 2
				for _, b := range yyq2106 {
					if b {
						yynn2106++
					}
				}
				r.EncodeMapStart(yynn2106)
				yynn2106 = 0
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2108 := z.EncBinary()
				_ = yym2108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2109 := z.EncBinary()
				_ = yym2109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2106[1] {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2106[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr2106 || yy2arr2106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2114 := z.DecBinary()
	_ = yym2114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2115 := r.ContainerType()
		if yyct2115 == codecSelferValueTypeMap1234 {
			yyl2115 := r.ReadMapStart()
			if yyl2115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2115, d)
			}
		} else if yyct2115 == codecSelferValueTypeArray1234 {
			yyl2115 := r.ReadArrayStart()
			if yyl2115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2116Slc
	var yyhl2116 bool = l >= 0
	for yyj2116 := 0; ; yyj2116++ {
		if yyhl2116 {
			if yyj2116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2116Slc = r.DecodeBytes(yys2116Slc, true, true)
		yys2116 := string(yys2116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2116 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2116)
		} // end switch yys2116
	} // end for yyj2116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2120 int
	var yyb2120 bool
	var yyhl2120 bool = l >= 0
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2120++
	if yyhl2120 {
		yyb2120 = yyj2120 > l
	} else {
		yyb2120 = r.CheckBreak()
	}
	if yyb2120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2120++
		if yyhl2120 {
			yyb2120 = yyj2120 > l
		} else {
			yyb2120 = r.CheckBreak()
		}
		if yyb2120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2124 := z.EncBinary()
	_ = yym2124
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2125 := z.DecBinary()
	_ = yym2125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [4]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[0] = x.Key != ""
			yyq2127[1] = x.Operator != ""
			yyq2127[2] = x.Value != ""
			yyq2127[3] = x.Effect != ""
			var yynn2127 int
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(4)
			} else {
				yynn2127 = 0
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
				yynn2127 = 0
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[0] {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2130 := z.EncBinary()
					_ = yym2130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[2] {
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2136 := z.DecBinary()
	_ = yym2136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2137 := r.ContainerType()
		if yyct2137 == codecSelferValueTypeMap1234 {
			yyl2137 := r.ReadMapStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2137, d)
			}
		} else if yyct2137 == codecSelferValueTypeArray1234 {
			yyl2137 := r.ReadArrayStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2138Slc
	var yyhl2138 bool = l >= 0
	for yyj2138 := 0; ; yyj2138++ {
		if yyhl2138 {
			if yyj2138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2138Slc = r.DecodeBytes(yys2138Slc, true, true)
		yys2138 := string(yys2138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2138 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2138)
		} // end switch yys2138
	} // end for yyj2138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2143 int
	var yyb2143 bool
	var yyhl2143 bool = l >= 0
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2143++
	if yyhl2143 {
		yyb2143 = yyj2143 > l
	} else {
		yyb2143 = r.CheckBreak()
	}
	if yyb2143 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2143++
		if yyhl2143 {
			yyb2143 = yyj2143 > l
		} else {
			yyb2143 = r.CheckBreak()
		}
		if yyb2143 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2143-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2148 := z.EncBinary()
	_ = yym2148
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2149 := z.DecBinary()
	_ = yym2149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2150 := z.EncBinary()
		_ = yym2150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2151 := !z.EncBinary()
			yy2arr2151 := z.EncBasicHandle().StructToArray
			var yyq2151 [13]bool
			_, _, _ = yysep2151, yyq2151, yy2arr2151
			const yyr2151 bool = false
			yyq2151[2] = x.RestartPolicy != ""
			yyq2151[3] = x.TerminationGracePeriodSeconds != nil
			yyq2151[4] = x.ActiveDeadlineSeconds != nil
			yyq2151[5] = x.DNSPolicy != ""
			yyq2151[6] = len(x.NodeSelector) != 0
			yyq2151[8] = x.NodeName != ""
			yyq2151[9] = x.SecurityContext != nil
			yyq2151[10] = len(x.ImagePullSecrets) != 0
			yyq2151[11] = x.Hostname != ""
			yyq2151[12] = x.Subdomain != ""
			var yynn2151 int
			if yyr2151 || yy2arr2151 {
				r.EncodeArrayStart(13)
			} else {
				yynn2151 = 3
				for _, b := range yyq2151 {
					if b {
						yynn2151++
					}
				}
				r.EncodeMapStart(yynn2151)
				yynn2151 = 0
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2160 := *x.TerminationGracePeriodSeconds
						yym2161 := z.EncBinary()
						_ = yym2161
						if false {
						} else {
							r.EncodeInt(int64(yy2160))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2162 := *x.TerminationGracePeriodSeconds
						yym2163 := z.EncBinary()
						_ = yym2163
						if false {
						} else {
							r.EncodeInt(int64(yy2162))
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2165 := *x.ActiveDeadlineSeconds
						yym2166 := z.EncBinary()
						_ = yym2166
						if false {
						} else {
							r.EncodeInt(int64(yy2165))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2167 := *x.ActiveDeadlineSeconds
						yym2168 := z.EncBinary()
						_ = yym2168
						if false {
						} else {
							r.EncodeInt(int64(yy2167))
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2171 := z.EncBinary()
						_ = yym2171
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2172 := z.EncBinary()
						_ = yym2172
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2174 := z.EncBinary()
				_ = yym2174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2175 := z.EncBinary()
				_ = yym2175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[8] {
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2181 := z.EncBinary()
						_ = yym2181
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2182 := z.EncBinary()
						_ = yym2182
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[11] {
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[12] {
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2189 := z.DecBinary()
	_ = yym2189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2190 := r.ContainerType()
		if yyct2190 == codecSelferValueTypeMap1234 {
			yyl2190 := r.ReadMapStart()
			if yyl2190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2190, d)
			}
		} else if yyct2190 == codecSelferValueTypeArray1234 {
			yyl2190 := r.ReadArrayStart()
			if yyl2190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2191Slc
	var yyhl2191 bool = l >= 0
	for yyj2191 := 0; ; yyj2191++ {
		if yyhl2191 {
			if yyj2191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2191Slc = r.DecodeBytes(yys2191Slc, true, true)
		yys2191 := string(yys2191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2191 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2192 := &x.Volumes
				yym2193 := z.DecBinary()
				_ = yym2193
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2192), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2194 := &x.Containers
				yym2195 := z.DecBinary()
				_ = yym2195
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2194), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2198 := z.DecBinary()
				_ = yym2198
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2200 := z.DecBinary()
				_ = yym2200
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2202 := &x.NodeSelector
				yym2203 := z.DecBinary()
				_ = yym2203
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2202, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2207 := &x.ImagePullSecrets
				yym2208 := z.DecBinary()
				_ = yym2208
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2207), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2191)
		} // end switch yys2191
	} // end for yyj2191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2211 int
	var yyb2211 bool
	var yyhl2211 bool = l >= 0
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2212 := &x.Volumes
		yym2213 := z.DecBinary()
		_ = yym2213
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2212), d)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2214 := &x.Containers
		yym2215 := z.DecBinary()
		_ = yym2215
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2214), d)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2218 := z.DecBinary()
		_ = yym2218
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2220 := z.DecBinary()
		_ = yym2220
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2222 := &x.NodeSelector
		yym2223 := z.DecBinary()
		_ = yym2223
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2222, false, d)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2227 := &x.ImagePullSecrets
		yym2228 := z.DecBinary()
		_ = yym2228
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2227), d)
		}
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2211++
	if yyhl2211 {
		yyb2211 = yyj2211 > l
	} else {
		yyb2211 = r.CheckBreak()
	}
	if yyb2211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2211++
		if yyhl2211 {
			yyb2211 = yyj2211 > l
		} else {
			yyb2211 = r.CheckBreak()
		}
		if yyb2211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Sysctl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2231 := z.EncBinary()
		_ = yym2231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2232 := !z.EncBinary()
			yy2arr2232 := z.EncBasicHandle().StructToArray
			var yyq2232 [2]bool
			_, _, _ = yysep2232, yyq2232, yy2arr2232
			const yyr2232 bool = false
			var yynn2232 int
			if yyr2232 || yy2arr2232 {
				r.EncodeArrayStart(2)
			} else {
				yynn2232 = 2
				for _, b := range yyq2232 {
					if b {
						yynn2232++
					}
				}
				r.EncodeMapStart(yynn2232)
				yynn2232 = 0
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2234 := z.EncBinary()
				_ = yym2234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2235 := z.EncBinary()
				_ = yym2235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2237 := z.EncBinary()
				_ = yym2237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr2232 || yy2arr2232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Sysctl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2239 := z.DecBinary()
	_ = yym2239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2240 := r.ContainerType()
		if yyct2240 == codecSelferValueTypeMap1234 {
			yyl2240 := r.ReadMapStart()
			if yyl2240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2240, d)
			}
		} else if yyct2240 == codecSelferValueTypeArray1234 {
			yyl2240 := r.ReadArrayStart()
			if yyl2240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sysctl) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2241Slc
	var yyhl2241 bool = l >= 0
	for yyj2241 := 0; ; yyj2241++ {
		if yyhl2241 {
			if yyj2241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2241Slc = r.DecodeBytes(yys2241Slc, true, true)
		yys2241 := string(yys2241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2241 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2241)
		} // end switch yys2241
	} // end for yyj2241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Sysctl) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2244 int
	var yyb2244 bool
	var yyhl2244 bool = l >= 0
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj2244++
		if yyhl2244 {
			yyb2244 = yyj2244 > l
		} else {
			yyb2244 = r.CheckBreak()
		}
		if yyb2244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2247 := z.EncBinary()
		_ = yym2247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2248 := !z.EncBinary()
			yy2arr2248 := z.EncBasicHandle().StructToArray
			var yyq2248 [8]bool
			_, _, _ = yysep2248, yyq2248, yy2arr2248
			const yyr2248 bool = false
			yyq2248[0] = x.HostNetwork != false
			yyq2248[1] = x.HostPID != false
			yyq2248[2] = x.HostIPC != false
			yyq2248[3] = x.SELinuxOptions != nil
			yyq2248[4] = x.RunAsUser != nil
			yyq2248[5] = x.RunAsNonRoot != nil
			yyq2248[6] = len(x.SupplementalGroups) != 0
			yyq2248[7] = x.FSGroup != nil
			var yynn2248 int
			if yyr2248 || yy2arr2248 {
				r.EncodeArrayStart(8)
			} else {
				yynn2248 = 0
				for _, b := range yyq2248 {
					if b {
						yynn2248++
					}
				}
				r.EncodeMapStart(yynn2248)
				yynn2248 = 0
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[0] {
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2251 := z.EncBinary()
					_ = yym2251
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[1] {
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2254 := z.EncBinary()
					_ = yym2254
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[2] {
					yym2256 := z.EncBinary()
					_ = yym2256
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2260 := *x.RunAsUser
						yym2261 := z.EncBinary()
						_ = yym2261
						if false {
						} else {
							r.EncodeInt(int64(yy2260))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2262 := *x.RunAsUser
						yym2263 := z.EncBinary()
						_ = yym2263
						if false {
						} else {
							r.EncodeInt(int64(yy2262))
						}
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2265 := *x.RunAsNonRoot
						yym2266 := z.EncBinary()
						_ = yym2266
						if false {
						} else {
							r.EncodeBool(bool(yy2265))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2267 := *x.RunAsNonRoot
						yym2268 := z.EncBinary()
						_ = yym2268
						if false {
						} else {
							r.EncodeBool(bool(yy2267))
						}
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2270 := z.EncBinary()
						_ = yym2270
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2271 := z.EncBinary()
						_ = yym2271
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2248[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2273 := *x.FSGroup
						yym2274 := z.EncBinary()
						_ = yym2274
						if false {
						} else {
							r.EncodeInt(int64(yy2273))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2248[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2275 := *x.FSGroup
						yym2276 := z.EncBinary()
						_ = yym2276
						if false {
						} else {
							r.EncodeInt(int64(yy2275))
						}
					}
				}
			}
			if yyr2248 || yy2arr2248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2277 := z.DecBinary()
	_ = yym2277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2278 := r.ContainerType()
		if yyct2278 == codecSelferValueTypeMap1234 {
			yyl2278 := r.ReadMapStart()
			if yyl2278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2278, d)
			}
		} else if yyct2278 == codecSelferValueTypeArray1234 {
			yyl2278 := r.ReadArrayStart()
			if yyl2278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2279Slc
	var yyhl2279 bool = l >= 0
	for yyj2279 := 0; ; yyj2279++ {
		if yyhl2279 {
			if yyj2279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2279Slc = r.DecodeBytes(yys2279Slc, true, true)
		yys2279 := string(yys2279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2279 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2285 := z.DecBinary()
				_ = yym2285
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2287 := z.DecBinary()
				_ = yym2287
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2288 := &x.SupplementalGroups
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2288, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2291 := z.DecBinary()
				_ = yym2291
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2279)
		} // end switch yys2279
	} // end for yyj2279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2292 int
	var yyb2292 bool
	var yyhl2292 bool = l >= 0
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2298 := z.DecBinary()
		_ = yym2298
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2300 := z.DecBinary()
		_ = yym2300
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2301 := &x.SupplementalGroups
		yym2302 := z.DecBinary()
		_ = yym2302
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2301, false, d)
		}
	}
	yyj2292++
	if yyhl2292 {
		yyb2292 = yyj2292 > l
	} else {
		yyb2292 = r.CheckBreak()
	}
	if yyb2292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2304 := z.DecBinary()
		_ = yym2304
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2292++
		if yyhl2292 {
			yyb2292 = yyj2292 > l
		} else {
			yyb2292 = r.CheckBreak()
		}
		if yyb2292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2305 := z.EncBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2306 := !z.EncBinary()
			yy2arr2306 := z.EncBasicHandle().StructToArray
			var yyq2306 [8]bool
			_, _, _ = yysep2306, yyq2306, yy2arr2306
			const yyr2306 bool = false
			yyq2306[0] = x.Phase != ""
			yyq2306[1] = len(x.Conditions) != 0
			yyq2306[2] = x.Message != ""
			yyq2306[3] = x.Reason != ""
			yyq2306[4] = x.HostIP != ""
			yyq2306[5] = x.PodIP != ""
			yyq2306[6] = x.StartTime != nil
			yyq2306[7] = len(x.ContainerStatuses) != 0
			var yynn2306 int
			if yyr2306 || yy2arr2306 {
				r.EncodeArrayStart(8)
			} else {
				yynn2306 = 0
				for _, b := range yyq2306 {
					if b {
						yynn2306++
					}
				}
				r.EncodeMapStart(yynn2306)
				yynn2306 = 0
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2309 := z.EncBinary()
						_ = yym2309
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2306[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2310 := z.EncBinary()
						_ = yym2310
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[2] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[3] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[4] {
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[5] {
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2306[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2324 := z.EncBinary()
						_ = yym2324
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2324 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2324 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2306[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2325 := z.EncBinary()
						_ = yym2325
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2325 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2325 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2306[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2327 := z.EncBinary()
						_ = yym2327
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2306[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2328 := z.EncBinary()
						_ = yym2328
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2306 || yy2arr2306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2329 := z.DecBinary()
	_ = yym2329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2330 := r.ContainerType()
		if yyct2330 == codecSelferValueTypeMap1234 {
			yyl2330 := r.ReadMapStart()
			if yyl2330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2330, d)
			}
		} else if yyct2330 == codecSelferValueTypeArray1234 {
			yyl2330 := r.ReadArrayStart()
			if yyl2330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2331Slc
	var yyhl2331 bool = l >= 0
	for yyj2331 := 0; ; yyj2331++ {
		if yyhl2331 {
			if yyj2331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2331Slc = r.DecodeBytes(yys2331Slc, true, true)
		yys2331 := string(yys2331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2331 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2333 := &x.Conditions
				yym2334 := z.DecBinary()
				_ = yym2334
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2333), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2340 := z.DecBinary()
				_ = yym2340
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2340 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2340 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2341 := &x.ContainerStatuses
				yym2342 := z.DecBinary()
				_ = yym2342
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2341), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2331)
		} // end switch yys2331
	} // end for yyj2331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2343 int
	var yyb2343 bool
	var yyhl2343 bool = l >= 0
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2345 := &x.Conditions
		yym2346 := z.DecBinary()
		_ = yym2346
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2345), d)
		}
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2352 := z.DecBinary()
		_ = yym2352
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2352 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2352 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2343++
	if yyhl2343 {
		yyb2343 = yyj2343 > l
	} else {
		yyb2343 = r.CheckBreak()
	}
	if yyb2343 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2353 := &x.ContainerStatuses
		yym2354 := z.DecBinary()
		_ = yym2354
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2353), d)
		}
	}
	for {
		yyj2343++
		if yyhl2343 {
			yyb2343 = yyj2343 > l
		} else {
			yyb2343 = r.CheckBreak()
		}
		if yyb2343 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2343-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2355 := z.EncBinary()
		_ = yym2355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2356 := !z.EncBinary()
			yy2arr2356 := z.EncBasicHandle().StructToArray
			var yyq2356 [4]bool
			_, _, _ = yysep2356, yyq2356, yy2arr2356
			const yyr2356 bool = false
			yyq2356[0] = x.Kind != ""
			yyq2356[1] = x.APIVersion != ""
			yyq2356[2] = true
			yyq2356[3] = true
			var yynn2356 int
			if yyr2356 || yy2arr2356 {
				r.EncodeArrayStart(4)
			} else {
				yynn2356 = 0
				for _, b := range yyq2356 {
					if b {
						yynn2356++
					}
				}
				r.EncodeMapStart(yynn2356)
				yynn2356 = 0
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[0] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[1] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2356[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[2] {
					yy2364 := &x.ObjectMeta
					yy2364.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2365 := &x.ObjectMeta
					yy2365.CodecEncodeSelf(e)
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2356[3] {
					yy2367 := &x.Status
					yy2367.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2356[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2368 := &x.Status
					yy2368.CodecEncodeSelf(e)
				}
			}
			if yyr2356 || yy2arr2356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2369 := z.DecBinary()
	_ = yym2369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2370 := r.ContainerType()
		if yyct2370 == codecSelferValueTypeMap1234 {
			yyl2370 := r.ReadMapStart()
			if yyl2370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2370, d)
			}
		} else if yyct2370 == codecSelferValueTypeArray1234 {
			yyl2370 := r.ReadArrayStart()
			if yyl2370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2371Slc
	var yyhl2371 bool = l >= 0
	for yyj2371 := 0; ; yyj2371++ {
		if yyhl2371 {
			if yyj2371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2371Slc = r.DecodeBytes(yys2371Slc, true, true)
		yys2371 := string(yys2371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2371 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2374 := &x.ObjectMeta
				yyv2374.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2375 := &x.Status
				yyv2375.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2371)
		} // end switch yys2371
	} // end for yyj2371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2376 int
	var yyb2376 bool
	var yyhl2376 bool = l >= 0
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2379 := &x.ObjectMeta
		yyv2379.CodecDecodeSelf(d)
	}
	yyj2376++
	if yyhl2376 {
		yyb2376 = yyj2376 > l
	} else {
		yyb2376 = r.CheckBreak()
	}
	if yyb2376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2380 := &x.Status
		yyv2380.CodecDecodeSelf(d)
	}
	for {
		yyj2376++
		if yyhl2376 {
			yyb2376 = yyj2376 > l
		} else {
			yyb2376 = r.CheckBreak()
		}
		if yyb2376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2381 := z.EncBinary()
		_ = yym2381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2382 := !z.EncBinary()
			yy2arr2382 := z.EncBasicHandle().StructToArray
			var yyq2382 [5]bool
			_, _, _ = yysep2382, yyq2382, yy2arr2382
			const yyr2382 bool = false
			yyq2382[0] = x.Kind != ""
			yyq2382[1] = x.APIVersion != ""
			yyq2382[2] = true
			yyq2382[3] = true
			yyq2382[4] = true
			var yynn2382 int
			if yyr2382 || yy2arr2382 {
				r.EncodeArrayStart(5)
			} else {
				yynn2382 = 0
				for _, b := range yyq2382 {
					if b {
						yynn2382++
					}
				}
				r.EncodeMapStart(yynn2382)
				yynn2382 = 0
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[0] {
					yym2384 := z.EncBinary()
					_ = yym2384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[1] {
					yym2387 := z.EncBinary()
					_ = yym2387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[2] {
					yy2390 := &x.ObjectMeta
					yy2390.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2391 := &x.ObjectMeta
					yy2391.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[3] {
					yy2393 := &x.Spec
					yy2393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2394 := &x.Spec
					yy2394.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2382[4] {
					yy2396 := &x.Status
					yy2396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2382[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2397 := &x.Status
					yy2397.CodecEncodeSelf(e)
				}
			}
			if yyr2382 || yy2arr2382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2398 := z.DecBinary()
	_ = yym2398
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2399 := r.ContainerType()
		if yyct2399 == codecSelferValueTypeMap1234 {
			yyl2399 := r.ReadMapStart()
			if yyl2399 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2399, d)
			}
		} else if yyct2399 == codecSelferValueTypeArray1234 {
			yyl2399 := r.ReadArrayStart()
			if yyl2399 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2399, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2400Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2400Slc
	var yyhl2400 bool = l >= 0
	for yyj2400 := 0; ; yyj2400++ {
		if yyhl2400 {
			if yyj2400 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2400Slc = r.DecodeBytes(yys2400Slc, true, true)
		yys2400 := string(yys2400Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2400 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2403 := &x.ObjectMeta
				yyv2403.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2404 := &x.Spec
				yyv2404.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2405 := &x.Status
				yyv2405.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2400)
		} // end switch yys2400
	} // end for yyj2400
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2406 int
	var yyb2406 bool
	var yyhl2406 bool = l >= 0
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2409 := &x.ObjectMeta
		yyv2409.CodecDecodeSelf(d)
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2410 := &x.Spec
		yyv2410.CodecDecodeSelf(d)
	}
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2411 := &x.Status
		yyv2411.CodecDecodeSelf(d)
	}
	for {
		yyj2406++
		if yyhl2406 {
			yyb2406 = yyj2406 > l
		} else {
			yyb2406 = r.CheckBreak()
		}
		if yyb2406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [2]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[0] = true
			yyq2413[1] = true
			var yynn2413 int
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(2)
			} else {
				yynn2413 = 0
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
				yynn2413 = 0
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[0] {
					yy2415 := &x.ObjectMeta
					yy2415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2416 := &x.ObjectMeta
					yy2416.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[1] {
					yy2418 := &x.Spec
					yy2418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2419 := &x.Spec
					yy2419.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2420 := z.DecBinary()
	_ = yym2420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2421 := r.ContainerType()
		if yyct2421 == codecSelferValueTypeMap1234 {
			yyl2421 := r.ReadMapStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2421, d)
			}
		} else if yyct2421 == codecSelferValueTypeArray1234 {
			yyl2421 := r.ReadArrayStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2422Slc
	var yyhl2422 bool = l >= 0
	for yyj2422 := 0; ; yyj2422++ {
		if yyhl2422 {
			if yyj2422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2422Slc = r.DecodeBytes(yys2422Slc, true, true)
		yys2422 := string(yys2422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2422 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2423 := &x.ObjectMeta
				yyv2423.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2424 := &x.Spec
				yyv2424.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2422)
		} // end switch yys2422
	} // end for yyj2422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2425 int
	var yyb2425 bool
	var yyhl2425 bool = l >= 0
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2426 := &x.ObjectMeta
		yyv2426.CodecDecodeSelf(d)
	}
	yyj2425++
	if yyhl2425 {
		yyb2425 = yyj2425 > l
	} else {
		yyb2425 = r.CheckBreak()
	}
	if yyb2425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2427 := &x.Spec
		yyv2427.CodecDecodeSelf(d)
	}
	for {
		yyj2425++
		if yyhl2425 {
			yyb2425 = yyj2425 > l
		} else {
			yyb2425 = r.CheckBreak()
		}
		if yyb2425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2428 := z.EncBinary()
		_ = yym2428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2429 := !z.EncBinary()
			yy2arr2429 := z.EncBasicHandle().StructToArray
			var yyq2429 [4]bool
			_, _, _ = yysep2429, yyq2429, yy2arr2429
			const yyr2429 bool = false
			yyq2429[0] = x.Kind != ""
			yyq2429[1] = x.APIVersion != ""
			yyq2429[2] = true
			yyq2429[3] = true
			var yynn2429 int
			if yyr2429 || yy2arr2429 {
				r.EncodeArrayStart(4)
			} else {
				yynn2429 = 0
				for _, b := range yyq2429 {
					if b {
						yynn2429++
					}
				}
				r.EncodeMapStart(yynn2429)
				yynn2429 = 0
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[0] {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2429[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[1] {
					yym2434 := z.EncBinary()
					_ = yym2434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2429[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2435 := z.EncBinary()
					_ = yym2435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[2] {
					yy2437 := &x.ObjectMeta
					yy2437.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2429[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2438 := &x.ObjectMeta
					yy2438.CodecEncodeSelf(e)
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2429[3] {
					yy2440 := &x.Template
					yy2440.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2429[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2441 := &x.Template
					yy2441.CodecEncodeSelf(e)
				}
			}
			if yyr2429 || yy2arr2429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2442 := z.DecBinary()
	_ = yym2442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2443 := r.ContainerType()
		if yyct2443 == codecSelferValueTypeMap1234 {
			yyl2443 := r.ReadMapStart()
			if yyl2443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2443, d)
			}
		} else if yyct2443 == codecSelferValueTypeArray1234 {
			yyl2443 := r.ReadArrayStart()
			if yyl2443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2444Slc
	var yyhl2444 bool = l >= 0
	for yyj2444 := 0; ; yyj2444++ {
		if yyhl2444 {
			if yyj2444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2444Slc = r.DecodeBytes(yys2444Slc, true, true)
		yys2444 := string(yys2444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2444 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2447 := &x.ObjectMeta
				yyv2447.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2448 := &x.Template
				yyv2448.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2444)
		} // end switch yys2444
	} // end for yyj2444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2449 int
	var yyb2449 bool
	var yyhl2449 bool = l >= 0
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2452 := &x.ObjectMeta
		yyv2452.CodecDecodeSelf(d)
	}
	yyj2449++
	if yyhl2449 {
		yyb2449 = yyj2449 > l
	} else {
		yyb2449 = r.CheckBreak()
	}
	if yyb2449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2453 := &x.Template
		yyv2453.CodecDecodeSelf(d)
	}
	for {
		yyj2449++
		if yyhl2449 {
			yyb2449 = yyj2449 > l
		} else {
			yyb2449 = r.CheckBreak()
		}
		if yyb2449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2454 := z.EncBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2455 := !z.EncBinary()
			yy2arr2455 := z.EncBasicHandle().StructToArray
			var yyq2455 [4]bool
			_, _, _ = yysep2455, yyq2455, yy2arr2455
			const yyr2455 bool = false
			yyq2455[0] = x.Kind != ""
			yyq2455[1] = x.APIVersion != ""
			yyq2455[2] = true
			var yynn2455 int
			if yyr2455 || yy2arr2455 {
				r.EncodeArrayStart(4)
			} else {
				yynn2455 = 1
				for _, b := range yyq2455 {
					if b {
						yynn2455++
					}
				}
				r.EncodeMapStart(yynn2455)
				yynn2455 = 0
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[0] {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[1] {
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2461 := z.EncBinary()
					_ = yym2461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2455[2] {
					yy2463 := &x.ListMeta
					yym2464 := z.EncBinary()
					_ = yym2464
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2463) {
					} else {
						z.EncFallback(yy2463)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2465 := &x.ListMeta
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2465) {
					} else {
						z.EncFallback(yy2465)
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2469 := z.EncBinary()
					_ = yym2469
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2455 || yy2arr2455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2470 := z.DecBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2471 := r.ContainerType()
		if yyct2471 == codecSelferValueTypeMap1234 {
			yyl2471 := r.ReadMapStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2471, d)
			}
		} else if yyct2471 == codecSelferValueTypeArray1234 {
			yyl2471 := r.ReadArrayStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2472Slc
	var yyhl2472 bool = l >= 0
	for yyj2472 := 0; ; yyj2472++ {
		if yyhl2472 {
			if yyj2472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2472Slc = r.DecodeBytes(yys2472Slc, true, true)
		yys2472 := string(yys2472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2472 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2475 := &x.ListMeta
				yym2476 := z.DecBinary()
				_ = yym2476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2475) {
				} else {
					z.DecFallback(yyv2475, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2477 := &x.Items
				yym2478 := z.DecBinary()
				_ = yym2478
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2477), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2472)
		} // end switch yys2472
	} // end for yyj2472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2479 int
	var yyb2479 bool
	var yyhl2479 bool = l >= 0
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2482 := &x.ListMeta
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2482) {
		} else {
			z.DecFallback(yyv2482, false)
		}
	}
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2484 := &x.Items
		yym2485 := z.DecBinary()
		_ = yym2485
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2484), d)
		}
	}
	for {
		yyj2479++
		if yyhl2479 {
			yyb2479 = yyj2479 > l
		} else {
			yyb2479 = r.CheckBreak()
		}
		if yyb2479 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2479-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2486 := z.EncBinary()
		_ = yym2486
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2487 := !z.EncBinary()
			yy2arr2487 := z.EncBasicHandle().StructToArray
			var yyq2487 [4]bool
			_, _, _ = yysep2487, yyq2487, yy2arr2487
			const yyr2487 bool = false
			yyq2487[1] = x.MinReadySeconds != 0
			yyq2487[3] = x.Template != nil
			var yynn2487 int
			if yyr2487 || yy2arr2487 {
				r.EncodeArrayStart(4)
			} else {
				yynn2487 = 2
				for _, b := range yyq2487 {
					if b {
						yynn2487++
					}
				}
				r.EncodeMapStart(yynn2487)
				yynn2487 = 0
			}
			if yyr2487 || yy2arr2487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2489 := z.EncBinary()
				_ = yym2489
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2490 := z.EncBinary()
				_ = yym2490
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2487 || yy2arr2487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2487[1] {
					yym2492 := z.EncBinary()
					_ = yym2492
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2487[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr2487 || yy2arr2487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2495 := z.EncBinary()
					_ = yym2495
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2487 || yy2arr2487 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2487[3] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2487[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2487 || yy2arr2487 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2499 := r.ContainerType()
		if yyct2499 == codecSelferValueTypeMap1234 {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if yyct2499 == codecSelferValueTypeArray1234 {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2500 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2503 := &x.Selector
				yym2504 := z.DecBinary()
				_ = yym2504
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2503, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2506 int
	var yyb2506 bool
	var yyhl2506 bool = l >= 0
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2509 := &x.Selector
		yym2510 := z.DecBinary()
		_ = yym2510
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2509, false, d)
		}
	}
	yyj2506++
	if yyhl2506 {
		yyb2506 = yyj2506 > l
	} else {
		yyb2506 = r.CheckBreak()
	}
	if yyb2506 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2506++
		if yyhl2506 {
			yyb2506 = yyj2506 > l
		} else {
			yyb2506 = r.CheckBreak()
		}
		if yyb2506 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2506-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2512 := z.EncBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2513 := !z.EncBinary()
			yy2arr2513 := z.EncBasicHandle().StructToArray
			var yyq2513 [6]bool
			_, _, _ = yysep2513, yyq2513, yy2arr2513
			const yyr2513 bool = false
			yyq2513[1] = x.FullyLabeledReplicas != 0
			yyq2513[2] = x.ReadyReplicas != 0
			yyq2513[3] = x.AvailableReplicas != 0
			yyq2513[4] = x.ObservedGeneration != 0
			yyq2513[5] = len(x.Conditions) != 0
			var yynn2513 int
			if yyr2513 || yy2arr2513 {
				r.EncodeArrayStart(6)
			} else {
				yynn2513 = 1
				for _, b := range yyq2513 {
					if b {
						yynn2513++
					}
				}
				r.EncodeMapStart(yynn2513)
				yynn2513 = 0
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2515 := z.EncBinary()
				_ = yym2515
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2516 := z.EncBinary()
				_ = yym2516
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[1] {
					yym2518 := z.EncBinary()
					_ = yym2518
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2513[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[2] {
					yym2521 := z.EncBinary()
					_ = yym2521
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2513[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[3] {
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2513[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[4] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2513[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2530 := z.EncBinary()
						_ = yym2530
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2513[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2531 := z.EncBinary()
						_ = yym2531
						if false {
						} else {
							h.encSliceReplicationControllerCondition(([]ReplicationControllerCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2532 := z.DecBinary()
	_ = yym2532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2533 := r.ContainerType()
		if yyct2533 == codecSelferValueTypeMap1234 {
			yyl2533 := r.ReadMapStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2533, d)
			}
		} else if yyct2533 == codecSelferValueTypeArray1234 {
			yyl2533 := r.ReadArrayStart()
			if yyl2533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2534Slc
	var yyhl2534 bool = l >= 0
	for yyj2534 := 0; ; yyj2534++ {
		if yyhl2534 {
			if yyj2534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2534Slc = r.DecodeBytes(yys2534Slc, true, true)
		yys2534 := string(yys2534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2534 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2540 := &x.Conditions
				yym2541 := z.DecBinary()
				_ = yym2541
				if false {
				} else {
					h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2540), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2534)
		} // end switch yys2534
	} // end for yyj2534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2542 int
	var yyb2542 bool
	var yyhl2542 bool = l >= 0
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2548 := &x.Conditions
		yym2549 := z.DecBinary()
		_ = yym2549
		if false {
		} else {
			h.decSliceReplicationControllerCondition((*[]ReplicationControllerCondition)(yyv2548), d)
		}
	}
	for {
		yyj2542++
		if yyhl2542 {
			yyb2542 = yyj2542 > l
		} else {
			yyb2542 = r.CheckBreak()
		}
		if yyb2542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicationControllerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2550 := z.EncBinary()
	_ = yym2550
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicationControllerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2551 := z.DecBinary()
	_ = yym2551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicationControllerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2552 := z.EncBinary()
		_ = yym2552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2553 := !z.EncBinary()
			yy2arr2553 := z.EncBasicHandle().StructToArray
			var yyq2553 [5]bool
			_, _, _ = yysep2553, yyq2553, yy2arr2553
			const yyr2553 bool = false
			yyq2553[2] = true
			yyq2553[3] = x.Reason != ""
			yyq2553[4] = x.Message != ""
			var yynn2553 int
			if yyr2553 || yy2arr2553 {
				r.EncodeArrayStart(5)
			} else {
				yynn2553 = 2
				for _, b := range yyq2553 {
					if b {
						yynn2553++
					}
				}
				r.EncodeMapStart(yynn2553)
				yynn2553 = 0
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[2] {
					yy2557 := &x.LastTransitionTime
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2557) {
					} else if yym2558 {
						z.EncBinaryMarshal(yy2557)
					} else if !yym2558 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2557)
					} else {
						z.EncFallback(yy2557)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2559 := &x.LastTransitionTime
					yym2560 := z.EncBinary()
					_ = yym2560
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2559) {
					} else if yym2560 {
						z.EncBinaryMarshal(yy2559)
					} else if !yym2560 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2559)
					} else {
						z.EncFallback(yy2559)
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[3] {
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2553[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2563 := z.EncBinary()
					_ = yym2563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[4] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2553[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2567 := z.DecBinary()
	_ = yym2567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2568 := r.ContainerType()
		if yyct2568 == codecSelferValueTypeMap1234 {
			yyl2568 := r.ReadMapStart()
			if yyl2568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2568, d)
			}
		} else if yyct2568 == codecSelferValueTypeArray1234 {
			yyl2568 := r.ReadArrayStart()
			if yyl2568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2569Slc
	var yyhl2569 bool = l >= 0
	for yyj2569 := 0; ; yyj2569++ {
		if yyhl2569 {
			if yyj2569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2569Slc = r.DecodeBytes(yys2569Slc, true, true)
		yys2569 := string(yys2569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2569 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicationControllerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2572 := &x.LastTransitionTime
				yym2573 := z.DecBinary()
				_ = yym2573
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2572) {
				} else if yym2573 {
					z.DecBinaryUnmarshal(yyv2572)
				} else if !yym2573 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2572)
				} else {
					z.DecFallback(yyv2572, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2569)
		} // end switch yys2569
	} // end for yyj2569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2576 int
	var yyb2576 bool
	var yyhl2576 bool = l >= 0
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicationControllerConditionType(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2579 := &x.LastTransitionTime
		yym2580 := z.DecBinary()
		_ = yym2580
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2579) {
		} else if yym2580 {
			z.DecBinaryUnmarshal(yyv2579)
		} else if !yym2580 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2579)
		} else {
			z.DecFallback(yyv2579, false)
		}
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2576++
	if yyhl2576 {
		yyb2576 = yyj2576 > l
	} else {
		yyb2576 = r.CheckBreak()
	}
	if yyb2576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2576++
		if yyhl2576 {
			yyb2576 = yyj2576 > l
		} else {
			yyb2576 = r.CheckBreak()
		}
		if yyb2576 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2576-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2583 := z.EncBinary()
		_ = yym2583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2584 := !z.EncBinary()
			yy2arr2584 := z.EncBasicHandle().StructToArray
			var yyq2584 [5]bool
			_, _, _ = yysep2584, yyq2584, yy2arr2584
			const yyr2584 bool = false
			yyq2584[0] = x.Kind != ""
			yyq2584[1] = x.APIVersion != ""
			yyq2584[2] = true
			yyq2584[3] = true
			yyq2584[4] = true
			var yynn2584 int
			if yyr2584 || yy2arr2584 {
				r.EncodeArrayStart(5)
			} else {
				yynn2584 = 0
				for _, b := range yyq2584 {
					if b {
						yynn2584++
					}
				}
				r.EncodeMapStart(yynn2584)
				yynn2584 = 0
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[0] {
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[1] {
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[2] {
					yy2592 := &x.ObjectMeta
					yy2592.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2584[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2593 := &x.ObjectMeta
					yy2593.CodecEncodeSelf(e)
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[3] {
					yy2595 := &x.Spec
					yy2595.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2584[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2596 := &x.Spec
					yy2596.CodecEncodeSelf(e)
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2584[4] {
					yy2598 := &x.Status
					yy2598.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2584[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2599 := &x.Status
					yy2599.CodecEncodeSelf(e)
				}
			}
			if yyr2584 || yy2arr2584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2600 := z.DecBinary()
	_ = yym2600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2601 := r.ContainerType()
		if yyct2601 == codecSelferValueTypeMap1234 {
			yyl2601 := r.ReadMapStart()
			if yyl2601 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2601, d)
			}
		} else if yyct2601 == codecSelferValueTypeArray1234 {
			yyl2601 := r.ReadArrayStart()
			if yyl2601 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2602Slc
	var yyhl2602 bool = l >= 0
	for yyj2602 := 0; ; yyj2602++ {
		if yyhl2602 {
			if yyj2602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2602Slc = r.DecodeBytes(yys2602Slc, true, true)
		yys2602 := string(yys2602Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2602 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2605 := &x.ObjectMeta
				yyv2605.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2606 := &x.Spec
				yyv2606.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2607 := &x.Status
				yyv2607.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2602)
		} // end switch yys2602
	} // end for yyj2602
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2608 int
	var yyb2608 bool
	var yyhl2608 bool = l >= 0
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2611 := &x.ObjectMeta
		yyv2611.CodecDecodeSelf(d)
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2612 := &x.Spec
		yyv2612.CodecDecodeSelf(d)
	}
	yyj2608++
	if yyhl2608 {
		yyb2608 = yyj2608 > l
	} else {
		yyb2608 = r.CheckBreak()
	}
	if yyb2608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2613 := &x.Status
		yyv2613.CodecDecodeSelf(d)
	}
	for {
		yyj2608++
		if yyhl2608 {
			yyb2608 = yyj2608 > l
		} else {
			yyb2608 = r.CheckBreak()
		}
		if yyb2608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2614 := z.EncBinary()
		_ = yym2614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2615 := !z.EncBinary()
			yy2arr2615 := z.EncBasicHandle().StructToArray
			var yyq2615 [4]bool
			_, _, _ = yysep2615, yyq2615, yy2arr2615
			const yyr2615 bool = false
			yyq2615[0] = x.Kind != ""
			yyq2615[1] = x.APIVersion != ""
			yyq2615[2] = true
			var yynn2615 int
			if yyr2615 || yy2arr2615 {
				r.EncodeArrayStart(4)
			} else {
				yynn2615 = 1
				for _, b := range yyq2615 {
					if b {
						yynn2615++
					}
				}
				r.EncodeMapStart(yynn2615)
				yynn2615 = 0
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[0] {
					yym2617 := z.EncBinary()
					_ = yym2617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[1] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2615[2] {
					yy2623 := &x.ListMeta
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2623) {
					} else {
						z.EncFallback(yy2623)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2615[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2625 := &x.ListMeta
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2625) {
					} else {
						z.EncFallback(yy2625)
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2628 := z.EncBinary()
					_ = yym2628
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2615 || yy2arr2615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2630 := z.DecBinary()
	_ = yym2630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2631 := r.ContainerType()
		if yyct2631 == codecSelferValueTypeMap1234 {
			yyl2631 := r.ReadMapStart()
			if yyl2631 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2631, d)
			}
		} else if yyct2631 == codecSelferValueTypeArray1234 {
			yyl2631 := r.ReadArrayStart()
			if yyl2631 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2631, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2632Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2632Slc
	var yyhl2632 bool = l >= 0
	for yyj2632 := 0; ; yyj2632++ {
		if yyhl2632 {
			if yyj2632 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2632Slc = r.DecodeBytes(yys2632Slc, true, true)
		yys2632 := string(yys2632Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2632 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2635 := &x.ListMeta
				yym2636 := z.DecBinary()
				_ = yym2636
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2635) {
				} else {
					z.DecFallback(yyv2635, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2637 := &x.Items
				yym2638 := z.DecBinary()
				_ = yym2638
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2637), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2632)
		} // end switch yys2632
	} // end for yyj2632
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2639 int
	var yyb2639 bool
	var yyhl2639 bool = l >= 0
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2642 := &x.ListMeta
		yym2643 := z.DecBinary()
		_ = yym2643
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2642) {
		} else {
			z.DecFallback(yyv2642, false)
		}
	}
	yyj2639++
	if yyhl2639 {
		yyb2639 = yyj2639 > l
	} else {
		yyb2639 = r.CheckBreak()
	}
	if yyb2639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2644 := &x.Items
		yym2645 := z.DecBinary()
		_ = yym2645
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2644), d)
		}
	}
	for {
		yyj2639++
		if yyhl2639 {
			yyb2639 = yyj2639 > l
		} else {
			yyb2639 = r.CheckBreak()
		}
		if yyb2639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2646 := z.EncBinary()
		_ = yym2646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2647 := !z.EncBinary()
			yy2arr2647 := z.EncBasicHandle().StructToArray
			var yyq2647 [4]bool
			_, _, _ = yysep2647, yyq2647, yy2arr2647
			const yyr2647 bool = false
			yyq2647[0] = x.Kind != ""
			yyq2647[1] = x.APIVersion != ""
			yyq2647[2] = true
			var yynn2647 int
			if yyr2647 || yy2arr2647 {
				r.EncodeArrayStart(4)
			} else {
				yynn2647 = 1
				for _, b := range yyq2647 {
					if b {
						yynn2647++
					}
				}
				r.EncodeMapStart(yynn2647)
				yynn2647 = 0
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[0] {
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2647[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[1] {
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2647[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2647[2] {
					yy2655 := &x.ListMeta
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2655) {
					} else {
						z.EncFallback(yy2655)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2647[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2657 := &x.ListMeta
					yym2658 := z.EncBinary()
					_ = yym2658
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2657) {
					} else {
						z.EncFallback(yy2657)
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2660 := z.EncBinary()
					_ = yym2660
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2647 || yy2arr2647 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2662 := z.DecBinary()
	_ = yym2662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2663 := r.ContainerType()
		if yyct2663 == codecSelferValueTypeMap1234 {
			yyl2663 := r.ReadMapStart()
			if yyl2663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2663, d)
			}
		} else if yyct2663 == codecSelferValueTypeArray1234 {
			yyl2663 := r.ReadArrayStart()
			if yyl2663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2664Slc
	var yyhl2664 bool = l >= 0
	for yyj2664 := 0; ; yyj2664++ {
		if yyhl2664 {
			if yyj2664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2664Slc = r.DecodeBytes(yys2664Slc, true, true)
		yys2664 := string(yys2664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2664 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2667 := &x.ListMeta
				yym2668 := z.DecBinary()
				_ = yym2668
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2667) {
				} else {
					z.DecFallback(yyv2667, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2669 := &x.Items
				yym2670 := z.DecBinary()
				_ = yym2670
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2669), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2664)
		} // end switch yys2664
	} // end for yyj2664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2671 int
	var yyb2671 bool
	var yyhl2671 bool = l >= 0
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2674 := &x.ListMeta
		yym2675 := z.DecBinary()
		_ = yym2675
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2674) {
		} else {
			z.DecFallback(yyv2674, false)
		}
	}
	yyj2671++
	if yyhl2671 {
		yyb2671 = yyj2671 > l
	} else {
		yyb2671 = r.CheckBreak()
	}
	if yyb2671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2676 := &x.Items
		yym2677 := z.DecBinary()
		_ = yym2677
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2676), d)
		}
	}
	for {
		yyj2671++
		if yyhl2671 {
			yyb2671 = yyj2671 > l
		} else {
			yyb2671 = r.CheckBreak()
		}
		if yyb2671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2678 := z.EncBinary()
	_ = yym2678
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2679 := z.DecBinary()
	_ = yym2679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2680 := z.EncBinary()
	_ = yym2680
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2681 := z.DecBinary()
	_ = yym2681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2682 := z.EncBinary()
		_ = yym2682
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2683 := !z.EncBinary()
			yy2arr2683 := z.EncBasicHandle().StructToArray
			var yyq2683 [1]bool
			_, _, _ = yysep2683, yyq2683, yy2arr2683
			const yyr2683 bool = false
			yyq2683[0] = true
			var yynn2683 int
			if yyr2683 || yy2arr2683 {
				r.EncodeArrayStart(1)
			} else {
				yynn2683 = 0
				for _, b := range yyq2683 {
					if b {
						yynn2683++
					}
				}
				r.EncodeMapStart(yynn2683)
				yynn2683 = 0
			}
			if yyr2683 || yy2arr2683 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2683[0] {
					yy2685 := &x.LoadBalancer
					yy2685.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2683[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2686 := &x.LoadBalancer
					yy2686.CodecEncodeSelf(e)
				}
			}
			if yyr2683 || yy2arr2683 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2687 := z.DecBinary()
	_ = yym2687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2688 := r.ContainerType()
		if yyct2688 == codecSelferValueTypeMap1234 {
			yyl2688 := r.ReadMapStart()
			if yyl2688 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2688, d)
			}
		} else if yyct2688 == codecSelferValueTypeArray1234 {
			yyl2688 := r.ReadArrayStart()
			if yyl2688 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2688, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2689Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2689Slc
	var yyhl2689 bool = l >= 0
	for yyj2689 := 0; ; yyj2689++ {
		if yyhl2689 {
			if yyj2689 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2689Slc = r.DecodeBytes(yys2689Slc, true, true)
		yys2689 := string(yys2689Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2689 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2690 := &x.LoadBalancer
				yyv2690.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2689)
		} // end switch yys2689
	} // end for yyj2689
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2691 int
	var yyb2691 bool
	var yyhl2691 bool = l >= 0
	yyj2691++
	if yyhl2691 {
		yyb2691 = yyj2691 > l
	} else {
		yyb2691 = r.CheckBreak()
	}
	if yyb2691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2692 := &x.LoadBalancer
		yyv2692.CodecDecodeSelf(d)
	}
	for {
		yyj2691++
		if yyhl2691 {
			yyb2691 = yyj2691 > l
		} else {
			yyb2691 = r.CheckBreak()
		}
		if yyb2691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2693 := z.EncBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2694 := !z.EncBinary()
			yy2arr2694 := z.EncBasicHandle().StructToArray
			var yyq2694 [1]bool
			_, _, _ = yysep2694, yyq2694, yy2arr2694
			const yyr2694 bool = false
			yyq2694[0] = len(x.Ingress) != 0
			var yynn2694 int
			if yyr2694 || yy2arr2694 {
				r.EncodeArrayStart(1)
			} else {
				yynn2694 = 0
				for _, b := range yyq2694 {
					if b {
						yynn2694++
					}
				}
				r.EncodeMapStart(yynn2694)
				yynn2694 = 0
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2696 := z.EncBinary()
						_ = yym2696
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2694[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2697 := z.EncBinary()
						_ = yym2697
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2698 := z.DecBinary()
	_ = yym2698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2699 := r.ContainerType()
		if yyct2699 == codecSelferValueTypeMap1234 {
			yyl2699 := r.ReadMapStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2699, d)
			}
		} else if yyct2699 == codecSelferValueTypeArray1234 {
			yyl2699 := r.ReadArrayStart()
			if yyl2699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2700Slc
	var yyhl2700 bool = l >= 0
	for yyj2700 := 0; ; yyj2700++ {
		if yyhl2700 {
			if yyj2700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2700Slc = r.DecodeBytes(yys2700Slc, true, true)
		yys2700 := string(yys2700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2700 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2701 := &x.Ingress
				yym2702 := z.DecBinary()
				_ = yym2702
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2701), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2700)
		} // end switch yys2700
	} // end for yyj2700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2703 int
	var yyb2703 bool
	var yyhl2703 bool = l >= 0
	yyj2703++
	if yyhl2703 {
		yyb2703 = yyj2703 > l
	} else {
		yyb2703 = r.CheckBreak()
	}
	if yyb2703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2704 := &x.Ingress
		yym2705 := z.DecBinary()
		_ = yym2705
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2704), d)
		}
	}
	for {
		yyj2703++
		if yyhl2703 {
			yyb2703 = yyj2703 > l
		} else {
			yyb2703 = r.CheckBreak()
		}
		if yyb2703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2706 := z.EncBinary()
		_ = yym2706
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2707 := !z.EncBinary()
			yy2arr2707 := z.EncBasicHandle().StructToArray
			var yyq2707 [2]bool
			_, _, _ = yysep2707, yyq2707, yy2arr2707
			const yyr2707 bool = false
			yyq2707[0] = x.IP != ""
			yyq2707[1] = x.Hostname != ""
			var yynn2707 int
			if yyr2707 || yy2arr2707 {
				r.EncodeArrayStart(2)
			} else {
				yynn2707 = 0
				for _, b := range yyq2707 {
					if b {
						yynn2707++
					}
				}
				r.EncodeMapStart(yynn2707)
				yynn2707 = 0
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[0] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2707[1] {
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2707[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2713 := z.EncBinary()
					_ = yym2713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2707 || yy2arr2707 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2714 := z.DecBinary()
	_ = yym2714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2715 := r.ContainerType()
		if yyct2715 == codecSelferValueTypeMap1234 {
			yyl2715 := r.ReadMapStart()
			if yyl2715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2715, d)
			}
		} else if yyct2715 == codecSelferValueTypeArray1234 {
			yyl2715 := r.ReadArrayStart()
			if yyl2715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2716Slc
	var yyhl2716 bool = l >= 0
	for yyj2716 := 0; ; yyj2716++ {
		if yyhl2716 {
			if yyj2716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2716Slc = r.DecodeBytes(yys2716Slc, true, true)
		yys2716 := string(yys2716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2716 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2716)
		} // end switch yys2716
	} // end for yyj2716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2719 int
	var yyb2719 bool
	var yyhl2719 bool = l >= 0
	yyj2719++
	if yyhl2719 {
		yyb2719 = yyj2719 > l
	} else {
		yyb2719 = r.CheckBreak()
	}
	if yyb2719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2719++
	if yyhl2719 {
		yyb2719 = yyj2719 > l
	} else {
		yyb2719 = r.CheckBreak()
	}
	if yyb2719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2719++
		if yyhl2719 {
			yyb2719 = yyj2719 > l
		} else {
			yyb2719 = r.CheckBreak()
		}
		if yyb2719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2722 := z.EncBinary()
		_ = yym2722
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2723 := !z.EncBinary()
			yy2arr2723 := z.EncBasicHandle().StructToArray
			var yyq2723 [9]bool
			_, _, _ = yysep2723, yyq2723, yy2arr2723
			const yyr2723 bool = false
			yyq2723[0] = x.Type != ""
			yyq2723[3] = x.ClusterIP != ""
			yyq2723[5] = len(x.ExternalIPs) != 0
			yyq2723[6] = x.LoadBalancerIP != ""
			yyq2723[7] = x.SessionAffinity != ""
			yyq2723[8] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2723 int
			if yyr2723 || yy2arr2723 {
				r.EncodeArrayStart(9)
			} else {
				yynn2723 = 3
				for _, b := range yyq2723 {
					if b {
						yynn2723++
					}
				}
				r.EncodeMapStart(yynn2723)
				yynn2723 = 0
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[3] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2735 := z.EncBinary()
				_ = yym2735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ExternalName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2736 := z.EncBinary()
				_ = yym2736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ExternalName))
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[5] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2738 := z.EncBinary()
						_ = yym2738
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2723[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2739 := z.EncBinary()
						_ = yym2739
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[6] {
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2742 := z.EncBinary()
					_ = yym2742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[7] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2723[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2723[8] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2745 := z.EncBinary()
						_ = yym2745
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2723[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2746 := z.EncBinary()
						_ = yym2746
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2723 || yy2arr2723 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2747 := z.DecBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2748 := r.ContainerType()
		if yyct2748 == codecSelferValueTypeMap1234 {
			yyl2748 := r.ReadMapStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2748, d)
			}
		} else if yyct2748 == codecSelferValueTypeArray1234 {
			yyl2748 := r.ReadArrayStart()
			if yyl2748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2749Slc
	var yyhl2749 bool = l >= 0
	for yyj2749 := 0; ; yyj2749++ {
		if yyhl2749 {
			if yyj2749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2749Slc = r.DecodeBytes(yys2749Slc, true, true)
		yys2749 := string(yys2749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2749 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2751 := &x.Ports
				yym2752 := z.DecBinary()
				_ = yym2752
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2751), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2753 := &x.Selector
				yym2754 := z.DecBinary()
				_ = yym2754
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2753, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "ExternalName":
			if r.TryDecodeAsNil() {
				x.ExternalName = ""
			} else {
				x.ExternalName = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2757 := &x.ExternalIPs
				yym2758 := z.DecBinary()
				_ = yym2758
				if false {
				} else {
					z.F.DecSliceStringX(yyv2757, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2761 := &x.LoadBalancerSourceRanges
				yym2762 := z.DecBinary()
				_ = yym2762
				if false {
				} else {
					z.F.DecSliceStringX(yyv2761, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2749)
		} // end switch yys2749
	} // end for yyj2749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2763 int
	var yyb2763 bool
	var yyhl2763 bool = l >= 0
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2765 := &x.Ports
		yym2766 := z.DecBinary()
		_ = yym2766
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2765), d)
		}
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2767 := &x.Selector
		yym2768 := z.DecBinary()
		_ = yym2768
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2767, false, d)
		}
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalName = ""
	} else {
		x.ExternalName = string(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2771 := &x.ExternalIPs
		yym2772 := z.DecBinary()
		_ = yym2772
		if false {
		} else {
			z.F.DecSliceStringX(yyv2771, false, d)
		}
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2763++
	if yyhl2763 {
		yyb2763 = yyj2763 > l
	} else {
		yyb2763 = r.CheckBreak()
	}
	if yyb2763 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2775 := &x.LoadBalancerSourceRanges
		yym2776 := z.DecBinary()
		_ = yym2776
		if false {
		} else {
			z.F.DecSliceStringX(yyv2775, false, d)
		}
	}
	for {
		yyj2763++
		if yyhl2763 {
			yyb2763 = yyj2763 > l
		} else {
			yyb2763 = r.CheckBreak()
		}
		if yyb2763 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2763-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2777 := z.EncBinary()
		_ = yym2777
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2778 := !z.EncBinary()
			yy2arr2778 := z.EncBasicHandle().StructToArray
			var yyq2778 [5]bool
			_, _, _ = yysep2778, yyq2778, yy2arr2778
			const yyr2778 bool = false
			var yynn2778 int
			if yyr2778 || yy2arr2778 {
				r.EncodeArrayStart(5)
			} else {
				yynn2778 = 5
				for _, b := range yyq2778 {
					if b {
						yynn2778++
					}
				}
				r.EncodeMapStart(yynn2778)
				yynn2778 = 0
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2780 := z.EncBinary()
				_ = yym2780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2781 := z.EncBinary()
				_ = yym2781
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2784 := z.EncBinary()
				_ = yym2784
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2785 := z.EncBinary()
				_ = yym2785
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2787 := &x.TargetPort
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2787) {
				} else if !yym2788 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2787)
				} else {
					z.EncFallback(yy2787)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2789 := &x.TargetPort
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2789) {
				} else if !yym2790 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2789)
				} else {
					z.EncFallback(yy2789)
				}
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2792 := z.EncBinary()
				_ = yym2792
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2793 := z.EncBinary()
				_ = yym2793
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2778 || yy2arr2778 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2794 := z.DecBinary()
	_ = yym2794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2795 := r.ContainerType()
		if yyct2795 == codecSelferValueTypeMap1234 {
			yyl2795 := r.ReadMapStart()
			if yyl2795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2795, d)
			}
		} else if yyct2795 == codecSelferValueTypeArray1234 {
			yyl2795 := r.ReadArrayStart()
			if yyl2795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2796Slc
	var yyhl2796 bool = l >= 0
	for yyj2796 := 0; ; yyj2796++ {
		if yyhl2796 {
			if yyj2796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2796Slc = r.DecodeBytes(yys2796Slc, true, true)
		yys2796 := string(yys2796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2796 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2800 := &x.TargetPort
				yym2801 := z.DecBinary()
				_ = yym2801
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2800) {
				} else if !yym2801 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2800)
				} else {
					z.DecFallback(yyv2800, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2796)
		} // end switch yys2796
	} // end for yyj2796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2803 int
	var yyb2803 bool
	var yyhl2803 bool = l >= 0
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2807 := &x.TargetPort
		yym2808 := z.DecBinary()
		_ = yym2808
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2807) {
		} else if !yym2808 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2807)
		} else {
			z.DecFallback(yyv2807, false)
		}
	}
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2803++
		if yyhl2803 {
			yyb2803 = yyj2803 > l
		} else {
			yyb2803 = r.CheckBreak()
		}
		if yyb2803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2810 := z.EncBinary()
		_ = yym2810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2811 := !z.EncBinary()
			yy2arr2811 := z.EncBasicHandle().StructToArray
			var yyq2811 [5]bool
			_, _, _ = yysep2811, yyq2811, yy2arr2811
			const yyr2811 bool = false
			yyq2811[0] = x.Kind != ""
			yyq2811[1] = x.APIVersion != ""
			yyq2811[2] = true
			yyq2811[3] = true
			yyq2811[4] = true
			var yynn2811 int
			if yyr2811 || yy2arr2811 {
				r.EncodeArrayStart(5)
			} else {
				yynn2811 = 0
				for _, b := range yyq2811 {
					if b {
						yynn2811++
					}
				}
				r.EncodeMapStart(yynn2811)
				yynn2811 = 0
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[0] {
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2811[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[1] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[2] {
					yy2819 := &x.ObjectMeta
					yy2819.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2820 := &x.ObjectMeta
					yy2820.CodecEncodeSelf(e)
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[3] {
					yy2822 := &x.Spec
					yy2822.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2811[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2823 := &x.Spec
					yy2823.CodecEncodeSelf(e)
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2811[4] {
					yy2825 := &x.Status
					yy2825.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2811[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2826 := &x.Status
					yy2826.CodecEncodeSelf(e)
				}
			}
			if yyr2811 || yy2arr2811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2827 := z.DecBinary()
	_ = yym2827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2828 := r.ContainerType()
		if yyct2828 == codecSelferValueTypeMap1234 {
			yyl2828 := r.ReadMapStart()
			if yyl2828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2828, d)
			}
		} else if yyct2828 == codecSelferValueTypeArray1234 {
			yyl2828 := r.ReadArrayStart()
			if yyl2828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2829Slc
	var yyhl2829 bool = l >= 0
	for yyj2829 := 0; ; yyj2829++ {
		if yyhl2829 {
			if yyj2829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2829Slc = r.DecodeBytes(yys2829Slc, true, true)
		yys2829 := string(yys2829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2829 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2832 := &x.ObjectMeta
				yyv2832.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2833 := &x.Spec
				yyv2833.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2834 := &x.Status
				yyv2834.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2829)
		} // end switch yys2829
	} // end for yyj2829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2835 int
	var yyb2835 bool
	var yyhl2835 bool = l >= 0
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2838 := &x.ObjectMeta
		yyv2838.CodecDecodeSelf(d)
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2839 := &x.Spec
		yyv2839.CodecDecodeSelf(d)
	}
	yyj2835++
	if yyhl2835 {
		yyb2835 = yyj2835 > l
	} else {
		yyb2835 = r.CheckBreak()
	}
	if yyb2835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2840 := &x.Status
		yyv2840.CodecDecodeSelf(d)
	}
	for {
		yyj2835++
		if yyhl2835 {
			yyb2835 = yyj2835 > l
		} else {
			yyb2835 = r.CheckBreak()
		}
		if yyb2835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2841 := z.EncBinary()
		_ = yym2841
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2842 := !z.EncBinary()
			yy2arr2842 := z.EncBasicHandle().StructToArray
			var yyq2842 [5]bool
			_, _, _ = yysep2842, yyq2842, yy2arr2842
			const yyr2842 bool = false
			yyq2842[0] = x.Kind != ""
			yyq2842[1] = x.APIVersion != ""
			yyq2842[2] = true
			yyq2842[4] = len(x.ImagePullSecrets) != 0
			var yynn2842 int
			if yyr2842 || yy2arr2842 {
				r.EncodeArrayStart(5)
			} else {
				yynn2842 = 1
				for _, b := range yyq2842 {
					if b {
						yynn2842++
					}
				}
				r.EncodeMapStart(yynn2842)
				yynn2842 = 0
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2842[0] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2842[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2842[1] {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2842[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2842[2] {
					yy2850 := &x.ObjectMeta
					yy2850.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2842[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2851 := &x.ObjectMeta
					yy2851.CodecEncodeSelf(e)
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2842[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2856 := z.EncBinary()
						_ = yym2856
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2842[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2857 := z.EncBinary()
						_ = yym2857
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2858 := z.DecBinary()
	_ = yym2858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2859 := r.ContainerType()
		if yyct2859 == codecSelferValueTypeMap1234 {
			yyl2859 := r.ReadMapStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2859, d)
			}
		} else if yyct2859 == codecSelferValueTypeArray1234 {
			yyl2859 := r.ReadArrayStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2860Slc
	var yyhl2860 bool = l >= 0
	for yyj2860 := 0; ; yyj2860++ {
		if yyhl2860 {
			if yyj2860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2860Slc = r.DecodeBytes(yys2860Slc, true, true)
		yys2860 := string(yys2860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2860 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2863 := &x.ObjectMeta
				yyv2863.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2864 := &x.Secrets
				yym2865 := z.DecBinary()
				_ = yym2865
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2864), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2866 := &x.ImagePullSecrets
				yym2867 := z.DecBinary()
				_ = yym2867
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2866), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2860)
		} // end switch yys2860
	} // end for yyj2860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2868 int
	var yyb2868 bool
	var yyhl2868 bool = l >= 0
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2871 := &x.ObjectMeta
		yyv2871.CodecDecodeSelf(d)
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2872 := &x.Secrets
		yym2873 := z.DecBinary()
		_ = yym2873
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2872), d)
		}
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2874 := &x.ImagePullSecrets
		yym2875 := z.DecBinary()
		_ = yym2875
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2874), d)
		}
	}
	for {
		yyj2868++
		if yyhl2868 {
			yyb2868 = yyj2868 > l
		} else {
			yyb2868 = r.CheckBreak()
		}
		if yyb2868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2876 := z.EncBinary()
		_ = yym2876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2877 := !z.EncBinary()
			yy2arr2877 := z.EncBasicHandle().StructToArray
			var yyq2877 [4]bool
			_, _, _ = yysep2877, yyq2877, yy2arr2877
			const yyr2877 bool = false
			yyq2877[0] = x.Kind != ""
			yyq2877[1] = x.APIVersion != ""
			yyq2877[2] = true
			var yynn2877 int
			if yyr2877 || yy2arr2877 {
				r.EncodeArrayStart(4)
			} else {
				yynn2877 = 1
				for _, b := range yyq2877 {
					if b {
						yynn2877++
					}
				}
				r.EncodeMapStart(yynn2877)
				yynn2877 = 0
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[0] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[1] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2877[2] {
					yy2885 := &x.ListMeta
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2885) {
					} else {
						z.EncFallback(yy2885)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2877[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2887 := &x.ListMeta
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2887) {
					} else {
						z.EncFallback(yy2887)
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2877 || yy2arr2877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2892 := z.DecBinary()
	_ = yym2892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2893 := r.ContainerType()
		if yyct2893 == codecSelferValueTypeMap1234 {
			yyl2893 := r.ReadMapStart()
			if yyl2893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2893, d)
			}
		} else if yyct2893 == codecSelferValueTypeArray1234 {
			yyl2893 := r.ReadArrayStart()
			if yyl2893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2894Slc
	var yyhl2894 bool = l >= 0
	for yyj2894 := 0; ; yyj2894++ {
		if yyhl2894 {
			if yyj2894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2894Slc = r.DecodeBytes(yys2894Slc, true, true)
		yys2894 := string(yys2894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2894 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2897 := &x.ListMeta
				yym2898 := z.DecBinary()
				_ = yym2898
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2897) {
				} else {
					z.DecFallback(yyv2897, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2899 := &x.Items
				yym2900 := z.DecBinary()
				_ = yym2900
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2899), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2894)
		} // end switch yys2894
	} // end for yyj2894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2901 int
	var yyb2901 bool
	var yyhl2901 bool = l >= 0
	yyj2901++
	if yyhl2901 {
		yyb2901 = yyj2901 > l
	} else {
		yyb2901 = r.CheckBreak()
	}
	if yyb2901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2901++
	if yyhl2901 {
		yyb2901 = yyj2901 > l
	} else {
		yyb2901 = r.CheckBreak()
	}
	if yyb2901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2901++
	if yyhl2901 {
		yyb2901 = yyj2901 > l
	} else {
		yyb2901 = r.CheckBreak()
	}
	if yyb2901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2904 := &x.ListMeta
		yym2905 := z.DecBinary()
		_ = yym2905
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2904) {
		} else {
			z.DecFallback(yyv2904, false)
		}
	}
	yyj2901++
	if yyhl2901 {
		yyb2901 = yyj2901 > l
	} else {
		yyb2901 = r.CheckBreak()
	}
	if yyb2901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2906 := &x.Items
		yym2907 := z.DecBinary()
		_ = yym2907
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2906), d)
		}
	}
	for {
		yyj2901++
		if yyhl2901 {
			yyb2901 = yyj2901 > l
		} else {
			yyb2901 = r.CheckBreak()
		}
		if yyb2901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2908 := z.EncBinary()
		_ = yym2908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2909 := !z.EncBinary()
			yy2arr2909 := z.EncBasicHandle().StructToArray
			var yyq2909 [4]bool
			_, _, _ = yysep2909, yyq2909, yy2arr2909
			const yyr2909 bool = false
			yyq2909[0] = x.Kind != ""
			yyq2909[1] = x.APIVersion != ""
			yyq2909[2] = true
			var yynn2909 int
			if yyr2909 || yy2arr2909 {
				r.EncodeArrayStart(4)
			} else {
				yynn2909 = 1
				for _, b := range yyq2909 {
					if b {
						yynn2909++
					}
				}
				r.EncodeMapStart(yynn2909)
				yynn2909 = 0
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2909[0] {
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2909[1] {
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2909[2] {
					yy2917 := &x.ObjectMeta
					yy2917.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2918 := &x.ObjectMeta
					yy2918.CodecEncodeSelf(e)
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2920 := z.EncBinary()
					_ = yym2920
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2909 || yy2arr2909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2922 := z.DecBinary()
	_ = yym2922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2923 := r.ContainerType()
		if yyct2923 == codecSelferValueTypeMap1234 {
			yyl2923 := r.ReadMapStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2923, d)
			}
		} else if yyct2923 == codecSelferValueTypeArray1234 {
			yyl2923 := r.ReadArrayStart()
			if yyl2923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2924Slc
	var yyhl2924 bool = l >= 0
	for yyj2924 := 0; ; yyj2924++ {
		if yyhl2924 {
			if yyj2924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2924Slc = r.DecodeBytes(yys2924Slc, true, true)
		yys2924 := string(yys2924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2924 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2927 := &x.ObjectMeta
				yyv2927.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2928 := &x.Subsets
				yym2929 := z.DecBinary()
				_ = yym2929
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2924)
		} // end switch yys2924
	} // end for yyj2924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2930 int
	var yyb2930 bool
	var yyhl2930 bool = l >= 0
	yyj2930++
	if yyhl2930 {
		yyb2930 = yyj2930 > l
	} else {
		yyb2930 = r.CheckBreak()
	}
	if yyb2930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2930++
	if yyhl2930 {
		yyb2930 = yyj2930 > l
	} else {
		yyb2930 = r.CheckBreak()
	}
	if yyb2930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2930++
	if yyhl2930 {
		yyb2930 = yyj2930 > l
	} else {
		yyb2930 = r.CheckBreak()
	}
	if yyb2930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2933 := &x.ObjectMeta
		yyv2933.CodecDecodeSelf(d)
	}
	yyj2930++
	if yyhl2930 {
		yyb2930 = yyj2930 > l
	} else {
		yyb2930 = r.CheckBreak()
	}
	if yyb2930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2934 := &x.Subsets
		yym2935 := z.DecBinary()
		_ = yym2935
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2934), d)
		}
	}
	for {
		yyj2930++
		if yyhl2930 {
			yyb2930 = yyj2930 > l
		} else {
			yyb2930 = r.CheckBreak()
		}
		if yyb2930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2936 := z.EncBinary()
		_ = yym2936
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2937 := !z.EncBinary()
			yy2arr2937 := z.EncBasicHandle().StructToArray
			var yyq2937 [3]bool
			_, _, _ = yysep2937, yyq2937, yy2arr2937
			const yyr2937 bool = false
			var yynn2937 int
			if yyr2937 || yy2arr2937 {
				r.EncodeArrayStart(3)
			} else {
				yynn2937 = 3
				for _, b := range yyq2937 {
					if b {
						yynn2937++
					}
				}
				r.EncodeMapStart(yynn2937)
				yynn2937 = 0
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2937 || yy2arr2937 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2947 := z.DecBinary()
	_ = yym2947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2948 := r.ContainerType()
		if yyct2948 == codecSelferValueTypeMap1234 {
			yyl2948 := r.ReadMapStart()
			if yyl2948 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2948, d)
			}
		} else if yyct2948 == codecSelferValueTypeArray1234 {
			yyl2948 := r.ReadArrayStart()
			if yyl2948 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2949Slc
	var yyhl2949 bool = l >= 0
	for yyj2949 := 0; ; yyj2949++ {
		if yyhl2949 {
			if yyj2949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2949Slc = r.DecodeBytes(yys2949Slc, true, true)
		yys2949 := string(yys2949Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2949 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2950 := &x.Addresses
				yym2951 := z.DecBinary()
				_ = yym2951
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2950), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2952 := &x.NotReadyAddresses
				yym2953 := z.DecBinary()
				_ = yym2953
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2952), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2954 := &x.Ports
				yym2955 := z.DecBinary()
				_ = yym2955
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2954), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2949)
		} // end switch yys2949
	} // end for yyj2949
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2956 int
	var yyb2956 bool
	var yyhl2956 bool = l >= 0
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2957 := &x.Addresses
		yym2958 := z.DecBinary()
		_ = yym2958
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2957), d)
		}
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2959 := &x.NotReadyAddresses
		yym2960 := z.DecBinary()
		_ = yym2960
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2959), d)
		}
	}
	yyj2956++
	if yyhl2956 {
		yyb2956 = yyj2956 > l
	} else {
		yyb2956 = r.CheckBreak()
	}
	if yyb2956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2961 := &x.Ports
		yym2962 := z.DecBinary()
		_ = yym2962
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2961), d)
		}
	}
	for {
		yyj2956++
		if yyhl2956 {
			yyb2956 = yyj2956 > l
		} else {
			yyb2956 = r.CheckBreak()
		}
		if yyb2956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2963 := z.EncBinary()
		_ = yym2963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2964 := !z.EncBinary()
			yy2arr2964 := z.EncBasicHandle().StructToArray
			var yyq2964 [4]bool
			_, _, _ = yysep2964, yyq2964, yy2arr2964
			const yyr2964 bool = false
			yyq2964[1] = x.Hostname != ""
			yyq2964[2] = x.NodeName != nil
			var yynn2964 int
			if yyr2964 || yy2arr2964 {
				r.EncodeArrayStart(4)
			} else {
				yynn2964 = 2
				for _, b := range yyq2964 {
					if b {
						yynn2964++
					}
				}
				r.EncodeMapStart(yynn2964)
				yynn2964 = 0
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2966 := z.EncBinary()
				_ = yym2966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2967 := z.EncBinary()
				_ = yym2967
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2964[1] {
					yym2969 := z.EncBinary()
					_ = yym2969
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2964[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2964[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2972 := *x.NodeName
						yym2973 := z.EncBinary()
						_ = yym2973
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2972))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2964[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2974 := *x.NodeName
						yym2975 := z.EncBinary()
						_ = yym2975
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2974))
						}
					}
				}
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2964 || yy2arr2964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2977 := z.DecBinary()
	_ = yym2977
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2978 := r.ContainerType()
		if yyct2978 == codecSelferValueTypeMap1234 {
			yyl2978 := r.ReadMapStart()
			if yyl2978 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2978, d)
			}
		} else if yyct2978 == codecSelferValueTypeArray1234 {
			yyl2978 := r.ReadArrayStart()
			if yyl2978 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2978, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2979Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2979Slc
	var yyhl2979 bool = l >= 0
	for yyj2979 := 0; ; yyj2979++ {
		if yyhl2979 {
			if yyj2979 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2979Slc = r.DecodeBytes(yys2979Slc, true, true)
		yys2979 := string(yys2979Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2979 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2983 := z.DecBinary()
				_ = yym2983
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2979)
		} // end switch yys2979
	} // end for yyj2979
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2985 int
	var yyb2985 bool
	var yyhl2985 bool = l >= 0
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2989 := z.DecBinary()
		_ = yym2989
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2985++
	if yyhl2985 {
		yyb2985 = yyj2985 > l
	} else {
		yyb2985 = r.CheckBreak()
	}
	if yyb2985 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2985++
		if yyhl2985 {
			yyb2985 = yyj2985 > l
		} else {
			yyb2985 = r.CheckBreak()
		}
		if yyb2985 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2985-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2991 := z.EncBinary()
		_ = yym2991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2992 := !z.EncBinary()
			yy2arr2992 := z.EncBasicHandle().StructToArray
			var yyq2992 [3]bool
			_, _, _ = yysep2992, yyq2992, yy2arr2992
			const yyr2992 bool = false
			var yynn2992 int
			if yyr2992 || yy2arr2992 {
				r.EncodeArrayStart(3)
			} else {
				yynn2992 = 3
				for _, b := range yyq2992 {
					if b {
						yynn2992++
					}
				}
				r.EncodeMapStart(yynn2992)
				yynn2992 = 0
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2994 := z.EncBinary()
				_ = yym2994
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2995 := z.EncBinary()
				_ = yym2995
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2998 := z.EncBinary()
				_ = yym2998
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2992 || yy2arr2992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3000 := z.DecBinary()
	_ = yym3000
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3001 := r.ContainerType()
		if yyct3001 == codecSelferValueTypeMap1234 {
			yyl3001 := r.ReadMapStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3001, d)
			}
		} else if yyct3001 == codecSelferValueTypeArray1234 {
			yyl3001 := r.ReadArrayStart()
			if yyl3001 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3001, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3002Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3002Slc
	var yyhl3002 bool = l >= 0
	for yyj3002 := 0; ; yyj3002++ {
		if yyhl3002 {
			if yyj3002 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3002Slc = r.DecodeBytes(yys3002Slc, true, true)
		yys3002 := string(yys3002Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3002 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3002)
		} // end switch yys3002
	} // end for yyj3002
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3006 int
	var yyb3006 bool
	var yyhl3006 bool = l >= 0
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj3006++
	if yyhl3006 {
		yyb3006 = yyj3006 > l
	} else {
		yyb3006 = r.CheckBreak()
	}
	if yyb3006 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj3006++
		if yyhl3006 {
			yyb3006 = yyj3006 > l
		} else {
			yyb3006 = r.CheckBreak()
		}
		if yyb3006 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3006-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3010 := z.EncBinary()
		_ = yym3010
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3011 := !z.EncBinary()
			yy2arr3011 := z.EncBasicHandle().StructToArray
			var yyq3011 [4]bool
			_, _, _ = yysep3011, yyq3011, yy2arr3011
			const yyr3011 bool = false
			yyq3011[0] = x.Kind != ""
			yyq3011[1] = x.APIVersion != ""
			yyq3011[2] = true
			var yynn3011 int
			if yyr3011 || yy2arr3011 {
				r.EncodeArrayStart(4)
			} else {
				yynn3011 = 1
				for _, b := range yyq3011 {
					if b {
						yynn3011++
					}
				}
				r.EncodeMapStart(yynn3011)
				yynn3011 = 0
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3011[0] {
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3011[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3011[1] {
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3011[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3011[2] {
					yy3019 := &x.ListMeta
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3019) {
					} else {
						z.EncFallback(yy3019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3011[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3021 := &x.ListMeta
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3021) {
					} else {
						z.EncFallback(yy3021)
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3024 := z.EncBinary()
					_ = yym3024
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3025 := z.EncBinary()
					_ = yym3025
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr3011 || yy2arr3011 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3026 := z.DecBinary()
	_ = yym3026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3027 := r.ContainerType()
		if yyct3027 == codecSelferValueTypeMap1234 {
			yyl3027 := r.ReadMapStart()
			if yyl3027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3027, d)
			}
		} else if yyct3027 == codecSelferValueTypeArray1234 {
			yyl3027 := r.ReadArrayStart()
			if yyl3027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3028Slc
	var yyhl3028 bool = l >= 0
	for yyj3028 := 0; ; yyj3028++ {
		if yyhl3028 {
			if yyj3028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3028Slc = r.DecodeBytes(yys3028Slc, true, true)
		yys3028 := string(yys3028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3028 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3031 := &x.ListMeta
				yym3032 := z.DecBinary()
				_ = yym3032
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3031) {
				} else {
					z.DecFallback(yyv3031, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3033 := &x.Items
				yym3034 := z.DecBinary()
				_ = yym3034
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv3033), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3028)
		} // end switch yys3028
	} // end for yyj3028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3035 int
	var yyb3035 bool
	var yyhl3035 bool = l >= 0
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3038 := &x.ListMeta
		yym3039 := z.DecBinary()
		_ = yym3039
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3038) {
		} else {
			z.DecFallback(yyv3038, false)
		}
	}
	yyj3035++
	if yyhl3035 {
		yyb3035 = yyj3035 > l
	} else {
		yyb3035 = r.CheckBreak()
	}
	if yyb3035 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3040 := &x.Items
		yym3041 := z.DecBinary()
		_ = yym3041
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv3040), d)
		}
	}
	for {
		yyj3035++
		if yyhl3035 {
			yyb3035 = yyj3035 > l
		} else {
			yyb3035 = r.CheckBreak()
		}
		if yyb3035 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3035-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3042 := z.EncBinary()
		_ = yym3042
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3043 := !z.EncBinary()
			yy2arr3043 := z.EncBasicHandle().StructToArray
			var yyq3043 [4]bool
			_, _, _ = yysep3043, yyq3043, yy2arr3043
			const yyr3043 bool = false
			yyq3043[0] = x.PodCIDR != ""
			yyq3043[1] = x.ExternalID != ""
			yyq3043[2] = x.ProviderID != ""
			yyq3043[3] = x.Unschedulable != false
			var yynn3043 int
			if yyr3043 || yy2arr3043 {
				r.EncodeArrayStart(4)
			} else {
				yynn3043 = 0
				for _, b := range yyq3043 {
					if b {
						yynn3043++
					}
				}
				r.EncodeMapStart(yynn3043)
				yynn3043 = 0
			}
			if yyr3043 || yy2arr3043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3043[0] {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3043[1] {
					yym3048 := z.EncBinary()
					_ = yym3048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3049 := z.EncBinary()
					_ = yym3049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3043[2] {
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3043[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3052 := z.EncBinary()
					_ = yym3052
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3043[3] {
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3043[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3055 := z.EncBinary()
					_ = yym3055
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr3043 || yy2arr3043 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3056 := z.DecBinary()
	_ = yym3056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3057 := r.ContainerType()
		if yyct3057 == codecSelferValueTypeMap1234 {
			yyl3057 := r.ReadMapStart()
			if yyl3057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3057, d)
			}
		} else if yyct3057 == codecSelferValueTypeArray1234 {
			yyl3057 := r.ReadArrayStart()
			if yyl3057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3058Slc
	var yyhl3058 bool = l >= 0
	for yyj3058 := 0; ; yyj3058++ {
		if yyhl3058 {
			if yyj3058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3058Slc = r.DecodeBytes(yys3058Slc, true, true)
		yys3058 := string(yys3058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3058 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3058)
		} // end switch yys3058
	} // end for yyj3058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3063 int
	var yyb3063 bool
	var yyhl3063 bool = l >= 0
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj3063++
		if yyhl3063 {
			yyb3063 = yyj3063 > l
		} else {
			yyb3063 = r.CheckBreak()
		}
		if yyb3063 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3063-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3068 := z.EncBinary()
		_ = yym3068
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3069 := !z.EncBinary()
			yy2arr3069 := z.EncBasicHandle().StructToArray
			var yyq3069 [1]bool
			_, _, _ = yysep3069, yyq3069, yy2arr3069
			const yyr3069 bool = false
			var yynn3069 int
			if yyr3069 || yy2arr3069 {
				r.EncodeArrayStart(1)
			} else {
				yynn3069 = 1
				for _, b := range yyq3069 {
					if b {
						yynn3069++
					}
				}
				r.EncodeMapStart(yynn3069)
				yynn3069 = 0
			}
			if yyr3069 || yy2arr3069 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3071 := z.EncBinary()
				_ = yym3071
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3072 := z.EncBinary()
				_ = yym3072
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr3069 || yy2arr3069 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3073 := z.DecBinary()
	_ = yym3073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3074 := r.ContainerType()
		if yyct3074 == codecSelferValueTypeMap1234 {
			yyl3074 := r.ReadMapStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3074, d)
			}
		} else if yyct3074 == codecSelferValueTypeArray1234 {
			yyl3074 := r.ReadArrayStart()
			if yyl3074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3075Slc
	var yyhl3075 bool = l >= 0
	for yyj3075 := 0; ; yyj3075++ {
		if yyhl3075 {
			if yyj3075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3075Slc = r.DecodeBytes(yys3075Slc, true, true)
		yys3075 := string(yys3075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3075 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3075)
		} // end switch yys3075
	} // end for yyj3075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3079 := z.EncBinary()
		_ = yym3079
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3080 := !z.EncBinary()
			yy2arr3080 := z.EncBasicHandle().StructToArray
			var yyq3080 [1]bool
			_, _, _ = yysep3080, yyq3080, yy2arr3080
			const yyr3080 bool = false
			yyq3080[0] = true
			var yynn3080 int
			if yyr3080 || yy2arr3080 {
				r.EncodeArrayStart(1)
			} else {
				yynn3080 = 0
				for _, b := range yyq3080 {
					if b {
						yynn3080++
					}
				}
				r.EncodeMapStart(yynn3080)
				yynn3080 = 0
			}
			if yyr3080 || yy2arr3080 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3080[0] {
					yy3082 := &x.KubeletEndpoint
					yy3082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3080[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3083 := &x.KubeletEndpoint
					yy3083.CodecEncodeSelf(e)
				}
			}
			if yyr3080 || yy2arr3080 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3084 := z.DecBinary()
	_ = yym3084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3085 := r.ContainerType()
		if yyct3085 == codecSelferValueTypeMap1234 {
			yyl3085 := r.ReadMapStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3085, d)
			}
		} else if yyct3085 == codecSelferValueTypeArray1234 {
			yyl3085 := r.ReadArrayStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3086Slc
	var yyhl3086 bool = l >= 0
	for yyj3086 := 0; ; yyj3086++ {
		if yyhl3086 {
			if yyj3086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3086Slc = r.DecodeBytes(yys3086Slc, true, true)
		yys3086 := string(yys3086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3086 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv3087 := &x.KubeletEndpoint
				yyv3087.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3086)
		} // end switch yys3086
	} // end for yyj3086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3088 int
	var yyb3088 bool
	var yyhl3088 bool = l >= 0
	yyj3088++
	if yyhl3088 {
		yyb3088 = yyj3088 > l
	} else {
		yyb3088 = r.CheckBreak()
	}
	if yyb3088 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv3089 := &x.KubeletEndpoint
		yyv3089.CodecDecodeSelf(d)
	}
	for {
		yyj3088++
		if yyhl3088 {
			yyb3088 = yyj3088 > l
		} else {
			yyb3088 = r.CheckBreak()
		}
		if yyb3088 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3088-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3090 := z.EncBinary()
		_ = yym3090
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3091 := !z.EncBinary()
			yy2arr3091 := z.EncBasicHandle().StructToArray
			var yyq3091 [10]bool
			_, _, _ = yysep3091, yyq3091, yy2arr3091
			const yyr3091 bool = false
			var yynn3091 int
			if yyr3091 || yy2arr3091 {
				r.EncodeArrayStart(10)
			} else {
				yynn3091 = 10
				for _, b := range yyq3091 {
					if b {
						yynn3091++
					}
				}
				r.EncodeMapStart(yynn3091)
				yynn3091 = 0
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3093 := z.EncBinary()
				_ = yym3093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3094 := z.EncBinary()
				_ = yym3094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3096 := z.EncBinary()
				_ = yym3096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3097 := z.EncBinary()
				_ = yym3097
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3099 := z.EncBinary()
				_ = yym3099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3100 := z.EncBinary()
				_ = yym3100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3102 := z.EncBinary()
				_ = yym3102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3103 := z.EncBinary()
				_ = yym3103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3105 := z.EncBinary()
				_ = yym3105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3106 := z.EncBinary()
				_ = yym3106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3108 := z.EncBinary()
				_ = yym3108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3109 := z.EncBinary()
				_ = yym3109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3111 := z.EncBinary()
				_ = yym3111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3112 := z.EncBinary()
				_ = yym3112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3114 := z.EncBinary()
				_ = yym3114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3115 := z.EncBinary()
				_ = yym3115
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3117 := z.EncBinary()
				_ = yym3117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3118 := z.EncBinary()
				_ = yym3118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3120 := z.EncBinary()
				_ = yym3120
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3121 := z.EncBinary()
				_ = yym3121
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr3091 || yy2arr3091 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3123 := r.ContainerType()
		if yyct3123 == codecSelferValueTypeMap1234 {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if yyct3123 == codecSelferValueTypeArray1234 {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3124 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3135 int
	var yyb3135 bool
	var yyhl3135 bool = l >= 0
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj3135++
	if yyhl3135 {
		yyb3135 = yyj3135 > l
	} else {
		yyb3135 = r.CheckBreak()
	}
	if yyb3135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj3135++
		if yyhl3135 {
			yyb3135 = yyj3135 > l
		} else {
			yyb3135 = r.CheckBreak()
		}
		if yyb3135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3146 := z.EncBinary()
		_ = yym3146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3147 := !z.EncBinary()
			yy2arr3147 := z.EncBasicHandle().StructToArray
			var yyq3147 [10]bool
			_, _, _ = yysep3147, yyq3147, yy2arr3147
			const yyr3147 bool = false
			yyq3147[0] = len(x.Capacity) != 0
			yyq3147[1] = len(x.Allocatable) != 0
			yyq3147[2] = x.Phase != ""
			yyq3147[3] = len(x.Conditions) != 0
			yyq3147[4] = len(x.Addresses) != 0
			yyq3147[5] = true
			yyq3147[6] = true
			yyq3147[7] = len(x.Images) != 0
			yyq3147[8] = len(x.VolumesInUse) != 0
			yyq3147[9] = len(x.VolumesAttached) != 0
			var yynn3147 int
			if yyr3147 || yy2arr3147 {
				r.EncodeArrayStart(10)
			} else {
				yynn3147 = 0
				for _, b := range yyq3147 {
					if b {
						yynn3147++
					}
				}
				r.EncodeMapStart(yynn3147)
				yynn3147 = 0
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3152 := z.EncBinary()
						_ = yym3152
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3153 := z.EncBinary()
						_ = yym3153
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3155 := z.EncBinary()
						_ = yym3155
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym3156 := z.EncBinary()
						_ = yym3156
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[5] {
					yy3158 := &x.DaemonEndpoints
					yy3158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3159 := &x.DaemonEndpoints
					yy3159.CodecEncodeSelf(e)
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[6] {
					yy3161 := &x.NodeInfo
					yy3161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3162 := &x.NodeInfo
					yy3162.CodecEncodeSelf(e)
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3164 := z.EncBinary()
						_ = yym3164
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym3165 := z.EncBinary()
						_ = yym3165
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3167 := z.EncBinary()
						_ = yym3167
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym3168 := z.EncBinary()
						_ = yym3168
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3147[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3170 := z.EncBinary()
						_ = yym3170
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3147[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym3171 := z.EncBinary()
						_ = yym3171
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr3147 || yy2arr3147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3172 := z.DecBinary()
	_ = yym3172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3173 := r.ContainerType()
		if yyct3173 == codecSelferValueTypeMap1234 {
			yyl3173 := r.ReadMapStart()
			if yyl3173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3173, d)
			}
		} else if yyct3173 == codecSelferValueTypeArray1234 {
			yyl3173 := r.ReadArrayStart()
			if yyl3173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3174Slc
	var yyhl3174 bool = l >= 0
	for yyj3174 := 0; ; yyj3174++ {
		if yyhl3174 {
			if yyj3174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3174Slc = r.DecodeBytes(yys3174Slc, true, true)
		yys3174 := string(yys3174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3174 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3175 := &x.Capacity
				yyv3175.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv3176 := &x.Allocatable
				yyv3176.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3178 := &x.Conditions
				yym3179 := z.DecBinary()
				_ = yym3179
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv3178), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv3180 := &x.Addresses
				yym3181 := z.DecBinary()
				_ = yym3181
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv3180), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv3182 := &x.DaemonEndpoints
				yyv3182.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv3183 := &x.NodeInfo
				yyv3183.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv3184 := &x.Images
				yym3185 := z.DecBinary()
				_ = yym3185
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv3184), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv3186 := &x.VolumesInUse
				yym3187 := z.DecBinary()
				_ = yym3187
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3186), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv3188 := &x.VolumesAttached
				yym3189 := z.DecBinary()
				_ = yym3189
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3188), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3174)
		} // end switch yys3174
	} // end for yyj3174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3190 int
	var yyb3190 bool
	var yyhl3190 bool = l >= 0
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3191 := &x.Capacity
		yyv3191.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv3192 := &x.Allocatable
		yyv3192.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3194 := &x.Conditions
		yym3195 := z.DecBinary()
		_ = yym3195
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv3194), d)
		}
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv3196 := &x.Addresses
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv3196), d)
		}
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv3198 := &x.DaemonEndpoints
		yyv3198.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv3199 := &x.NodeInfo
		yyv3199.CodecDecodeSelf(d)
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv3200 := &x.Images
		yym3201 := z.DecBinary()
		_ = yym3201
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv3200), d)
		}
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv3202 := &x.VolumesInUse
		yym3203 := z.DecBinary()
		_ = yym3203
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv3202), d)
		}
	}
	yyj3190++
	if yyhl3190 {
		yyb3190 = yyj3190 > l
	} else {
		yyb3190 = r.CheckBreak()
	}
	if yyb3190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv3204 := &x.VolumesAttached
		yym3205 := z.DecBinary()
		_ = yym3205
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv3204), d)
		}
	}
	for {
		yyj3190++
		if yyhl3190 {
			yyb3190 = yyj3190 > l
		} else {
			yyb3190 = r.CheckBreak()
		}
		if yyb3190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3206 := z.EncBinary()
	_ = yym3206
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3207 := z.DecBinary()
	_ = yym3207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3208 := z.EncBinary()
		_ = yym3208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3209 := !z.EncBinary()
			yy2arr3209 := z.EncBasicHandle().StructToArray
			var yyq3209 [2]bool
			_, _, _ = yysep3209, yyq3209, yy2arr3209
			const yyr3209 bool = false
			var yynn3209 int
			if yyr3209 || yy2arr3209 {
				r.EncodeArrayStart(2)
			} else {
				yynn3209 = 2
				for _, b := range yyq3209 {
					if b {
						yynn3209++
					}
				}
				r.EncodeMapStart(yynn3209)
				yynn3209 = 0
			}
			if yyr3209 || yy2arr3209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr3209 || yy2arr3209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3212 := z.EncBinary()
				_ = yym3212
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3213 := z.EncBinary()
				_ = yym3213
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr3209 || yy2arr3209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3214 := z.DecBinary()
	_ = yym3214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3215 := r.ContainerType()
		if yyct3215 == codecSelferValueTypeMap1234 {
			yyl3215 := r.ReadMapStart()
			if yyl3215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3215, d)
			}
		} else if yyct3215 == codecSelferValueTypeArray1234 {
			yyl3215 := r.ReadArrayStart()
			if yyl3215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3216Slc
	var yyhl3216 bool = l >= 0
	for yyj3216 := 0; ; yyj3216++ {
		if yyhl3216 {
			if yyj3216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3216Slc = r.DecodeBytes(yys3216Slc, true, true)
		yys3216 := string(yys3216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3216 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3216)
		} // end switch yys3216
	} // end for yyj3216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3219 int
	var yyb3219 bool
	var yyhl3219 bool = l >= 0
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3219++
	if yyhl3219 {
		yyb3219 = yyj3219 > l
	} else {
		yyb3219 = r.CheckBreak()
	}
	if yyb3219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3219++
		if yyhl3219 {
			yyb3219 = yyj3219 > l
		} else {
			yyb3219 = r.CheckBreak()
		}
		if yyb3219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3222 := z.EncBinary()
		_ = yym3222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3223 := !z.EncBinary()
			yy2arr3223 := z.EncBasicHandle().StructToArray
			var yyq3223 [1]bool
			_, _, _ = yysep3223, yyq3223, yy2arr3223
			const yyr3223 bool = false
			yyq3223[0] = len(x.PreferAvoidPods) != 0
			var yynn3223 int
			if yyr3223 || yy2arr3223 {
				r.EncodeArrayStart(1)
			} else {
				yynn3223 = 0
				for _, b := range yyq3223 {
					if b {
						yynn3223++
					}
				}
				r.EncodeMapStart(yynn3223)
				yynn3223 = 0
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3223[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3225 := z.EncBinary()
						_ = yym3225
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3226 := z.EncBinary()
						_ = yym3226
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3223 || yy2arr3223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3227 := z.DecBinary()
	_ = yym3227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3228 := r.ContainerType()
		if yyct3228 == codecSelferValueTypeMap1234 {
			yyl3228 := r.ReadMapStart()
			if yyl3228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3228, d)
			}
		} else if yyct3228 == codecSelferValueTypeArray1234 {
			yyl3228 := r.ReadArrayStart()
			if yyl3228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3229Slc
	var yyhl3229 bool = l >= 0
	for yyj3229 := 0; ; yyj3229++ {
		if yyhl3229 {
			if yyj3229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3229Slc = r.DecodeBytes(yys3229Slc, true, true)
		yys3229 := string(yys3229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3229 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3230 := &x.PreferAvoidPods
				yym3231 := z.DecBinary()
				_ = yym3231
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3230), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3229)
		} // end switch yys3229
	} // end for yyj3229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3232 int
	var yyb3232 bool
	var yyhl3232 bool = l >= 0
	yyj3232++
	if yyhl3232 {
		yyb3232 = yyj3232 > l
	} else {
		yyb3232 = r.CheckBreak()
	}
	if yyb3232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3233 := &x.PreferAvoidPods
		yym3234 := z.DecBinary()
		_ = yym3234
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3233), d)
		}
	}
	for {
		yyj3232++
		if yyhl3232 {
			yyb3232 = yyj3232 > l
		} else {
			yyb3232 = r.CheckBreak()
		}
		if yyb3232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3235 := z.EncBinary()
		_ = yym3235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3236 := !z.EncBinary()
			yy2arr3236 := z.EncBasicHandle().StructToArray
			var yyq3236 [4]bool
			_, _, _ = yysep3236, yyq3236, yy2arr3236
			const yyr3236 bool = false
			yyq3236[1] = true
			yyq3236[2] = x.Reason != ""
			yyq3236[3] = x.Message != ""
			var yynn3236 int
			if yyr3236 || yy2arr3236 {
				r.EncodeArrayStart(4)
			} else {
				yynn3236 = 1
				for _, b := range yyq3236 {
					if b {
						yynn3236++
					}
				}
				r.EncodeMapStart(yynn3236)
				yynn3236 = 0
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3238 := &x.PodSignature
				yy3238.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3239 := &x.PodSignature
				yy3239.CodecEncodeSelf(e)
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[1] {
					yy3241 := &x.EvictionTime
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3241) {
					} else if yym3242 {
						z.EncBinaryMarshal(yy3241)
					} else if !yym3242 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3241)
					} else {
						z.EncFallback(yy3241)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3236[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3243 := &x.EvictionTime
					yym3244 := z.EncBinary()
					_ = yym3244
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3243) {
					} else if yym3244 {
						z.EncBinaryMarshal(yy3243)
					} else if !yym3244 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3243)
					} else {
						z.EncFallback(yy3243)
					}
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[2] {
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3236[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3247 := z.EncBinary()
					_ = yym3247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3236[3] {
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3236[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3236 || yy2arr3236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3254 := &x.PodSignature
				yyv3254.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3255 := &x.EvictionTime
				yym3256 := z.DecBinary()
				_ = yym3256
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3255) {
				} else if yym3256 {
					z.DecBinaryUnmarshal(yyv3255)
				} else if !yym3256 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3255)
				} else {
					z.DecFallback(yyv3255, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3259 int
	var yyb3259 bool
	var yyhl3259 bool = l >= 0
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3260 := &x.PodSignature
		yyv3260.CodecDecodeSelf(d)
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3261 := &x.EvictionTime
		yym3262 := z.DecBinary()
		_ = yym3262
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3261) {
		} else if yym3262 {
			z.DecBinaryUnmarshal(yyv3261)
		} else if !yym3262 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3261)
		} else {
			z.DecFallback(yyv3261, false)
		}
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3259++
	if yyhl3259 {
		yyb3259 = yyj3259 > l
	} else {
		yyb3259 = r.CheckBreak()
	}
	if yyb3259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3259++
		if yyhl3259 {
			yyb3259 = yyj3259 > l
		} else {
			yyb3259 = r.CheckBreak()
		}
		if yyb3259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3265 := z.EncBinary()
		_ = yym3265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3266 := !z.EncBinary()
			yy2arr3266 := z.EncBasicHandle().StructToArray
			var yyq3266 [1]bool
			_, _, _ = yysep3266, yyq3266, yy2arr3266
			const yyr3266 bool = false
			yyq3266[0] = x.PodController != nil
			var yynn3266 int
			if yyr3266 || yy2arr3266 {
				r.EncodeArrayStart(1)
			} else {
				yynn3266 = 0
				for _, b := range yyq3266 {
					if b {
						yynn3266++
					}
				}
				r.EncodeMapStart(yynn3266)
				yynn3266 = 0
			}
			if yyr3266 || yy2arr3266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3266[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3266 || yy2arr3266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3268 := z.DecBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3269 := r.ContainerType()
		if yyct3269 == codecSelferValueTypeMap1234 {
			yyl3269 := r.ReadMapStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3269, d)
			}
		} else if yyct3269 == codecSelferValueTypeArray1234 {
			yyl3269 := r.ReadArrayStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3270Slc
	var yyhl3270 bool = l >= 0
	for yyj3270 := 0; ; yyj3270++ {
		if yyhl3270 {
			if yyj3270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3270Slc = r.DecodeBytes(yys3270Slc, true, true)
		yys3270 := string(yys3270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3270 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3270)
		} // end switch yys3270
	} // end for yyj3270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3272 int
	var yyb3272 bool
	var yyhl3272 bool = l >= 0
	yyj3272++
	if yyhl3272 {
		yyb3272 = yyj3272 > l
	} else {
		yyb3272 = r.CheckBreak()
	}
	if yyb3272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3272++
		if yyhl3272 {
			yyb3272 = yyj3272 > l
		} else {
			yyb3272 = r.CheckBreak()
		}
		if yyb3272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3274 := z.EncBinary()
		_ = yym3274
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3275 := !z.EncBinary()
			yy2arr3275 := z.EncBasicHandle().StructToArray
			var yyq3275 [2]bool
			_, _, _ = yysep3275, yyq3275, yy2arr3275
			const yyr3275 bool = false
			yyq3275[1] = x.SizeBytes != 0
			var yynn3275 int
			if yyr3275 || yy2arr3275 {
				r.EncodeArrayStart(2)
			} else {
				yynn3275 = 1
				for _, b := range yyq3275 {
					if b {
						yynn3275++
					}
				}
				r.EncodeMapStart(yynn3275)
				yynn3275 = 0
			}
			if yyr3275 || yy2arr3275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3275 || yy2arr3275 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3275[1] {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3275[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3275 || yy2arr3275 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3283 := r.ContainerType()
		if yyct3283 == codecSelferValueTypeMap1234 {
			yyl3283 := r.ReadMapStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3283, d)
			}
		} else if yyct3283 == codecSelferValueTypeArray1234 {
			yyl3283 := r.ReadArrayStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3284Slc
	var yyhl3284 bool = l >= 0
	for yyj3284 := 0; ; yyj3284++ {
		if yyhl3284 {
			if yyj3284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3284Slc = r.DecodeBytes(yys3284Slc, true, true)
		yys3284 := string(yys3284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3284 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3285 := &x.Names
				yym3286 := z.DecBinary()
				_ = yym3286
				if false {
				} else {
					z.F.DecSliceStringX(yyv3285, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3284)
		} // end switch yys3284
	} // end for yyj3284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3288 int
	var yyb3288 bool
	var yyhl3288 bool = l >= 0
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3289 := &x.Names
		yym3290 := z.DecBinary()
		_ = yym3290
		if false {
		} else {
			z.F.DecSliceStringX(yyv3289, false, d)
		}
	}
	yyj3288++
	if yyhl3288 {
		yyb3288 = yyj3288 > l
	} else {
		yyb3288 = r.CheckBreak()
	}
	if yyb3288 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3288++
		if yyhl3288 {
			yyb3288 = yyj3288 > l
		} else {
			yyb3288 = r.CheckBreak()
		}
		if yyb3288 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3288-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3292 := z.EncBinary()
	_ = yym3292
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3293 := z.DecBinary()
	_ = yym3293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3294 := z.EncBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3295 := z.DecBinary()
	_ = yym3295
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3296 := z.EncBinary()
		_ = yym3296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3297 := !z.EncBinary()
			yy2arr3297 := z.EncBasicHandle().StructToArray
			var yyq3297 [6]bool
			_, _, _ = yysep3297, yyq3297, yy2arr3297
			const yyr3297 bool = false
			yyq3297[2] = true
			yyq3297[3] = true
			yyq3297[4] = x.Reason != ""
			yyq3297[5] = x.Message != ""
			var yynn3297 int
			if yyr3297 || yy2arr3297 {
				r.EncodeArrayStart(6)
			} else {
				yynn3297 = 2
				for _, b := range yyq3297 {
					if b {
						yynn3297++
					}
				}
				r.EncodeMapStart(yynn3297)
				yynn3297 = 0
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[2] {
					yy3301 := &x.LastHeartbeatTime
					yym3302 := z.EncBinary()
					_ = yym3302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3301) {
					} else if yym3302 {
						z.EncBinaryMarshal(yy3301)
					} else if !yym3302 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3301)
					} else {
						z.EncFallback(yy3301)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3303 := &x.LastHeartbeatTime
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3303) {
					} else if yym3304 {
						z.EncBinaryMarshal(yy3303)
					} else if !yym3304 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3303)
					} else {
						z.EncFallback(yy3303)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[3] {
					yy3306 := &x.LastTransitionTime
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3306) {
					} else if yym3307 {
						z.EncBinaryMarshal(yy3306)
					} else if !yym3307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3306)
					} else {
						z.EncFallback(yy3306)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3308 := &x.LastTransitionTime
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3308) {
					} else if yym3309 {
						z.EncBinaryMarshal(yy3308)
					} else if !yym3309 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3308)
					} else {
						z.EncFallback(yy3308)
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[4] {
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3312 := z.EncBinary()
					_ = yym3312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3297[5] {
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3297[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3297 || yy2arr3297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3316 := z.DecBinary()
	_ = yym3316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3317 := r.ContainerType()
		if yyct3317 == codecSelferValueTypeMap1234 {
			yyl3317 := r.ReadMapStart()
			if yyl3317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3317, d)
			}
		} else if yyct3317 == codecSelferValueTypeArray1234 {
			yyl3317 := r.ReadArrayStart()
			if yyl3317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3318Slc
	var yyhl3318 bool = l >= 0
	for yyj3318 := 0; ; yyj3318++ {
		if yyhl3318 {
			if yyj3318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3318Slc = r.DecodeBytes(yys3318Slc, true, true)
		yys3318 := string(yys3318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3318 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3321 := &x.LastHeartbeatTime
				yym3322 := z.DecBinary()
				_ = yym3322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3321) {
				} else if yym3322 {
					z.DecBinaryUnmarshal(yyv3321)
				} else if !yym3322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3321)
				} else {
					z.DecFallback(yyv3321, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3323 := &x.LastTransitionTime
				yym3324 := z.DecBinary()
				_ = yym3324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3323) {
				} else if yym3324 {
					z.DecBinaryUnmarshal(yyv3323)
				} else if !yym3324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3323)
				} else {
					z.DecFallback(yyv3323, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3318)
		} // end switch yys3318
	} // end for yyj3318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3327 int
	var yyb3327 bool
	var yyhl3327 bool = l >= 0
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3330 := &x.LastHeartbeatTime
		yym3331 := z.DecBinary()
		_ = yym3331
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3330) {
		} else if yym3331 {
			z.DecBinaryUnmarshal(yyv3330)
		} else if !yym3331 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3330)
		} else {
			z.DecFallback(yyv3330, false)
		}
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3332 := &x.LastTransitionTime
		yym3333 := z.DecBinary()
		_ = yym3333
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3332) {
		} else if yym3333 {
			z.DecBinaryUnmarshal(yyv3332)
		} else if !yym3333 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3332)
		} else {
			z.DecFallback(yyv3332, false)
		}
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3327++
	if yyhl3327 {
		yyb3327 = yyj3327 > l
	} else {
		yyb3327 = r.CheckBreak()
	}
	if yyb3327 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3327++
		if yyhl3327 {
			yyb3327 = yyj3327 > l
		} else {
			yyb3327 = r.CheckBreak()
		}
		if yyb3327 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3327-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3336 := z.EncBinary()
	_ = yym3336
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3337 := z.DecBinary()
	_ = yym3337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3338 := z.EncBinary()
		_ = yym3338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3339 := !z.EncBinary()
			yy2arr3339 := z.EncBasicHandle().StructToArray
			var yyq3339 [2]bool
			_, _, _ = yysep3339, yyq3339, yy2arr3339
			const yyr3339 bool = false
			var yynn3339 int
			if yyr3339 || yy2arr3339 {
				r.EncodeArrayStart(2)
			} else {
				yynn3339 = 2
				for _, b := range yyq3339 {
					if b {
						yynn3339++
					}
				}
				r.EncodeMapStart(yynn3339)
				yynn3339 = 0
			}
			if yyr3339 || yy2arr3339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3339 || yy2arr3339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3342 := z.EncBinary()
				_ = yym3342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3343 := z.EncBinary()
				_ = yym3343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3339 || yy2arr3339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3344 := z.DecBinary()
	_ = yym3344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3345 := r.ContainerType()
		if yyct3345 == codecSelferValueTypeMap1234 {
			yyl3345 := r.ReadMapStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3345, d)
			}
		} else if yyct3345 == codecSelferValueTypeArray1234 {
			yyl3345 := r.ReadArrayStart()
			if yyl3345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3346Slc
	var yyhl3346 bool = l >= 0
	for yyj3346 := 0; ; yyj3346++ {
		if yyhl3346 {
			if yyj3346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3346Slc = r.DecodeBytes(yys3346Slc, true, true)
		yys3346 := string(yys3346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3346 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3346)
		} // end switch yys3346
	} // end for yyj3346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3349 int
	var yyb3349 bool
	var yyhl3349 bool = l >= 0
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3349++
		if yyhl3349 {
			yyb3349 = yyj3349 > l
		} else {
			yyb3349 = r.CheckBreak()
		}
		if yyb3349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3352 := z.EncBinary()
		_ = yym3352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3353 := !z.EncBinary()
			yy2arr3353 := z.EncBasicHandle().StructToArray
			var yyq3353 [1]bool
			_, _, _ = yysep3353, yyq3353, yy2arr3353
			const yyr3353 bool = false
			yyq3353[0] = len(x.Capacity) != 0
			var yynn3353 int
			if yyr3353 || yy2arr3353 {
				r.EncodeArrayStart(1)
			} else {
				yynn3353 = 0
				for _, b := range yyq3353 {
					if b {
						yynn3353++
					}
				}
				r.EncodeMapStart(yynn3353)
				yynn3353 = 0
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3353[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3353[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3353 || yy2arr3353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3355 := z.DecBinary()
	_ = yym3355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3356 := r.ContainerType()
		if yyct3356 == codecSelferValueTypeMap1234 {
			yyl3356 := r.ReadMapStart()
			if yyl3356 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3356, d)
			}
		} else if yyct3356 == codecSelferValueTypeArray1234 {
			yyl3356 := r.ReadArrayStart()
			if yyl3356 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3356, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3357Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3357Slc
	var yyhl3357 bool = l >= 0
	for yyj3357 := 0; ; yyj3357++ {
		if yyhl3357 {
			if yyj3357 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3357Slc = r.DecodeBytes(yys3357Slc, true, true)
		yys3357 := string(yys3357Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3357 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3358 := &x.Capacity
				yyv3358.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3357)
		} // end switch yys3357
	} // end for yyj3357
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3359 int
	var yyb3359 bool
	var yyhl3359 bool = l >= 0
	yyj3359++
	if yyhl3359 {
		yyb3359 = yyj3359 > l
	} else {
		yyb3359 = r.CheckBreak()
	}
	if yyb3359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3360 := &x.Capacity
		yyv3360.CodecDecodeSelf(d)
	}
	for {
		yyj3359++
		if yyhl3359 {
			yyb3359 = yyj3359 > l
		} else {
			yyb3359 = r.CheckBreak()
		}
		if yyb3359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3361 := z.EncBinary()
	_ = yym3361
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3362 := z.DecBinary()
	_ = yym3362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3363 := z.EncBinary()
		_ = yym3363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3364 := z.DecBinary()
	_ = yym3364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3365 := z.EncBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3366 := !z.EncBinary()
			yy2arr3366 := z.EncBasicHandle().StructToArray
			var yyq3366 [5]bool
			_, _, _ = yysep3366, yyq3366, yy2arr3366
			const yyr3366 bool = false
			yyq3366[0] = x.Kind != ""
			yyq3366[1] = x.APIVersion != ""
			yyq3366[2] = true
			yyq3366[3] = true
			yyq3366[4] = true
			var yynn3366 int
			if yyr3366 || yy2arr3366 {
				r.EncodeArrayStart(5)
			} else {
				yynn3366 = 0
				for _, b := range yyq3366 {
					if b {
						yynn3366++
					}
				}
				r.EncodeMapStart(yynn3366)
				yynn3366 = 0
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[0] {
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[1] {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3366[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[2] {
					yy3374 := &x.ObjectMeta
					yy3374.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3375 := &x.ObjectMeta
					yy3375.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[3] {
					yy3377 := &x.Spec
					yy3377.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3378 := &x.Spec
					yy3378.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3366[4] {
					yy3380 := &x.Status
					yy3380.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3366[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3381 := &x.Status
					yy3381.CodecEncodeSelf(e)
				}
			}
			if yyr3366 || yy2arr3366 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3382 := z.DecBinary()
	_ = yym3382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3383 := r.ContainerType()
		if yyct3383 == codecSelferValueTypeMap1234 {
			yyl3383 := r.ReadMapStart()
			if yyl3383 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3383, d)
			}
		} else if yyct3383 == codecSelferValueTypeArray1234 {
			yyl3383 := r.ReadArrayStart()
			if yyl3383 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3384Slc
	var yyhl3384 bool = l >= 0
	for yyj3384 := 0; ; yyj3384++ {
		if yyhl3384 {
			if yyj3384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3384Slc = r.DecodeBytes(yys3384Slc, true, true)
		yys3384 := string(yys3384Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3384 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3387 := &x.ObjectMeta
				yyv3387.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3388 := &x.Spec
				yyv3388.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3389 := &x.Status
				yyv3389.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3384)
		} // end switch yys3384
	} // end for yyj3384
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3390 int
	var yyb3390 bool
	var yyhl3390 bool = l >= 0
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3393 := &x.ObjectMeta
		yyv3393.CodecDecodeSelf(d)
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3394 := &x.Spec
		yyv3394.CodecDecodeSelf(d)
	}
	yyj3390++
	if yyhl3390 {
		yyb3390 = yyj3390 > l
	} else {
		yyb3390 = r.CheckBreak()
	}
	if yyb3390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3395 := &x.Status
		yyv3395.CodecDecodeSelf(d)
	}
	for {
		yyj3390++
		if yyhl3390 {
			yyb3390 = yyj3390 > l
		} else {
			yyb3390 = r.CheckBreak()
		}
		if yyb3390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3396 := z.EncBinary()
		_ = yym3396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3397 := !z.EncBinary()
			yy2arr3397 := z.EncBasicHandle().StructToArray
			var yyq3397 [4]bool
			_, _, _ = yysep3397, yyq3397, yy2arr3397
			const yyr3397 bool = false
			yyq3397[0] = x.Kind != ""
			yyq3397[1] = x.APIVersion != ""
			yyq3397[2] = true
			var yynn3397 int
			if yyr3397 || yy2arr3397 {
				r.EncodeArrayStart(4)
			} else {
				yynn3397 = 1
				for _, b := range yyq3397 {
					if b {
						yynn3397++
					}
				}
				r.EncodeMapStart(yynn3397)
				yynn3397 = 0
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[0] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3397[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[1] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3397[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[2] {
					yy3405 := &x.ListMeta
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3405) {
					} else {
						z.EncFallback(yy3405)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3407 := &x.ListMeta
					yym3408 := z.EncBinary()
					_ = yym3408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3407) {
					} else {
						z.EncFallback(yy3407)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3411 := z.EncBinary()
					_ = yym3411
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3412 := z.DecBinary()
	_ = yym3412
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3413 := r.ContainerType()
		if yyct3413 == codecSelferValueTypeMap1234 {
			yyl3413 := r.ReadMapStart()
			if yyl3413 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3413, d)
			}
		} else if yyct3413 == codecSelferValueTypeArray1234 {
			yyl3413 := r.ReadArrayStart()
			if yyl3413 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3413, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3414Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3414Slc
	var yyhl3414 bool = l >= 0
	for yyj3414 := 0; ; yyj3414++ {
		if yyhl3414 {
			if yyj3414 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3414Slc = r.DecodeBytes(yys3414Slc, true, true)
		yys3414 := string(yys3414Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3414 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3417 := &x.ListMeta
				yym3418 := z.DecBinary()
				_ = yym3418
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3417) {
				} else {
					z.DecFallback(yyv3417, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3419 := &x.Items
				yym3420 := z.DecBinary()
				_ = yym3420
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3419), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3414)
		} // end switch yys3414
	} // end for yyj3414
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3421 int
	var yyb3421 bool
	var yyhl3421 bool = l >= 0
	yyj3421++
	if yyhl3421 {
		yyb3421 = yyj3421 > l
	} else {
		yyb3421 = r.CheckBreak()
	}
	if yyb3421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3421++
	if yyhl3421 {
		yyb3421 = yyj3421 > l
	} else {
		yyb3421 = r.CheckBreak()
	}
	if yyb3421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3421++
	if yyhl3421 {
		yyb3421 = yyj3421 > l
	} else {
		yyb3421 = r.CheckBreak()
	}
	if yyb3421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3424 := &x.ListMeta
		yym3425 := z.DecBinary()
		_ = yym3425
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3424) {
		} else {
			z.DecFallback(yyv3424, false)
		}
	}
	yyj3421++
	if yyhl3421 {
		yyb3421 = yyj3421 > l
	} else {
		yyb3421 = r.CheckBreak()
	}
	if yyb3421 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3426 := &x.Items
		yym3427 := z.DecBinary()
		_ = yym3427
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3426), d)
		}
	}
	for {
		yyj3421++
		if yyhl3421 {
			yyb3421 = yyj3421 > l
		} else {
			yyb3421 = r.CheckBreak()
		}
		if yyb3421 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3421-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3428 := z.EncBinary()
		_ = yym3428
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3429 := !z.EncBinary()
			yy2arr3429 := z.EncBasicHandle().StructToArray
			var yyq3429 [1]bool
			_, _, _ = yysep3429, yyq3429, yy2arr3429
			const yyr3429 bool = false
			var yynn3429 int
			if yyr3429 || yy2arr3429 {
				r.EncodeArrayStart(1)
			} else {
				yynn3429 = 1
				for _, b := range yyq3429 {
					if b {
						yynn3429++
					}
				}
				r.EncodeMapStart(yynn3429)
				yynn3429 = 0
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3431 := z.EncBinary()
					_ = yym3431
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3429 || yy2arr3429 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3433 := z.DecBinary()
	_ = yym3433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3434 := r.ContainerType()
		if yyct3434 == codecSelferValueTypeMap1234 {
			yyl3434 := r.ReadMapStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3434, d)
			}
		} else if yyct3434 == codecSelferValueTypeArray1234 {
			yyl3434 := r.ReadArrayStart()
			if yyl3434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3435Slc
	var yyhl3435 bool = l >= 0
	for yyj3435 := 0; ; yyj3435++ {
		if yyhl3435 {
			if yyj3435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3435Slc = r.DecodeBytes(yys3435Slc, true, true)
		yys3435 := string(yys3435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3435 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3436 := &x.Finalizers
				yym3437 := z.DecBinary()
				_ = yym3437
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3436), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3435)
		} // end switch yys3435
	} // end for yyj3435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3438 int
	var yyb3438 bool
	var yyhl3438 bool = l >= 0
	yyj3438++
	if yyhl3438 {
		yyb3438 = yyj3438 > l
	} else {
		yyb3438 = r.CheckBreak()
	}
	if yyb3438 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3439 := &x.Finalizers
		yym3440 := z.DecBinary()
		_ = yym3440
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3439), d)
		}
	}
	for {
		yyj3438++
		if yyhl3438 {
			yyb3438 = yyj3438 > l
		} else {
			yyb3438 = r.CheckBreak()
		}
		if yyb3438 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3438-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3441 := z.EncBinary()
	_ = yym3441
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3442 := z.DecBinary()
	_ = yym3442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3443 := z.EncBinary()
		_ = yym3443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3444 := !z.EncBinary()
			yy2arr3444 := z.EncBasicHandle().StructToArray
			var yyq3444 [1]bool
			_, _, _ = yysep3444, yyq3444, yy2arr3444
			const yyr3444 bool = false
			yyq3444[0] = x.Phase != ""
			var yynn3444 int
			if yyr3444 || yy2arr3444 {
				r.EncodeArrayStart(1)
			} else {
				yynn3444 = 0
				for _, b := range yyq3444 {
					if b {
						yynn3444++
					}
				}
				r.EncodeMapStart(yynn3444)
				yynn3444 = 0
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3444[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3444 || yy2arr3444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3446 := z.DecBinary()
	_ = yym3446
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3447 := r.ContainerType()
		if yyct3447 == codecSelferValueTypeMap1234 {
			yyl3447 := r.ReadMapStart()
			if yyl3447 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3447, d)
			}
		} else if yyct3447 == codecSelferValueTypeArray1234 {
			yyl3447 := r.ReadArrayStart()
			if yyl3447 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3447, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3448Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3448Slc
	var yyhl3448 bool = l >= 0
	for yyj3448 := 0; ; yyj3448++ {
		if yyhl3448 {
			if yyj3448 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3448Slc = r.DecodeBytes(yys3448Slc, true, true)
		yys3448 := string(yys3448Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3448 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3448)
		} // end switch yys3448
	} // end for yyj3448
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3450 int
	var yyb3450 bool
	var yyhl3450 bool = l >= 0
	yyj3450++
	if yyhl3450 {
		yyb3450 = yyj3450 > l
	} else {
		yyb3450 = r.CheckBreak()
	}
	if yyb3450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3450++
		if yyhl3450 {
			yyb3450 = yyj3450 > l
		} else {
			yyb3450 = r.CheckBreak()
		}
		if yyb3450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3452 := z.EncBinary()
	_ = yym3452
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3453 := z.DecBinary()
	_ = yym3453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3454 := z.EncBinary()
		_ = yym3454
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3455 := !z.EncBinary()
			yy2arr3455 := z.EncBasicHandle().StructToArray
			var yyq3455 [5]bool
			_, _, _ = yysep3455, yyq3455, yy2arr3455
			const yyr3455 bool = false
			yyq3455[0] = x.Kind != ""
			yyq3455[1] = x.APIVersion != ""
			yyq3455[2] = true
			yyq3455[3] = true
			yyq3455[4] = true
			var yynn3455 int
			if yyr3455 || yy2arr3455 {
				r.EncodeArrayStart(5)
			} else {
				yynn3455 = 0
				for _, b := range yyq3455 {
					if b {
						yynn3455++
					}
				}
				r.EncodeMapStart(yynn3455)
				yynn3455 = 0
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[0] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[1] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3455[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[2] {
					yy3463 := &x.ObjectMeta
					yy3463.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3464 := &x.ObjectMeta
					yy3464.CodecEncodeSelf(e)
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[3] {
					yy3466 := &x.Spec
					yy3466.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3467 := &x.Spec
					yy3467.CodecEncodeSelf(e)
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3455[4] {
					yy3469 := &x.Status
					yy3469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3455[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3470 := &x.Status
					yy3470.CodecEncodeSelf(e)
				}
			}
			if yyr3455 || yy2arr3455 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3471 := z.DecBinary()
	_ = yym3471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3472 := r.ContainerType()
		if yyct3472 == codecSelferValueTypeMap1234 {
			yyl3472 := r.ReadMapStart()
			if yyl3472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3472, d)
			}
		} else if yyct3472 == codecSelferValueTypeArray1234 {
			yyl3472 := r.ReadArrayStart()
			if yyl3472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3473Slc
	var yyhl3473 bool = l >= 0
	for yyj3473 := 0; ; yyj3473++ {
		if yyhl3473 {
			if yyj3473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3473Slc = r.DecodeBytes(yys3473Slc, true, true)
		yys3473 := string(yys3473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3473 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3476 := &x.ObjectMeta
				yyv3476.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3477 := &x.Spec
				yyv3477.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3478 := &x.Status
				yyv3478.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3473)
		} // end switch yys3473
	} // end for yyj3473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3479 int
	var yyb3479 bool
	var yyhl3479 bool = l >= 0
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3482 := &x.ObjectMeta
		yyv3482.CodecDecodeSelf(d)
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3483 := &x.Spec
		yyv3483.CodecDecodeSelf(d)
	}
	yyj3479++
	if yyhl3479 {
		yyb3479 = yyj3479 > l
	} else {
		yyb3479 = r.CheckBreak()
	}
	if yyb3479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3484 := &x.Status
		yyv3484.CodecDecodeSelf(d)
	}
	for {
		yyj3479++
		if yyhl3479 {
			yyb3479 = yyj3479 > l
		} else {
			yyb3479 = r.CheckBreak()
		}
		if yyb3479 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3479-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3485 := z.EncBinary()
		_ = yym3485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3486 := !z.EncBinary()
			yy2arr3486 := z.EncBasicHandle().StructToArray
			var yyq3486 [4]bool
			_, _, _ = yysep3486, yyq3486, yy2arr3486
			const yyr3486 bool = false
			yyq3486[0] = x.Kind != ""
			yyq3486[1] = x.APIVersion != ""
			yyq3486[2] = true
			var yynn3486 int
			if yyr3486 || yy2arr3486 {
				r.EncodeArrayStart(4)
			} else {
				yynn3486 = 1
				for _, b := range yyq3486 {
					if b {
						yynn3486++
					}
				}
				r.EncodeMapStart(yynn3486)
				yynn3486 = 0
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[0] {
					yym3488 := z.EncBinary()
					_ = yym3488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3486[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[1] {
					yym3491 := z.EncBinary()
					_ = yym3491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3486[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3486[2] {
					yy3494 := &x.ListMeta
					yym3495 := z.EncBinary()
					_ = yym3495
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3494) {
					} else {
						z.EncFallback(yy3494)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3486[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3496 := &x.ListMeta
					yym3497 := z.EncBinary()
					_ = yym3497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3496) {
					} else {
						z.EncFallback(yy3496)
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3499 := z.EncBinary()
					_ = yym3499
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3486 || yy2arr3486 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3501 := z.DecBinary()
	_ = yym3501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3502 := r.ContainerType()
		if yyct3502 == codecSelferValueTypeMap1234 {
			yyl3502 := r.ReadMapStart()
			if yyl3502 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3502, d)
			}
		} else if yyct3502 == codecSelferValueTypeArray1234 {
			yyl3502 := r.ReadArrayStart()
			if yyl3502 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3502, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3503Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3503Slc
	var yyhl3503 bool = l >= 0
	for yyj3503 := 0; ; yyj3503++ {
		if yyhl3503 {
			if yyj3503 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3503Slc = r.DecodeBytes(yys3503Slc, true, true)
		yys3503 := string(yys3503Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3503 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3506 := &x.ListMeta
				yym3507 := z.DecBinary()
				_ = yym3507
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3506) {
				} else {
					z.DecFallback(yyv3506, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3508 := &x.Items
				yym3509 := z.DecBinary()
				_ = yym3509
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3508), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3503)
		} // end switch yys3503
	} // end for yyj3503
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3510 int
	var yyb3510 bool
	var yyhl3510 bool = l >= 0
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3513 := &x.ListMeta
		yym3514 := z.DecBinary()
		_ = yym3514
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3513) {
		} else {
			z.DecFallback(yyv3513, false)
		}
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3515 := &x.Items
		yym3516 := z.DecBinary()
		_ = yym3516
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3515), d)
		}
	}
	for {
		yyj3510++
		if yyhl3510 {
			yyb3510 = yyj3510 > l
		} else {
			yyb3510 = r.CheckBreak()
		}
		if yyb3510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3517 := z.EncBinary()
		_ = yym3517
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3518 := !z.EncBinary()
			yy2arr3518 := z.EncBasicHandle().StructToArray
			var yyq3518 [4]bool
			_, _, _ = yysep3518, yyq3518, yy2arr3518
			const yyr3518 bool = false
			yyq3518[0] = x.Kind != ""
			yyq3518[1] = x.APIVersion != ""
			yyq3518[2] = true
			var yynn3518 int
			if yyr3518 || yy2arr3518 {
				r.EncodeArrayStart(4)
			} else {
				yynn3518 = 1
				for _, b := range yyq3518 {
					if b {
						yynn3518++
					}
				}
				r.EncodeMapStart(yynn3518)
				yynn3518 = 0
			}
			if yyr3518 || yy2arr3518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3518[0] {
					yym3520 := z.EncBinary()
					_ = yym3520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3518[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3521 := z.EncBinary()
					_ = yym3521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3518 || yy2arr3518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3518[1] {
					yym3523 := z.EncBinary()
					_ = yym3523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3518[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3524 := z.EncBinary()
					_ = yym3524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3518 || yy2arr3518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3518[2] {
					yy3526 := &x.ObjectMeta
					yy3526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3518[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3527 := &x.ObjectMeta
					yy3527.CodecEncodeSelf(e)
				}
			}
			if yyr3518 || yy2arr3518 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3529 := &x.Target
				yy3529.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3530 := &x.Target
				yy3530.CodecEncodeSelf(e)
			}
			if yyr3518 || yy2arr3518 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3531 := z.DecBinary()
	_ = yym3531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3532 := r.ContainerType()
		if yyct3532 == codecSelferValueTypeMap1234 {
			yyl3532 := r.ReadMapStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3532, d)
			}
		} else if yyct3532 == codecSelferValueTypeArray1234 {
			yyl3532 := r.ReadArrayStart()
			if yyl3532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3533Slc
	var yyhl3533 bool = l >= 0
	for yyj3533 := 0; ; yyj3533++ {
		if yyhl3533 {
			if yyj3533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3533Slc = r.DecodeBytes(yys3533Slc, true, true)
		yys3533 := string(yys3533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3533 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3536 := &x.ObjectMeta
				yyv3536.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3537 := &x.Target
				yyv3537.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3533)
		} // end switch yys3533
	} // end for yyj3533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3538 int
	var yyb3538 bool
	var yyhl3538 bool = l >= 0
	yyj3538++
	if yyhl3538 {
		yyb3538 = yyj3538 > l
	} else {
		yyb3538 = r.CheckBreak()
	}
	if yyb3538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3538++
	if yyhl3538 {
		yyb3538 = yyj3538 > l
	} else {
		yyb3538 = r.CheckBreak()
	}
	if yyb3538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3538++
	if yyhl3538 {
		yyb3538 = yyj3538 > l
	} else {
		yyb3538 = r.CheckBreak()
	}
	if yyb3538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3541 := &x.ObjectMeta
		yyv3541.CodecDecodeSelf(d)
	}
	yyj3538++
	if yyhl3538 {
		yyb3538 = yyj3538 > l
	} else {
		yyb3538 = r.CheckBreak()
	}
	if yyb3538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3542 := &x.Target
		yyv3542.CodecDecodeSelf(d)
	}
	for {
		yyj3538++
		if yyhl3538 {
			yyb3538 = yyj3538 > l
		} else {
			yyb3538 = r.CheckBreak()
		}
		if yyb3538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3543 := z.EncBinary()
		_ = yym3543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3544 := !z.EncBinary()
			yy2arr3544 := z.EncBasicHandle().StructToArray
			var yyq3544 [1]bool
			_, _, _ = yysep3544, yyq3544, yy2arr3544
			const yyr3544 bool = false
			yyq3544[0] = x.UID != nil
			var yynn3544 int
			if yyr3544 || yy2arr3544 {
				r.EncodeArrayStart(1)
			} else {
				yynn3544 = 0
				for _, b := range yyq3544 {
					if b {
						yynn3544++
					}
				}
				r.EncodeMapStart(yynn3544)
				yynn3544 = 0
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3546 := *x.UID
						yym3547 := z.EncBinary()
						_ = yym3547
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3546) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3546))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3548 := *x.UID
						yym3549 := z.EncBinary()
						_ = yym3549
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3548) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3548))
						}
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3550 := z.DecBinary()
	_ = yym3550
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3551 := r.ContainerType()
		if yyct3551 == codecSelferValueTypeMap1234 {
			yyl3551 := r.ReadMapStart()
			if yyl3551 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3551, d)
			}
		} else if yyct3551 == codecSelferValueTypeArray1234 {
			yyl3551 := r.ReadArrayStart()
			if yyl3551 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3551, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3552Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3552Slc
	var yyhl3552 bool = l >= 0
	for yyj3552 := 0; ; yyj3552++ {
		if yyhl3552 {
			if yyj3552 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3552Slc = r.DecodeBytes(yys3552Slc, true, true)
		yys3552 := string(yys3552Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3552 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3554 := z.DecBinary()
				_ = yym3554
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3552)
		} // end switch yys3552
	} // end for yyj3552
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3555 int
	var yyb3555 bool
	var yyhl3555 bool = l >= 0
	yyj3555++
	if yyhl3555 {
		yyb3555 = yyj3555 > l
	} else {
		yyb3555 = r.CheckBreak()
	}
	if yyb3555 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3557 := z.DecBinary()
		_ = yym3557
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3555++
		if yyhl3555 {
			yyb3555 = yyj3555 > l
		} else {
			yyb3555 = r.CheckBreak()
		}
		if yyb3555 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3555-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3558 := z.EncBinary()
		_ = yym3558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3559 := !z.EncBinary()
			yy2arr3559 := z.EncBasicHandle().StructToArray
			var yyq3559 [5]bool
			_, _, _ = yysep3559, yyq3559, yy2arr3559
			const yyr3559 bool = false
			yyq3559[0] = x.Kind != ""
			yyq3559[1] = x.APIVersion != ""
			yyq3559[2] = x.GracePeriodSeconds != nil
			yyq3559[3] = x.Preconditions != nil
			yyq3559[4] = x.OrphanDependents != nil
			var yynn3559 int
			if yyr3559 || yy2arr3559 {
				r.EncodeArrayStart(5)
			} else {
				yynn3559 = 0
				for _, b := range yyq3559 {
					if b {
						yynn3559++
					}
				}
				r.EncodeMapStart(yynn3559)
				yynn3559 = 0
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[0] {
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3559[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3562 := z.EncBinary()
					_ = yym3562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[1] {
					yym3564 := z.EncBinary()
					_ = yym3564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3559[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3565 := z.EncBinary()
					_ = yym3565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3567 := *x.GracePeriodSeconds
						yym3568 := z.EncBinary()
						_ = yym3568
						if false {
						} else {
							r.EncodeInt(int64(yy3567))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3559[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3569 := *x.GracePeriodSeconds
						yym3570 := z.EncBinary()
						_ = yym3570
						if false {
						} else {
							r.EncodeInt(int64(yy3569))
						}
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3559[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3559[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3573 := *x.OrphanDependents
						yym3574 := z.EncBinary()
						_ = yym3574
						if false {
						} else {
							r.EncodeBool(bool(yy3573))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3559[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3575 := *x.OrphanDependents
						yym3576 := z.EncBinary()
						_ = yym3576
						if false {
						} else {
							r.EncodeBool(bool(yy3575))
						}
					}
				}
			}
			if yyr3559 || yy2arr3559 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3577 := z.DecBinary()
	_ = yym3577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3578 := r.ContainerType()
		if yyct3578 == codecSelferValueTypeMap1234 {
			yyl3578 := r.ReadMapStart()
			if yyl3578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3578, d)
			}
		} else if yyct3578 == codecSelferValueTypeArray1234 {
			yyl3578 := r.ReadArrayStart()
			if yyl3578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3579Slc
	var yyhl3579 bool = l >= 0
	for yyj3579 := 0; ; yyj3579++ {
		if yyhl3579 {
			if yyj3579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3579Slc = r.DecodeBytes(yys3579Slc, true, true)
		yys3579 := string(yys3579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3579 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3583 := z.DecBinary()
				_ = yym3583
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3586 := z.DecBinary()
				_ = yym3586
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3579)
		} // end switch yys3579
	} // end for yyj3579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3587 int
	var yyb3587 bool
	var yyhl3587 bool = l >= 0
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3591 := z.DecBinary()
		_ = yym3591
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3587++
	if yyhl3587 {
		yyb3587 = yyj3587 > l
	} else {
		yyb3587 = r.CheckBreak()
	}
	if yyb3587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3594 := z.DecBinary()
		_ = yym3594
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3587++
		if yyhl3587 {
			yyb3587 = yyj3587 > l
		} else {
			yyb3587 = r.CheckBreak()
		}
		if yyb3587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3595 := z.EncBinary()
		_ = yym3595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3596 := !z.EncBinary()
			yy2arr3596 := z.EncBasicHandle().StructToArray
			var yyq3596 [4]bool
			_, _, _ = yysep3596, yyq3596, yy2arr3596
			const yyr3596 bool = false
			yyq3596[0] = x.Kind != ""
			yyq3596[1] = x.APIVersion != ""
			var yynn3596 int
			if yyr3596 || yy2arr3596 {
				r.EncodeArrayStart(4)
			} else {
				yynn3596 = 2
				for _, b := range yyq3596 {
					if b {
						yynn3596++
					}
				}
				r.EncodeMapStart(yynn3596)
				yynn3596 = 0
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[0] {
					yym3598 := z.EncBinary()
					_ = yym3598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3599 := z.EncBinary()
					_ = yym3599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3596[1] {
					yym3601 := z.EncBinary()
					_ = yym3601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3596[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3602 := z.EncBinary()
					_ = yym3602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3604 := z.EncBinary()
				_ = yym3604
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3605 := z.EncBinary()
				_ = yym3605
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3607 := z.EncBinary()
				_ = yym3607
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3608 := z.EncBinary()
				_ = yym3608
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3596 || yy2arr3596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3609 := z.DecBinary()
	_ = yym3609
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3610 := r.ContainerType()
		if yyct3610 == codecSelferValueTypeMap1234 {
			yyl3610 := r.ReadMapStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3610, d)
			}
		} else if yyct3610 == codecSelferValueTypeArray1234 {
			yyl3610 := r.ReadArrayStart()
			if yyl3610 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3610, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3611Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3611Slc
	var yyhl3611 bool = l >= 0
	for yyj3611 := 0; ; yyj3611++ {
		if yyhl3611 {
			if yyj3611 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3611Slc = r.DecodeBytes(yys3611Slc, true, true)
		yys3611 := string(yys3611Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3611 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3611)
		} // end switch yys3611
	} // end for yyj3611
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3616 int
	var yyb3616 bool
	var yyhl3616 bool = l >= 0
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3616++
	if yyhl3616 {
		yyb3616 = yyj3616 > l
	} else {
		yyb3616 = r.CheckBreak()
	}
	if yyb3616 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3616++
		if yyhl3616 {
			yyb3616 = yyj3616 > l
		} else {
			yyb3616 = r.CheckBreak()
		}
		if yyb3616 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3616-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3621 := z.EncBinary()
		_ = yym3621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3622 := !z.EncBinary()
			yy2arr3622 := z.EncBasicHandle().StructToArray
			var yyq3622 [7]bool
			_, _, _ = yysep3622, yyq3622, yy2arr3622
			const yyr3622 bool = false
			yyq3622[0] = x.Kind != ""
			yyq3622[1] = x.APIVersion != ""
			var yynn3622 int
			if yyr3622 || yy2arr3622 {
				r.EncodeArrayStart(7)
			} else {
				yynn3622 = 5
				for _, b := range yyq3622 {
					if b {
						yynn3622++
					}
				}
				r.EncodeMapStart(yynn3622)
				yynn3622 = 0
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[0] {
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3625 := z.EncBinary()
					_ = yym3625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3622[1] {
					yym3627 := z.EncBinary()
					_ = yym3627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3622[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3628 := z.EncBinary()
					_ = yym3628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3630 := z.EncBinary()
					_ = yym3630
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3631 := z.EncBinary()
					_ = yym3631
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3634 := z.EncBinary()
					_ = yym3634
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3636 := z.EncBinary()
				_ = yym3636
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3637 := z.EncBinary()
				_ = yym3637
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3639 := z.EncBinary()
				_ = yym3639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3640 := z.EncBinary()
				_ = yym3640
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3642 := *x.TimeoutSeconds
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeInt(int64(yy3642))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3644 := *x.TimeoutSeconds
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeInt(int64(yy3644))
					}
				}
			}
			if yyr3622 || yy2arr3622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3646 := z.DecBinary()
	_ = yym3646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3647 := r.ContainerType()
		if yyct3647 == codecSelferValueTypeMap1234 {
			yyl3647 := r.ReadMapStart()
			if yyl3647 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3647, d)
			}
		} else if yyct3647 == codecSelferValueTypeArray1234 {
			yyl3647 := r.ReadArrayStart()
			if yyl3647 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3648Slc
	var yyhl3648 bool = l >= 0
	for yyj3648 := 0; ; yyj3648++ {
		if yyhl3648 {
			if yyj3648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3648Slc = r.DecodeBytes(yys3648Slc, true, true)
		yys3648 := string(yys3648Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3648 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3651 := &x.LabelSelector
				yym3652 := z.DecBinary()
				_ = yym3652
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3651) {
				} else {
					z.DecFallback(yyv3651, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3653 := &x.FieldSelector
				yym3654 := z.DecBinary()
				_ = yym3654
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3653) {
				} else {
					z.DecFallback(yyv3653, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3658 := z.DecBinary()
				_ = yym3658
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3648)
		} // end switch yys3648
	} // end for yyj3648
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3659 int
	var yyb3659 bool
	var yyhl3659 bool = l >= 0
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3662 := &x.LabelSelector
		yym3663 := z.DecBinary()
		_ = yym3663
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3662) {
		} else {
			z.DecFallback(yyv3662, true)
		}
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3664 := &x.FieldSelector
		yym3665 := z.DecBinary()
		_ = yym3665
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3664) {
		} else {
			z.DecFallback(yyv3664, true)
		}
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3659++
	if yyhl3659 {
		yyb3659 = yyj3659 > l
	} else {
		yyb3659 = r.CheckBreak()
	}
	if yyb3659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3669 := z.DecBinary()
		_ = yym3669
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3659++
		if yyhl3659 {
			yyb3659 = yyj3659 > l
		} else {
			yyb3659 = r.CheckBreak()
		}
		if yyb3659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3670 := z.EncBinary()
		_ = yym3670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3671 := !z.EncBinary()
			yy2arr3671 := z.EncBasicHandle().StructToArray
			var yyq3671 [10]bool
			_, _, _ = yysep3671, yyq3671, yy2arr3671
			const yyr3671 bool = false
			yyq3671[0] = x.Kind != ""
			yyq3671[1] = x.APIVersion != ""
			var yynn3671 int
			if yyr3671 || yy2arr3671 {
				r.EncodeArrayStart(10)
			} else {
				yynn3671 = 8
				for _, b := range yyq3671 {
					if b {
						yynn3671++
					}
				}
				r.EncodeMapStart(yynn3671)
				yynn3671 = 0
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3671[0] {
					yym3673 := z.EncBinary()
					_ = yym3673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3671[1] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3679 := z.EncBinary()
				_ = yym3679
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3680 := z.EncBinary()
				_ = yym3680
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3682 := z.EncBinary()
				_ = yym3682
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3683 := z.EncBinary()
				_ = yym3683
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3685 := z.EncBinary()
				_ = yym3685
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3686 := z.EncBinary()
				_ = yym3686
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3688 := *x.SinceSeconds
					yym3689 := z.EncBinary()
					_ = yym3689
					if false {
					} else {
						r.EncodeInt(int64(yy3688))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3690 := *x.SinceSeconds
					yym3691 := z.EncBinary()
					_ = yym3691
					if false {
					} else {
						r.EncodeInt(int64(yy3690))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3693 := z.EncBinary()
					_ = yym3693
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3693 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3693 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3694 := z.EncBinary()
					_ = yym3694
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3694 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3694 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3696 := z.EncBinary()
				_ = yym3696
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3697 := z.EncBinary()
				_ = yym3697
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3699 := *x.TailLines
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeInt(int64(yy3699))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3701 := *x.TailLines
					yym3702 := z.EncBinary()
					_ = yym3702
					if false {
					} else {
						r.EncodeInt(int64(yy3701))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3704 := *x.LimitBytes
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeInt(int64(yy3704))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3706 := *x.LimitBytes
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeInt(int64(yy3706))
					}
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3708 := z.DecBinary()
	_ = yym3708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3709 := r.ContainerType()
		if yyct3709 == codecSelferValueTypeMap1234 {
			yyl3709 := r.ReadMapStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3709, d)
			}
		} else if yyct3709 == codecSelferValueTypeArray1234 {
			yyl3709 := r.ReadArrayStart()
			if yyl3709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3710Slc
	var yyhl3710 bool = l >= 0
	for yyj3710 := 0; ; yyj3710++ {
		if yyhl3710 {
			if yyj3710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3710Slc = r.DecodeBytes(yys3710Slc, true, true)
		yys3710 := string(yys3710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3717 := z.DecBinary()
				_ = yym3717
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3719 := z.DecBinary()
				_ = yym3719
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3719 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3719 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3722 := z.DecBinary()
				_ = yym3722
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3724 := z.DecBinary()
				_ = yym3724
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3710)
		} // end switch yys3710
	} // end for yyj3710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3725 int
	var yyb3725 bool
	var yyhl3725 bool = l >= 0
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3732 := z.DecBinary()
		_ = yym3732
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3734 := z.DecBinary()
		_ = yym3734
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3734 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3734 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3737 := z.DecBinary()
		_ = yym3737
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3725++
	if yyhl3725 {
		yyb3725 = yyj3725 > l
	} else {
		yyb3725 = r.CheckBreak()
	}
	if yyb3725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3739 := z.DecBinary()
		_ = yym3739
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3725++
		if yyhl3725 {
			yyb3725 = yyj3725 > l
		} else {
			yyb3725 = r.CheckBreak()
		}
		if yyb3725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3740 := z.EncBinary()
		_ = yym3740
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3741 := !z.EncBinary()
			yy2arr3741 := z.EncBasicHandle().StructToArray
			var yyq3741 [7]bool
			_, _, _ = yysep3741, yyq3741, yy2arr3741
			const yyr3741 bool = false
			yyq3741[0] = x.Kind != ""
			yyq3741[1] = x.APIVersion != ""
			yyq3741[2] = x.Stdin != false
			yyq3741[3] = x.Stdout != false
			yyq3741[4] = x.Stderr != false
			yyq3741[5] = x.TTY != false
			yyq3741[6] = x.Container != ""
			var yynn3741 int
			if yyr3741 || yy2arr3741 {
				r.EncodeArrayStart(7)
			} else {
				yynn3741 = 0
				for _, b := range yyq3741 {
					if b {
						yynn3741++
					}
				}
				r.EncodeMapStart(yynn3741)
				yynn3741 = 0
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[0] {
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3741[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[1] {
					yym3746 := z.EncBinary()
					_ = yym3746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3741[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3747 := z.EncBinary()
					_ = yym3747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[2] {
					yym3749 := z.EncBinary()
					_ = yym3749
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3741[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[3] {
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3741[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[4] {
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3741[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[5] {
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3741[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3741[6] {
					yym3761 := z.EncBinary()
					_ = yym3761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3741[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3741 || yy2arr3741 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3763 := z.DecBinary()
	_ = yym3763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3764 := r.ContainerType()
		if yyct3764 == codecSelferValueTypeMap1234 {
			yyl3764 := r.ReadMapStart()
			if yyl3764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3764, d)
			}
		} else if yyct3764 == codecSelferValueTypeArray1234 {
			yyl3764 := r.ReadArrayStart()
			if yyl3764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3765Slc
	var yyhl3765 bool = l >= 0
	for yyj3765 := 0; ; yyj3765++ {
		if yyhl3765 {
			if yyj3765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3765Slc = r.DecodeBytes(yys3765Slc, true, true)
		yys3765 := string(yys3765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3765 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3765)
		} // end switch yys3765
	} // end for yyj3765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3773 int
	var yyb3773 bool
	var yyhl3773 bool = l >= 0
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3773++
		if yyhl3773 {
			yyb3773 = yyj3773 > l
		} else {
			yyb3773 = r.CheckBreak()
		}
		if yyb3773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3781 := z.EncBinary()
		_ = yym3781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3782 := !z.EncBinary()
			yy2arr3782 := z.EncBasicHandle().StructToArray
			var yyq3782 [8]bool
			_, _, _ = yysep3782, yyq3782, yy2arr3782
			const yyr3782 bool = false
			yyq3782[0] = x.Kind != ""
			yyq3782[1] = x.APIVersion != ""
			var yynn3782 int
			if yyr3782 || yy2arr3782 {
				r.EncodeArrayStart(8)
			} else {
				yynn3782 = 6
				for _, b := range yyq3782 {
					if b {
						yynn3782++
					}
				}
				r.EncodeMapStart(yynn3782)
				yynn3782 = 0
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3782[0] {
					yym3784 := z.EncBinary()
					_ = yym3784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3782[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3785 := z.EncBinary()
					_ = yym3785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3782[1] {
					yym3787 := z.EncBinary()
					_ = yym3787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3782[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3788 := z.EncBinary()
					_ = yym3788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3790 := z.EncBinary()
				_ = yym3790
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3791 := z.EncBinary()
				_ = yym3791
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3793 := z.EncBinary()
				_ = yym3793
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3794 := z.EncBinary()
				_ = yym3794
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3796 := z.EncBinary()
				_ = yym3796
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3797 := z.EncBinary()
				_ = yym3797
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3799 := z.EncBinary()
				_ = yym3799
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3800 := z.EncBinary()
				_ = yym3800
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3802 := z.EncBinary()
				_ = yym3802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3803 := z.EncBinary()
				_ = yym3803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3782 || yy2arr3782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3807 := z.DecBinary()
	_ = yym3807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3808 := r.ContainerType()
		if yyct3808 == codecSelferValueTypeMap1234 {
			yyl3808 := r.ReadMapStart()
			if yyl3808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3808, d)
			}
		} else if yyct3808 == codecSelferValueTypeArray1234 {
			yyl3808 := r.ReadArrayStart()
			if yyl3808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3809Slc
	var yyhl3809 bool = l >= 0
	for yyj3809 := 0; ; yyj3809++ {
		if yyhl3809 {
			if yyj3809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3809Slc = r.DecodeBytes(yys3809Slc, true, true)
		yys3809 := string(yys3809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3809 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3817 := &x.Command
				yym3818 := z.DecBinary()
				_ = yym3818
				if false {
				} else {
					z.F.DecSliceStringX(yyv3817, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3809)
		} // end switch yys3809
	} // end for yyj3809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3819 int
	var yyb3819 bool
	var yyhl3819 bool = l >= 0
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3827 := &x.Command
		yym3828 := z.DecBinary()
		_ = yym3828
		if false {
		} else {
			z.F.DecSliceStringX(yyv3827, false, d)
		}
	}
	for {
		yyj3819++
		if yyhl3819 {
			yyb3819 = yyj3819 > l
		} else {
			yyb3819 = r.CheckBreak()
		}
		if yyb3819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3829 := z.EncBinary()
		_ = yym3829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3830 := !z.EncBinary()
			yy2arr3830 := z.EncBasicHandle().StructToArray
			var yyq3830 [3]bool
			_, _, _ = yysep3830, yyq3830, yy2arr3830
			const yyr3830 bool = false
			yyq3830[0] = x.Kind != ""
			yyq3830[1] = x.APIVersion != ""
			var yynn3830 int
			if yyr3830 || yy2arr3830 {
				r.EncodeArrayStart(3)
			} else {
				yynn3830 = 1
				for _, b := range yyq3830 {
					if b {
						yynn3830++
					}
				}
				r.EncodeMapStart(yynn3830)
				yynn3830 = 0
			}
			if yyr3830 || yy2arr3830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3830[0] {
					yym3832 := z.EncBinary()
					_ = yym3832
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3830[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3830 || yy2arr3830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3830[1] {
					yym3835 := z.EncBinary()
					_ = yym3835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3830[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3836 := z.EncBinary()
					_ = yym3836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3830 || yy2arr3830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3838 := z.EncBinary()
				_ = yym3838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3839 := z.EncBinary()
				_ = yym3839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3830 || yy2arr3830 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3840 := z.DecBinary()
	_ = yym3840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3841 := r.ContainerType()
		if yyct3841 == codecSelferValueTypeMap1234 {
			yyl3841 := r.ReadMapStart()
			if yyl3841 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3841, d)
			}
		} else if yyct3841 == codecSelferValueTypeArray1234 {
			yyl3841 := r.ReadArrayStart()
			if yyl3841 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3841, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3842Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3842Slc
	var yyhl3842 bool = l >= 0
	for yyj3842 := 0; ; yyj3842++ {
		if yyhl3842 {
			if yyj3842 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3842Slc = r.DecodeBytes(yys3842Slc, true, true)
		yys3842 := string(yys3842Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3842 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3842)
		} // end switch yys3842
	} // end for yyj3842
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3846 int
	var yyb3846 bool
	var yyhl3846 bool = l >= 0
	yyj3846++
	if yyhl3846 {
		yyb3846 = yyj3846 > l
	} else {
		yyb3846 = r.CheckBreak()
	}
	if yyb3846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3846++
	if yyhl3846 {
		yyb3846 = yyj3846 > l
	} else {
		yyb3846 = r.CheckBreak()
	}
	if yyb3846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3846++
	if yyhl3846 {
		yyb3846 = yyj3846 > l
	} else {
		yyb3846 = r.CheckBreak()
	}
	if yyb3846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3846++
		if yyhl3846 {
			yyb3846 = yyj3846 > l
		} else {
			yyb3846 = r.CheckBreak()
		}
		if yyb3846 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3846-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3850 := z.EncBinary()
		_ = yym3850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3851 := !z.EncBinary()
			yy2arr3851 := z.EncBasicHandle().StructToArray
			var yyq3851 [3]bool
			_, _, _ = yysep3851, yyq3851, yy2arr3851
			const yyr3851 bool = false
			yyq3851[0] = x.Kind != ""
			yyq3851[1] = x.APIVersion != ""
			var yynn3851 int
			if yyr3851 || yy2arr3851 {
				r.EncodeArrayStart(3)
			} else {
				yynn3851 = 1
				for _, b := range yyq3851 {
					if b {
						yynn3851++
					}
				}
				r.EncodeMapStart(yynn3851)
				yynn3851 = 0
			}
			if yyr3851 || yy2arr3851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3851[0] {
					yym3853 := z.EncBinary()
					_ = yym3853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3851[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3851 || yy2arr3851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3851[1] {
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3851[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3851 || yy2arr3851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3859 := z.EncBinary()
				_ = yym3859
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3860 := z.EncBinary()
				_ = yym3860
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3851 || yy2arr3851 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3861 := z.DecBinary()
	_ = yym3861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3862 := r.ContainerType()
		if yyct3862 == codecSelferValueTypeMap1234 {
			yyl3862 := r.ReadMapStart()
			if yyl3862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3862, d)
			}
		} else if yyct3862 == codecSelferValueTypeArray1234 {
			yyl3862 := r.ReadArrayStart()
			if yyl3862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3863Slc
	var yyhl3863 bool = l >= 0
	for yyj3863 := 0; ; yyj3863++ {
		if yyhl3863 {
			if yyj3863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3863Slc = r.DecodeBytes(yys3863Slc, true, true)
		yys3863 := string(yys3863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3863 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3863)
		} // end switch yys3863
	} // end for yyj3863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3867 int
	var yyb3867 bool
	var yyhl3867 bool = l >= 0
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3867++
	if yyhl3867 {
		yyb3867 = yyj3867 > l
	} else {
		yyb3867 = r.CheckBreak()
	}
	if yyb3867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3867++
		if yyhl3867 {
			yyb3867 = yyj3867 > l
		} else {
			yyb3867 = r.CheckBreak()
		}
		if yyb3867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3871 := z.EncBinary()
		_ = yym3871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3872 := !z.EncBinary()
			yy2arr3872 := z.EncBasicHandle().StructToArray
			var yyq3872 [3]bool
			_, _, _ = yysep3872, yyq3872, yy2arr3872
			const yyr3872 bool = false
			yyq3872[0] = x.Kind != ""
			yyq3872[1] = x.APIVersion != ""
			var yynn3872 int
			if yyr3872 || yy2arr3872 {
				r.EncodeArrayStart(3)
			} else {
				yynn3872 = 1
				for _, b := range yyq3872 {
					if b {
						yynn3872++
					}
				}
				r.EncodeMapStart(yynn3872)
				yynn3872 = 0
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3872[0] {
					yym3874 := z.EncBinary()
					_ = yym3874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3872[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3875 := z.EncBinary()
					_ = yym3875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3872[1] {
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3872[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3878 := z.EncBinary()
					_ = yym3878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3880 := z.EncBinary()
				_ = yym3880
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3881 := z.EncBinary()
				_ = yym3881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3872 || yy2arr3872 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3882 := z.DecBinary()
	_ = yym3882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3883 := r.ContainerType()
		if yyct3883 == codecSelferValueTypeMap1234 {
			yyl3883 := r.ReadMapStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3883, d)
			}
		} else if yyct3883 == codecSelferValueTypeArray1234 {
			yyl3883 := r.ReadArrayStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3884Slc
	var yyhl3884 bool = l >= 0
	for yyj3884 := 0; ; yyj3884++ {
		if yyhl3884 {
			if yyj3884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3884Slc = r.DecodeBytes(yys3884Slc, true, true)
		yys3884 := string(yys3884Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3884 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3884)
		} // end switch yys3884
	} // end for yyj3884
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3888 int
	var yyb3888 bool
	var yyhl3888 bool = l >= 0
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3888++
	if yyhl3888 {
		yyb3888 = yyj3888 > l
	} else {
		yyb3888 = r.CheckBreak()
	}
	if yyb3888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3888++
		if yyhl3888 {
			yyb3888 = yyj3888 > l
		} else {
			yyb3888 = r.CheckBreak()
		}
		if yyb3888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3892 := z.EncBinary()
		_ = yym3892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3893 := !z.EncBinary()
			yy2arr3893 := z.EncBasicHandle().StructToArray
			var yyq3893 [5]bool
			_, _, _ = yysep3893, yyq3893, yy2arr3893
			const yyr3893 bool = false
			yyq3893[4] = x.Controller != nil
			var yynn3893 int
			if yyr3893 || yy2arr3893 {
				r.EncodeArrayStart(5)
			} else {
				yynn3893 = 4
				for _, b := range yyq3893 {
					if b {
						yynn3893++
					}
				}
				r.EncodeMapStart(yynn3893)
				yynn3893 = 0
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3895 := z.EncBinary()
				_ = yym3895
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3896 := z.EncBinary()
				_ = yym3896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3898 := z.EncBinary()
				_ = yym3898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3899 := z.EncBinary()
				_ = yym3899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3901 := z.EncBinary()
				_ = yym3901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3902 := z.EncBinary()
				_ = yym3902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3904 := z.EncBinary()
				_ = yym3904
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3905 := z.EncBinary()
				_ = yym3905
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3893[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3907 := *x.Controller
						yym3908 := z.EncBinary()
						_ = yym3908
						if false {
						} else {
							r.EncodeBool(bool(yy3907))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3893[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3909 := *x.Controller
						yym3910 := z.EncBinary()
						_ = yym3910
						if false {
						} else {
							r.EncodeBool(bool(yy3909))
						}
					}
				}
			}
			if yyr3893 || yy2arr3893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3911 := z.DecBinary()
	_ = yym3911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3912 := r.ContainerType()
		if yyct3912 == codecSelferValueTypeMap1234 {
			yyl3912 := r.ReadMapStart()
			if yyl3912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3912, d)
			}
		} else if yyct3912 == codecSelferValueTypeArray1234 {
			yyl3912 := r.ReadArrayStart()
			if yyl3912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3913Slc
	var yyhl3913 bool = l >= 0
	for yyj3913 := 0; ; yyj3913++ {
		if yyhl3913 {
			if yyj3913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3913Slc = r.DecodeBytes(yys3913Slc, true, true)
		yys3913 := string(yys3913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3913 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3919 := z.DecBinary()
				_ = yym3919
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3913)
		} // end switch yys3913
	} // end for yyj3913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3920 int
	var yyb3920 bool
	var yyhl3920 bool = l >= 0
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3920++
	if yyhl3920 {
		yyb3920 = yyj3920 > l
	} else {
		yyb3920 = r.CheckBreak()
	}
	if yyb3920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3926 := z.DecBinary()
		_ = yym3926
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3920++
		if yyhl3920 {
			yyb3920 = yyj3920 > l
		} else {
			yyb3920 = r.CheckBreak()
		}
		if yyb3920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3927 := z.EncBinary()
		_ = yym3927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3928 := !z.EncBinary()
			yy2arr3928 := z.EncBasicHandle().StructToArray
			var yyq3928 [7]bool
			_, _, _ = yysep3928, yyq3928, yy2arr3928
			const yyr3928 bool = false
			yyq3928[0] = x.Kind != ""
			yyq3928[1] = x.Namespace != ""
			yyq3928[2] = x.Name != ""
			yyq3928[3] = x.UID != ""
			yyq3928[4] = x.APIVersion != ""
			yyq3928[5] = x.ResourceVersion != ""
			yyq3928[6] = x.FieldPath != ""
			var yynn3928 int
			if yyr3928 || yy2arr3928 {
				r.EncodeArrayStart(7)
			} else {
				yynn3928 = 0
				for _, b := range yyq3928 {
					if b {
						yynn3928++
					}
				}
				r.EncodeMapStart(yynn3928)
				yynn3928 = 0
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[0] {
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3931 := z.EncBinary()
					_ = yym3931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[1] {
					yym3933 := z.EncBinary()
					_ = yym3933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3934 := z.EncBinary()
					_ = yym3934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[2] {
					yym3936 := z.EncBinary()
					_ = yym3936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3937 := z.EncBinary()
					_ = yym3937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[3] {
					yym3939 := z.EncBinary()
					_ = yym3939
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3940 := z.EncBinary()
					_ = yym3940
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[4] {
					yym3942 := z.EncBinary()
					_ = yym3942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[5] {
					yym3945 := z.EncBinary()
					_ = yym3945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3928[6] {
					yym3948 := z.EncBinary()
					_ = yym3948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3928[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3949 := z.EncBinary()
					_ = yym3949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3928 || yy2arr3928 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3950 := z.DecBinary()
	_ = yym3950
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3951 := r.ContainerType()
		if yyct3951 == codecSelferValueTypeMap1234 {
			yyl3951 := r.ReadMapStart()
			if yyl3951 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3951, d)
			}
		} else if yyct3951 == codecSelferValueTypeArray1234 {
			yyl3951 := r.ReadArrayStart()
			if yyl3951 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3951, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3952Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3952Slc
	var yyhl3952 bool = l >= 0
	for yyj3952 := 0; ; yyj3952++ {
		if yyhl3952 {
			if yyj3952 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3952Slc = r.DecodeBytes(yys3952Slc, true, true)
		yys3952 := string(yys3952Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3952 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3952)
		} // end switch yys3952
	} // end for yyj3952
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3960 int
	var yyb3960 bool
	var yyhl3960 bool = l >= 0
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3960++
	if yyhl3960 {
		yyb3960 = yyj3960 > l
	} else {
		yyb3960 = r.CheckBreak()
	}
	if yyb3960 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3960++
		if yyhl3960 {
			yyb3960 = yyj3960 > l
		} else {
			yyb3960 = r.CheckBreak()
		}
		if yyb3960 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3960-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3968 := z.EncBinary()
		_ = yym3968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3969 := !z.EncBinary()
			yy2arr3969 := z.EncBasicHandle().StructToArray
			var yyq3969 [1]bool
			_, _, _ = yysep3969, yyq3969, yy2arr3969
			const yyr3969 bool = false
			var yynn3969 int
			if yyr3969 || yy2arr3969 {
				r.EncodeArrayStart(1)
			} else {
				yynn3969 = 1
				for _, b := range yyq3969 {
					if b {
						yynn3969++
					}
				}
				r.EncodeMapStart(yynn3969)
				yynn3969 = 0
			}
			if yyr3969 || yy2arr3969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3971 := z.EncBinary()
				_ = yym3971
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3972 := z.EncBinary()
				_ = yym3972
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3969 || yy2arr3969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3973 := z.DecBinary()
	_ = yym3973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3974 := r.ContainerType()
		if yyct3974 == codecSelferValueTypeMap1234 {
			yyl3974 := r.ReadMapStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3974, d)
			}
		} else if yyct3974 == codecSelferValueTypeArray1234 {
			yyl3974 := r.ReadArrayStart()
			if yyl3974 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3974, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3975Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3975Slc
	var yyhl3975 bool = l >= 0
	for yyj3975 := 0; ; yyj3975++ {
		if yyhl3975 {
			if yyj3975 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3975Slc = r.DecodeBytes(yys3975Slc, true, true)
		yys3975 := string(yys3975Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3975 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3975)
		} // end switch yys3975
	} // end for yyj3975
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3977 int
	var yyb3977 bool
	var yyhl3977 bool = l >= 0
	yyj3977++
	if yyhl3977 {
		yyb3977 = yyj3977 > l
	} else {
		yyb3977 = r.CheckBreak()
	}
	if yyb3977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3977++
		if yyhl3977 {
			yyb3977 = yyj3977 > l
		} else {
			yyb3977 = r.CheckBreak()
		}
		if yyb3977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3979 := z.EncBinary()
		_ = yym3979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3980 := !z.EncBinary()
			yy2arr3980 := z.EncBasicHandle().StructToArray
			var yyq3980 [3]bool
			_, _, _ = yysep3980, yyq3980, yy2arr3980
			const yyr3980 bool = false
			yyq3980[0] = x.Kind != ""
			yyq3980[1] = x.APIVersion != ""
			yyq3980[2] = true
			var yynn3980 int
			if yyr3980 || yy2arr3980 {
				r.EncodeArrayStart(3)
			} else {
				yynn3980 = 0
				for _, b := range yyq3980 {
					if b {
						yynn3980++
					}
				}
				r.EncodeMapStart(yynn3980)
				yynn3980 = 0
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[0] {
					yym3982 := z.EncBinary()
					_ = yym3982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3983 := z.EncBinary()
					_ = yym3983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[1] {
					yym3985 := z.EncBinary()
					_ = yym3985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3980[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3986 := z.EncBinary()
					_ = yym3986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3980[2] {
					yy3988 := &x.Reference
					yy3988.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3980[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3989 := &x.Reference
					yy3989.CodecEncodeSelf(e)
				}
			}
			if yyr3980 || yy2arr3980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3990 := z.DecBinary()
	_ = yym3990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3991 := r.ContainerType()
		if yyct3991 == codecSelferValueTypeMap1234 {
			yyl3991 := r.ReadMapStart()
			if yyl3991 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3991, d)
			}
		} else if yyct3991 == codecSelferValueTypeArray1234 {
			yyl3991 := r.ReadArrayStart()
			if yyl3991 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3992Slc
	var yyhl3992 bool = l >= 0
	for yyj3992 := 0; ; yyj3992++ {
		if yyhl3992 {
			if yyj3992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3992Slc = r.DecodeBytes(yys3992Slc, true, true)
		yys3992 := string(yys3992Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3992 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3995 := &x.Reference
				yyv3995.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3992)
		} // end switch yys3992
	} // end for yyj3992
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3996 int
	var yyb3996 bool
	var yyhl3996 bool = l >= 0
	yyj3996++
	if yyhl3996 {
		yyb3996 = yyj3996 > l
	} else {
		yyb3996 = r.CheckBreak()
	}
	if yyb3996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3996++
	if yyhl3996 {
		yyb3996 = yyj3996 > l
	} else {
		yyb3996 = r.CheckBreak()
	}
	if yyb3996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3996++
	if yyhl3996 {
		yyb3996 = yyj3996 > l
	} else {
		yyb3996 = r.CheckBreak()
	}
	if yyb3996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3999 := &x.Reference
		yyv3999.CodecDecodeSelf(d)
	}
	for {
		yyj3996++
		if yyhl3996 {
			yyb3996 = yyj3996 > l
		} else {
			yyb3996 = r.CheckBreak()
		}
		if yyb3996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4000 := z.EncBinary()
		_ = yym4000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4001 := !z.EncBinary()
			yy2arr4001 := z.EncBasicHandle().StructToArray
			var yyq4001 [2]bool
			_, _, _ = yysep4001, yyq4001, yy2arr4001
			const yyr4001 bool = false
			yyq4001[0] = x.Component != ""
			yyq4001[1] = x.Host != ""
			var yynn4001 int
			if yyr4001 || yy2arr4001 {
				r.EncodeArrayStart(2)
			} else {
				yynn4001 = 0
				for _, b := range yyq4001 {
					if b {
						yynn4001++
					}
				}
				r.EncodeMapStart(yynn4001)
				yynn4001 = 0
			}
			if yyr4001 || yy2arr4001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4001[0] {
					yym4003 := z.EncBinary()
					_ = yym4003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4001[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4004 := z.EncBinary()
					_ = yym4004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr4001 || yy2arr4001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4001[1] {
					yym4006 := z.EncBinary()
					_ = yym4006
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4001[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4007 := z.EncBinary()
					_ = yym4007
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr4001 || yy2arr4001 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4008 := z.DecBinary()
	_ = yym4008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4009 := r.ContainerType()
		if yyct4009 == codecSelferValueTypeMap1234 {
			yyl4009 := r.ReadMapStart()
			if yyl4009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4009, d)
			}
		} else if yyct4009 == codecSelferValueTypeArray1234 {
			yyl4009 := r.ReadArrayStart()
			if yyl4009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4010Slc
	var yyhl4010 bool = l >= 0
	for yyj4010 := 0; ; yyj4010++ {
		if yyhl4010 {
			if yyj4010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4010Slc = r.DecodeBytes(yys4010Slc, true, true)
		yys4010 := string(yys4010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4010 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4010)
		} // end switch yys4010
	} // end for yyj4010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4013 int
	var yyb4013 bool
	var yyhl4013 bool = l >= 0
	yyj4013++
	if yyhl4013 {
		yyb4013 = yyj4013 > l
	} else {
		yyb4013 = r.CheckBreak()
	}
	if yyb4013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj4013++
	if yyhl4013 {
		yyb4013 = yyj4013 > l
	} else {
		yyb4013 = r.CheckBreak()
	}
	if yyb4013 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj4013++
		if yyhl4013 {
			yyb4013 = yyj4013 > l
		} else {
			yyb4013 = r.CheckBreak()
		}
		if yyb4013 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4013-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4016 := z.EncBinary()
		_ = yym4016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4017 := !z.EncBinary()
			yy2arr4017 := z.EncBasicHandle().StructToArray
			var yyq4017 [11]bool
			_, _, _ = yysep4017, yyq4017, yy2arr4017
			const yyr4017 bool = false
			yyq4017[0] = x.Kind != ""
			yyq4017[1] = x.APIVersion != ""
			yyq4017[2] = true
			yyq4017[3] = true
			yyq4017[4] = x.Reason != ""
			yyq4017[5] = x.Message != ""
			yyq4017[6] = true
			yyq4017[7] = true
			yyq4017[8] = true
			yyq4017[9] = x.Count != 0
			yyq4017[10] = x.Type != ""
			var yynn4017 int
			if yyr4017 || yy2arr4017 {
				r.EncodeArrayStart(11)
			} else {
				yynn4017 = 0
				for _, b := range yyq4017 {
					if b {
						yynn4017++
					}
				}
				r.EncodeMapStart(yynn4017)
				yynn4017 = 0
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[0] {
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4017[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4020 := z.EncBinary()
					_ = yym4020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[1] {
					yym4022 := z.EncBinary()
					_ = yym4022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4017[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[2] {
					yy4025 := &x.ObjectMeta
					yy4025.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4026 := &x.ObjectMeta
					yy4026.CodecEncodeSelf(e)
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[3] {
					yy4028 := &x.InvolvedObject
					yy4028.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4029 := &x.InvolvedObject
					yy4029.CodecEncodeSelf(e)
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[4] {
					yym4031 := z.EncBinary()
					_ = yym4031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4017[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4032 := z.EncBinary()
					_ = yym4032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[5] {
					yym4034 := z.EncBinary()
					_ = yym4034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4017[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4035 := z.EncBinary()
					_ = yym4035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[6] {
					yy4037 := &x.Source
					yy4037.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4017[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4038 := &x.Source
					yy4038.CodecEncodeSelf(e)
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[7] {
					yy4040 := &x.FirstTimestamp
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4040) {
					} else if yym4041 {
						z.EncBinaryMarshal(yy4040)
					} else if !yym4041 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4040)
					} else {
						z.EncFallback(yy4040)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4017[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4042 := &x.FirstTimestamp
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4042) {
					} else if yym4043 {
						z.EncBinaryMarshal(yy4042)
					} else if !yym4043 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4042)
					} else {
						z.EncFallback(yy4042)
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[8] {
					yy4045 := &x.LastTimestamp
					yym4046 := z.EncBinary()
					_ = yym4046
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4045) {
					} else if yym4046 {
						z.EncBinaryMarshal(yy4045)
					} else if !yym4046 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4045)
					} else {
						z.EncFallback(yy4045)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4017[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4047 := &x.LastTimestamp
					yym4048 := z.EncBinary()
					_ = yym4048
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4047) {
					} else if yym4048 {
						z.EncBinaryMarshal(yy4047)
					} else if !yym4048 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy4047)
					} else {
						z.EncFallback(yy4047)
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[9] {
					yym4050 := z.EncBinary()
					_ = yym4050
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq4017[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4051 := z.EncBinary()
					_ = yym4051
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4017[10] {
					yym4053 := z.EncBinary()
					_ = yym4053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4017[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4054 := z.EncBinary()
					_ = yym4054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4017 || yy2arr4017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4055 := z.DecBinary()
	_ = yym4055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4056 := r.ContainerType()
		if yyct4056 == codecSelferValueTypeMap1234 {
			yyl4056 := r.ReadMapStart()
			if yyl4056 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4056, d)
			}
		} else if yyct4056 == codecSelferValueTypeArray1234 {
			yyl4056 := r.ReadArrayStart()
			if yyl4056 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4056, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4057Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4057Slc
	var yyhl4057 bool = l >= 0
	for yyj4057 := 0; ; yyj4057++ {
		if yyhl4057 {
			if yyj4057 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4057Slc = r.DecodeBytes(yys4057Slc, true, true)
		yys4057 := string(yys4057Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4057 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4060 := &x.ObjectMeta
				yyv4060.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv4061 := &x.InvolvedObject
				yyv4061.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv4064 := &x.Source
				yyv4064.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4065 := &x.FirstTimestamp
				yym4066 := z.DecBinary()
				_ = yym4066
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4065) {
				} else if yym4066 {
					z.DecBinaryUnmarshal(yyv4065)
				} else if !yym4066 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4065)
				} else {
					z.DecFallback(yyv4065, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv4067 := &x.LastTimestamp
				yym4068 := z.DecBinary()
				_ = yym4068
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4067) {
				} else if yym4068 {
					z.DecBinaryUnmarshal(yyv4067)
				} else if !yym4068 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4067)
				} else {
					z.DecFallback(yyv4067, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4057)
		} // end switch yys4057
	} // end for yyj4057
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4071 int
	var yyb4071 bool
	var yyhl4071 bool = l >= 0
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4074 := &x.ObjectMeta
		yyv4074.CodecDecodeSelf(d)
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv4075 := &x.InvolvedObject
		yyv4075.CodecDecodeSelf(d)
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv4078 := &x.Source
		yyv4078.CodecDecodeSelf(d)
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4079 := &x.FirstTimestamp
		yym4080 := z.DecBinary()
		_ = yym4080
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4079) {
		} else if yym4080 {
			z.DecBinaryUnmarshal(yyv4079)
		} else if !yym4080 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4079)
		} else {
			z.DecFallback(yyv4079, false)
		}
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv4081 := &x.LastTimestamp
		yym4082 := z.DecBinary()
		_ = yym4082
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4081) {
		} else if yym4082 {
			z.DecBinaryUnmarshal(yyv4081)
		} else if !yym4082 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv4081)
		} else {
			z.DecFallback(yyv4081, false)
		}
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj4071++
	if yyhl4071 {
		yyb4071 = yyj4071 > l
	} else {
		yyb4071 = r.CheckBreak()
	}
	if yyb4071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj4071++
		if yyhl4071 {
			yyb4071 = yyj4071 > l
		} else {
			yyb4071 = r.CheckBreak()
		}
		if yyb4071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4085 := z.EncBinary()
		_ = yym4085
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4086 := !z.EncBinary()
			yy2arr4086 := z.EncBasicHandle().StructToArray
			var yyq4086 [4]bool
			_, _, _ = yysep4086, yyq4086, yy2arr4086
			const yyr4086 bool = false
			yyq4086[0] = x.Kind != ""
			yyq4086[1] = x.APIVersion != ""
			yyq4086[2] = true
			var yynn4086 int
			if yyr4086 || yy2arr4086 {
				r.EncodeArrayStart(4)
			} else {
				yynn4086 = 1
				for _, b := range yyq4086 {
					if b {
						yynn4086++
					}
				}
				r.EncodeMapStart(yynn4086)
				yynn4086 = 0
			}
			if yyr4086 || yy2arr4086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4086[0] {
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4086[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4089 := z.EncBinary()
					_ = yym4089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4086 || yy2arr4086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4086[1] {
					yym4091 := z.EncBinary()
					_ = yym4091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4086[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4092 := z.EncBinary()
					_ = yym4092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4086 || yy2arr4086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4086[2] {
					yy4094 := &x.ListMeta
					yym4095 := z.EncBinary()
					_ = yym4095
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4094) {
					} else {
						z.EncFallback(yy4094)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4086[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4096 := &x.ListMeta
					yym4097 := z.EncBinary()
					_ = yym4097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4096) {
					} else {
						z.EncFallback(yy4096)
					}
				}
			}
			if yyr4086 || yy2arr4086 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4099 := z.EncBinary()
					_ = yym4099
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4100 := z.EncBinary()
					_ = yym4100
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr4086 || yy2arr4086 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4101 := z.DecBinary()
	_ = yym4101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4102 := r.ContainerType()
		if yyct4102 == codecSelferValueTypeMap1234 {
			yyl4102 := r.ReadMapStart()
			if yyl4102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4102, d)
			}
		} else if yyct4102 == codecSelferValueTypeArray1234 {
			yyl4102 := r.ReadArrayStart()
			if yyl4102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4103Slc
	var yyhl4103 bool = l >= 0
	for yyj4103 := 0; ; yyj4103++ {
		if yyhl4103 {
			if yyj4103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4103Slc = r.DecodeBytes(yys4103Slc, true, true)
		yys4103 := string(yys4103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4103 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4106 := &x.ListMeta
				yym4107 := z.DecBinary()
				_ = yym4107
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4106) {
				} else {
					z.DecFallback(yyv4106, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4108 := &x.Items
				yym4109 := z.DecBinary()
				_ = yym4109
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv4108), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4103)
		} // end switch yys4103
	} // end for yyj4103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4110 int
	var yyb4110 bool
	var yyhl4110 bool = l >= 0
	yyj4110++
	if yyhl4110 {
		yyb4110 = yyj4110 > l
	} else {
		yyb4110 = r.CheckBreak()
	}
	if yyb4110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4110++
	if yyhl4110 {
		yyb4110 = yyj4110 > l
	} else {
		yyb4110 = r.CheckBreak()
	}
	if yyb4110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4110++
	if yyhl4110 {
		yyb4110 = yyj4110 > l
	} else {
		yyb4110 = r.CheckBreak()
	}
	if yyb4110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4113 := &x.ListMeta
		yym4114 := z.DecBinary()
		_ = yym4114
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4113) {
		} else {
			z.DecFallback(yyv4113, false)
		}
	}
	yyj4110++
	if yyhl4110 {
		yyb4110 = yyj4110 > l
	} else {
		yyb4110 = r.CheckBreak()
	}
	if yyb4110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4115 := &x.Items
		yym4116 := z.DecBinary()
		_ = yym4116
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv4115), d)
		}
	}
	for {
		yyj4110++
		if yyhl4110 {
			yyb4110 = yyj4110 > l
		} else {
			yyb4110 = r.CheckBreak()
		}
		if yyb4110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4117 := z.EncBinary()
		_ = yym4117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4118 := !z.EncBinary()
			yy2arr4118 := z.EncBasicHandle().StructToArray
			var yyq4118 [4]bool
			_, _, _ = yysep4118, yyq4118, yy2arr4118
			const yyr4118 bool = false
			yyq4118[0] = x.Kind != ""
			yyq4118[1] = x.APIVersion != ""
			yyq4118[2] = true
			var yynn4118 int
			if yyr4118 || yy2arr4118 {
				r.EncodeArrayStart(4)
			} else {
				yynn4118 = 1
				for _, b := range yyq4118 {
					if b {
						yynn4118++
					}
				}
				r.EncodeMapStart(yynn4118)
				yynn4118 = 0
			}
			if yyr4118 || yy2arr4118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4118[0] {
					yym4120 := z.EncBinary()
					_ = yym4120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4121 := z.EncBinary()
					_ = yym4121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4118 || yy2arr4118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4118[1] {
					yym4123 := z.EncBinary()
					_ = yym4123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4124 := z.EncBinary()
					_ = yym4124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4118 || yy2arr4118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4118[2] {
					yy4126 := &x.ListMeta
					yym4127 := z.EncBinary()
					_ = yym4127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4126) {
					} else {
						z.EncFallback(yy4126)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4128 := &x.ListMeta
					yym4129 := z.EncBinary()
					_ = yym4129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4128) {
					} else {
						z.EncFallback(yy4128)
					}
				}
			}
			if yyr4118 || yy2arr4118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4131 := z.EncBinary()
					_ = yym4131
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4132 := z.EncBinary()
					_ = yym4132
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr4118 || yy2arr4118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4133 := z.DecBinary()
	_ = yym4133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4134 := r.ContainerType()
		if yyct4134 == codecSelferValueTypeMap1234 {
			yyl4134 := r.ReadMapStart()
			if yyl4134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4134, d)
			}
		} else if yyct4134 == codecSelferValueTypeArray1234 {
			yyl4134 := r.ReadArrayStart()
			if yyl4134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4135Slc
	var yyhl4135 bool = l >= 0
	for yyj4135 := 0; ; yyj4135++ {
		if yyhl4135 {
			if yyj4135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4135Slc = r.DecodeBytes(yys4135Slc, true, true)
		yys4135 := string(yys4135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4135 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4138 := &x.ListMeta
				yym4139 := z.DecBinary()
				_ = yym4139
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4138) {
				} else {
					z.DecFallback(yyv4138, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4140 := &x.Items
				yym4141 := z.DecBinary()
				_ = yym4141
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4135)
		} // end switch yys4135
	} // end for yyj4135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4142 int
	var yyb4142 bool
	var yyhl4142 bool = l >= 0
	yyj4142++
	if yyhl4142 {
		yyb4142 = yyj4142 > l
	} else {
		yyb4142 = r.CheckBreak()
	}
	if yyb4142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4142++
	if yyhl4142 {
		yyb4142 = yyj4142 > l
	} else {
		yyb4142 = r.CheckBreak()
	}
	if yyb4142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4142++
	if yyhl4142 {
		yyb4142 = yyj4142 > l
	} else {
		yyb4142 = r.CheckBreak()
	}
	if yyb4142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4145 := &x.ListMeta
		yym4146 := z.DecBinary()
		_ = yym4146
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4145) {
		} else {
			z.DecFallback(yyv4145, false)
		}
	}
	yyj4142++
	if yyhl4142 {
		yyb4142 = yyj4142 > l
	} else {
		yyb4142 = r.CheckBreak()
	}
	if yyb4142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4147 := &x.Items
		yym4148 := z.DecBinary()
		_ = yym4148
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv4147), d)
		}
	}
	for {
		yyj4142++
		if yyhl4142 {
			yyb4142 = yyj4142 > l
		} else {
			yyb4142 = r.CheckBreak()
		}
		if yyb4142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4149 := z.EncBinary()
	_ = yym4149
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4150 := z.DecBinary()
	_ = yym4150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4151 := z.EncBinary()
		_ = yym4151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4152 := !z.EncBinary()
			yy2arr4152 := z.EncBasicHandle().StructToArray
			var yyq4152 [6]bool
			_, _, _ = yysep4152, yyq4152, yy2arr4152
			const yyr4152 bool = false
			yyq4152[0] = x.Type != ""
			yyq4152[1] = len(x.Max) != 0
			yyq4152[2] = len(x.Min) != 0
			yyq4152[3] = len(x.Default) != 0
			yyq4152[4] = len(x.DefaultRequest) != 0
			yyq4152[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn4152 int
			if yyr4152 || yy2arr4152 {
				r.EncodeArrayStart(6)
			} else {
				yynn4152 = 0
				for _, b := range yyq4152 {
					if b {
						yynn4152++
					}
				}
				r.EncodeMapStart(yynn4152)
				yynn4152 = 0
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4152[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4152[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4152[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4152[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4152[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4152[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4152[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4152 || yy2arr4152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4159 := z.DecBinary()
	_ = yym4159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4160 := r.ContainerType()
		if yyct4160 == codecSelferValueTypeMap1234 {
			yyl4160 := r.ReadMapStart()
			if yyl4160 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4160, d)
			}
		} else if yyct4160 == codecSelferValueTypeArray1234 {
			yyl4160 := r.ReadArrayStart()
			if yyl4160 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4161Slc
	var yyhl4161 bool = l >= 0
	for yyj4161 := 0; ; yyj4161++ {
		if yyhl4161 {
			if yyj4161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4161Slc = r.DecodeBytes(yys4161Slc, true, true)
		yys4161 := string(yys4161Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4161 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv4163 := &x.Max
				yyv4163.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv4164 := &x.Min
				yyv4164.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv4165 := &x.Default
				yyv4165.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv4166 := &x.DefaultRequest
				yyv4166.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv4167 := &x.MaxLimitRequestRatio
				yyv4167.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4161)
		} // end switch yys4161
	} // end for yyj4161
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4168 int
	var yyb4168 bool
	var yyhl4168 bool = l >= 0
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv4170 := &x.Max
		yyv4170.CodecDecodeSelf(d)
	}
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv4171 := &x.Min
		yyv4171.CodecDecodeSelf(d)
	}
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv4172 := &x.Default
		yyv4172.CodecDecodeSelf(d)
	}
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv4173 := &x.DefaultRequest
		yyv4173.CodecDecodeSelf(d)
	}
	yyj4168++
	if yyhl4168 {
		yyb4168 = yyj4168 > l
	} else {
		yyb4168 = r.CheckBreak()
	}
	if yyb4168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv4174 := &x.MaxLimitRequestRatio
		yyv4174.CodecDecodeSelf(d)
	}
	for {
		yyj4168++
		if yyhl4168 {
			yyb4168 = yyj4168 > l
		} else {
			yyb4168 = r.CheckBreak()
		}
		if yyb4168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4175 := z.EncBinary()
		_ = yym4175
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4176 := !z.EncBinary()
			yy2arr4176 := z.EncBasicHandle().StructToArray
			var yyq4176 [1]bool
			_, _, _ = yysep4176, yyq4176, yy2arr4176
			const yyr4176 bool = false
			var yynn4176 int
			if yyr4176 || yy2arr4176 {
				r.EncodeArrayStart(1)
			} else {
				yynn4176 = 1
				for _, b := range yyq4176 {
					if b {
						yynn4176++
					}
				}
				r.EncodeMapStart(yynn4176)
				yynn4176 = 0
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4179 := z.EncBinary()
					_ = yym4179
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr4176 || yy2arr4176 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4180 := z.DecBinary()
	_ = yym4180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4181 := r.ContainerType()
		if yyct4181 == codecSelferValueTypeMap1234 {
			yyl4181 := r.ReadMapStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4181, d)
			}
		} else if yyct4181 == codecSelferValueTypeArray1234 {
			yyl4181 := r.ReadArrayStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4182Slc
	var yyhl4182 bool = l >= 0
	for yyj4182 := 0; ; yyj4182++ {
		if yyhl4182 {
			if yyj4182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4182Slc = r.DecodeBytes(yys4182Slc, true, true)
		yys4182 := string(yys4182Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4182 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4183 := &x.Limits
				yym4184 := z.DecBinary()
				_ = yym4184
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4183), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4182)
		} // end switch yys4182
	} // end for yyj4182
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4185 int
	var yyb4185 bool
	var yyhl4185 bool = l >= 0
	yyj4185++
	if yyhl4185 {
		yyb4185 = yyj4185 > l
	} else {
		yyb4185 = r.CheckBreak()
	}
	if yyb4185 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4186 := &x.Limits
		yym4187 := z.DecBinary()
		_ = yym4187
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4186), d)
		}
	}
	for {
		yyj4185++
		if yyhl4185 {
			yyb4185 = yyj4185 > l
		} else {
			yyb4185 = r.CheckBreak()
		}
		if yyb4185 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4185-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4188 := z.EncBinary()
		_ = yym4188
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4189 := !z.EncBinary()
			yy2arr4189 := z.EncBasicHandle().StructToArray
			var yyq4189 [4]bool
			_, _, _ = yysep4189, yyq4189, yy2arr4189
			const yyr4189 bool = false
			yyq4189[0] = x.Kind != ""
			yyq4189[1] = x.APIVersion != ""
			yyq4189[2] = true
			yyq4189[3] = true
			var yynn4189 int
			if yyr4189 || yy2arr4189 {
				r.EncodeArrayStart(4)
			} else {
				yynn4189 = 0
				for _, b := range yyq4189 {
					if b {
						yynn4189++
					}
				}
				r.EncodeMapStart(yynn4189)
				yynn4189 = 0
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[0] {
					yym4191 := z.EncBinary()
					_ = yym4191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4192 := z.EncBinary()
					_ = yym4192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[1] {
					yym4194 := z.EncBinary()
					_ = yym4194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4189[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[2] {
					yy4197 := &x.ObjectMeta
					yy4197.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4189[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4198 := &x.ObjectMeta
					yy4198.CodecEncodeSelf(e)
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4189[3] {
					yy4200 := &x.Spec
					yy4200.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4189[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4201 := &x.Spec
					yy4201.CodecEncodeSelf(e)
				}
			}
			if yyr4189 || yy2arr4189 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4202 := z.DecBinary()
	_ = yym4202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4203 := r.ContainerType()
		if yyct4203 == codecSelferValueTypeMap1234 {
			yyl4203 := r.ReadMapStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4203, d)
			}
		} else if yyct4203 == codecSelferValueTypeArray1234 {
			yyl4203 := r.ReadArrayStart()
			if yyl4203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4204Slc
	var yyhl4204 bool = l >= 0
	for yyj4204 := 0; ; yyj4204++ {
		if yyhl4204 {
			if yyj4204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4204Slc = r.DecodeBytes(yys4204Slc, true, true)
		yys4204 := string(yys4204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4204 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4207 := &x.ObjectMeta
				yyv4207.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4208 := &x.Spec
				yyv4208.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4204)
		} // end switch yys4204
	} // end for yyj4204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4209 int
	var yyb4209 bool
	var yyhl4209 bool = l >= 0
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4212 := &x.ObjectMeta
		yyv4212.CodecDecodeSelf(d)
	}
	yyj4209++
	if yyhl4209 {
		yyb4209 = yyj4209 > l
	} else {
		yyb4209 = r.CheckBreak()
	}
	if yyb4209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4213 := &x.Spec
		yyv4213.CodecDecodeSelf(d)
	}
	for {
		yyj4209++
		if yyhl4209 {
			yyb4209 = yyj4209 > l
		} else {
			yyb4209 = r.CheckBreak()
		}
		if yyb4209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4214 := z.EncBinary()
		_ = yym4214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4215 := !z.EncBinary()
			yy2arr4215 := z.EncBasicHandle().StructToArray
			var yyq4215 [4]bool
			_, _, _ = yysep4215, yyq4215, yy2arr4215
			const yyr4215 bool = false
			yyq4215[0] = x.Kind != ""
			yyq4215[1] = x.APIVersion != ""
			yyq4215[2] = true
			var yynn4215 int
			if yyr4215 || yy2arr4215 {
				r.EncodeArrayStart(4)
			} else {
				yynn4215 = 1
				for _, b := range yyq4215 {
					if b {
						yynn4215++
					}
				}
				r.EncodeMapStart(yynn4215)
				yynn4215 = 0
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[0] {
					yym4217 := z.EncBinary()
					_ = yym4217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4218 := z.EncBinary()
					_ = yym4218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[1] {
					yym4220 := z.EncBinary()
					_ = yym4220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4221 := z.EncBinary()
					_ = yym4221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4215[2] {
					yy4223 := &x.ListMeta
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4223) {
					} else {
						z.EncFallback(yy4223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4225 := &x.ListMeta
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4225) {
					} else {
						z.EncFallback(yy4225)
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4228 := z.EncBinary()
					_ = yym4228
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4229 := z.EncBinary()
					_ = yym4229
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4215 || yy2arr4215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4230 := z.DecBinary()
	_ = yym4230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4231 := r.ContainerType()
		if yyct4231 == codecSelferValueTypeMap1234 {
			yyl4231 := r.ReadMapStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4231, d)
			}
		} else if yyct4231 == codecSelferValueTypeArray1234 {
			yyl4231 := r.ReadArrayStart()
			if yyl4231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4232Slc
	var yyhl4232 bool = l >= 0
	for yyj4232 := 0; ; yyj4232++ {
		if yyhl4232 {
			if yyj4232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4232Slc = r.DecodeBytes(yys4232Slc, true, true)
		yys4232 := string(yys4232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4232 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4235 := &x.ListMeta
				yym4236 := z.DecBinary()
				_ = yym4236
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4235) {
				} else {
					z.DecFallback(yyv4235, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4237 := &x.Items
				yym4238 := z.DecBinary()
				_ = yym4238
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4237), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4232)
		} // end switch yys4232
	} // end for yyj4232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4239 int
	var yyb4239 bool
	var yyhl4239 bool = l >= 0
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4242 := &x.ListMeta
		yym4243 := z.DecBinary()
		_ = yym4243
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4242) {
		} else {
			z.DecFallback(yyv4242, false)
		}
	}
	yyj4239++
	if yyhl4239 {
		yyb4239 = yyj4239 > l
	} else {
		yyb4239 = r.CheckBreak()
	}
	if yyb4239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4244 := &x.Items
		yym4245 := z.DecBinary()
		_ = yym4245
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4244), d)
		}
	}
	for {
		yyj4239++
		if yyhl4239 {
			yyb4239 = yyj4239 > l
		} else {
			yyb4239 = r.CheckBreak()
		}
		if yyb4239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4246 := z.EncBinary()
	_ = yym4246
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4247 := z.DecBinary()
	_ = yym4247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4248 := z.EncBinary()
		_ = yym4248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4249 := !z.EncBinary()
			yy2arr4249 := z.EncBasicHandle().StructToArray
			var yyq4249 [2]bool
			_, _, _ = yysep4249, yyq4249, yy2arr4249
			const yyr4249 bool = false
			yyq4249[0] = len(x.Hard) != 0
			yyq4249[1] = len(x.Scopes) != 0
			var yynn4249 int
			if yyr4249 || yy2arr4249 {
				r.EncodeArrayStart(2)
			} else {
				yynn4249 = 0
				for _, b := range yyq4249 {
					if b {
						yynn4249++
					}
				}
				r.EncodeMapStart(yynn4249)
				yynn4249 = 0
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4249[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4252 := z.EncBinary()
						_ = yym4252
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4253 := z.EncBinary()
						_ = yym4253
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4249 || yy2arr4249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4254 := z.DecBinary()
	_ = yym4254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4255 := r.ContainerType()
		if yyct4255 == codecSelferValueTypeMap1234 {
			yyl4255 := r.ReadMapStart()
			if yyl4255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4255, d)
			}
		} else if yyct4255 == codecSelferValueTypeArray1234 {
			yyl4255 := r.ReadArrayStart()
			if yyl4255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4256Slc
	var yyhl4256 bool = l >= 0
	for yyj4256 := 0; ; yyj4256++ {
		if yyhl4256 {
			if yyj4256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4256Slc = r.DecodeBytes(yys4256Slc, true, true)
		yys4256 := string(yys4256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4256 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4257 := &x.Hard
				yyv4257.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4258 := &x.Scopes
				yym4259 := z.DecBinary()
				_ = yym4259
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4258), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4256)
		} // end switch yys4256
	} // end for yyj4256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4260 int
	var yyb4260 bool
	var yyhl4260 bool = l >= 0
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4261 := &x.Hard
		yyv4261.CodecDecodeSelf(d)
	}
	yyj4260++
	if yyhl4260 {
		yyb4260 = yyj4260 > l
	} else {
		yyb4260 = r.CheckBreak()
	}
	if yyb4260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4262 := &x.Scopes
		yym4263 := z.DecBinary()
		_ = yym4263
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4262), d)
		}
	}
	for {
		yyj4260++
		if yyhl4260 {
			yyb4260 = yyj4260 > l
		} else {
			yyb4260 = r.CheckBreak()
		}
		if yyb4260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4264 := z.EncBinary()
		_ = yym4264
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4265 := !z.EncBinary()
			yy2arr4265 := z.EncBasicHandle().StructToArray
			var yyq4265 [2]bool
			_, _, _ = yysep4265, yyq4265, yy2arr4265
			const yyr4265 bool = false
			yyq4265[0] = len(x.Hard) != 0
			yyq4265[1] = len(x.Used) != 0
			var yynn4265 int
			if yyr4265 || yy2arr4265 {
				r.EncodeArrayStart(2)
			} else {
				yynn4265 = 0
				for _, b := range yyq4265 {
					if b {
						yynn4265++
					}
				}
				r.EncodeMapStart(yynn4265)
				yynn4265 = 0
			}
			if yyr4265 || yy2arr4265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4265[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4265[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4265 || yy2arr4265 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4265[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4265[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4265 || yy2arr4265 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4268 := z.DecBinary()
	_ = yym4268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4269 := r.ContainerType()
		if yyct4269 == codecSelferValueTypeMap1234 {
			yyl4269 := r.ReadMapStart()
			if yyl4269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4269, d)
			}
		} else if yyct4269 == codecSelferValueTypeArray1234 {
			yyl4269 := r.ReadArrayStart()
			if yyl4269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4270Slc
	var yyhl4270 bool = l >= 0
	for yyj4270 := 0; ; yyj4270++ {
		if yyhl4270 {
			if yyj4270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4270Slc = r.DecodeBytes(yys4270Slc, true, true)
		yys4270 := string(yys4270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4270 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4271 := &x.Hard
				yyv4271.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4272 := &x.Used
				yyv4272.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4270)
		} // end switch yys4270
	} // end for yyj4270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4273 int
	var yyb4273 bool
	var yyhl4273 bool = l >= 0
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4274 := &x.Hard
		yyv4274.CodecDecodeSelf(d)
	}
	yyj4273++
	if yyhl4273 {
		yyb4273 = yyj4273 > l
	} else {
		yyb4273 = r.CheckBreak()
	}
	if yyb4273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4275 := &x.Used
		yyv4275.CodecDecodeSelf(d)
	}
	for {
		yyj4273++
		if yyhl4273 {
			yyb4273 = yyj4273 > l
		} else {
			yyb4273 = r.CheckBreak()
		}
		if yyb4273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4276 := z.EncBinary()
		_ = yym4276
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4277 := !z.EncBinary()
			yy2arr4277 := z.EncBasicHandle().StructToArray
			var yyq4277 [5]bool
			_, _, _ = yysep4277, yyq4277, yy2arr4277
			const yyr4277 bool = false
			yyq4277[0] = x.Kind != ""
			yyq4277[1] = x.APIVersion != ""
			yyq4277[2] = true
			yyq4277[3] = true
			yyq4277[4] = true
			var yynn4277 int
			if yyr4277 || yy2arr4277 {
				r.EncodeArrayStart(5)
			} else {
				yynn4277 = 0
				for _, b := range yyq4277 {
					if b {
						yynn4277++
					}
				}
				r.EncodeMapStart(yynn4277)
				yynn4277 = 0
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[0] {
					yym4279 := z.EncBinary()
					_ = yym4279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4277[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4280 := z.EncBinary()
					_ = yym4280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[1] {
					yym4282 := z.EncBinary()
					_ = yym4282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4277[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4283 := z.EncBinary()
					_ = yym4283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[2] {
					yy4285 := &x.ObjectMeta
					yy4285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4277[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4286 := &x.ObjectMeta
					yy4286.CodecEncodeSelf(e)
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[3] {
					yy4288 := &x.Spec
					yy4288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4277[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4289 := &x.Spec
					yy4289.CodecEncodeSelf(e)
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4277[4] {
					yy4291 := &x.Status
					yy4291.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4277[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4292 := &x.Status
					yy4292.CodecEncodeSelf(e)
				}
			}
			if yyr4277 || yy2arr4277 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4293 := z.DecBinary()
	_ = yym4293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4294 := r.ContainerType()
		if yyct4294 == codecSelferValueTypeMap1234 {
			yyl4294 := r.ReadMapStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4294, d)
			}
		} else if yyct4294 == codecSelferValueTypeArray1234 {
			yyl4294 := r.ReadArrayStart()
			if yyl4294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4295Slc
	var yyhl4295 bool = l >= 0
	for yyj4295 := 0; ; yyj4295++ {
		if yyhl4295 {
			if yyj4295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4295Slc = r.DecodeBytes(yys4295Slc, true, true)
		yys4295 := string(yys4295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4295 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4298 := &x.ObjectMeta
				yyv4298.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4299 := &x.Spec
				yyv4299.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4300 := &x.Status
				yyv4300.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4295)
		} // end switch yys4295
	} // end for yyj4295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4301 int
	var yyb4301 bool
	var yyhl4301 bool = l >= 0
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4304 := &x.ObjectMeta
		yyv4304.CodecDecodeSelf(d)
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4305 := &x.Spec
		yyv4305.CodecDecodeSelf(d)
	}
	yyj4301++
	if yyhl4301 {
		yyb4301 = yyj4301 > l
	} else {
		yyb4301 = r.CheckBreak()
	}
	if yyb4301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4306 := &x.Status
		yyv4306.CodecDecodeSelf(d)
	}
	for {
		yyj4301++
		if yyhl4301 {
			yyb4301 = yyj4301 > l
		} else {
			yyb4301 = r.CheckBreak()
		}
		if yyb4301 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4301-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4307 := z.EncBinary()
		_ = yym4307
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4308 := !z.EncBinary()
			yy2arr4308 := z.EncBasicHandle().StructToArray
			var yyq4308 [4]bool
			_, _, _ = yysep4308, yyq4308, yy2arr4308
			const yyr4308 bool = false
			yyq4308[0] = x.Kind != ""
			yyq4308[1] = x.APIVersion != ""
			yyq4308[2] = true
			var yynn4308 int
			if yyr4308 || yy2arr4308 {
				r.EncodeArrayStart(4)
			} else {
				yynn4308 = 1
				for _, b := range yyq4308 {
					if b {
						yynn4308++
					}
				}
				r.EncodeMapStart(yynn4308)
				yynn4308 = 0
			}
			if yyr4308 || yy2arr4308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4308[0] {
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4308[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4311 := z.EncBinary()
					_ = yym4311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4308 || yy2arr4308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4308[1] {
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4308[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4314 := z.EncBinary()
					_ = yym4314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4308 || yy2arr4308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4308[2] {
					yy4316 := &x.ListMeta
					yym4317 := z.EncBinary()
					_ = yym4317
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4316) {
					} else {
						z.EncFallback(yy4316)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4308[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4318 := &x.ListMeta
					yym4319 := z.EncBinary()
					_ = yym4319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4318) {
					} else {
						z.EncFallback(yy4318)
					}
				}
			}
			if yyr4308 || yy2arr4308 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4321 := z.EncBinary()
					_ = yym4321
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4322 := z.EncBinary()
					_ = yym4322
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4308 || yy2arr4308 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4323 := z.DecBinary()
	_ = yym4323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4324 := r.ContainerType()
		if yyct4324 == codecSelferValueTypeMap1234 {
			yyl4324 := r.ReadMapStart()
			if yyl4324 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4324, d)
			}
		} else if yyct4324 == codecSelferValueTypeArray1234 {
			yyl4324 := r.ReadArrayStart()
			if yyl4324 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4324, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4325Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4325Slc
	var yyhl4325 bool = l >= 0
	for yyj4325 := 0; ; yyj4325++ {
		if yyhl4325 {
			if yyj4325 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4325Slc = r.DecodeBytes(yys4325Slc, true, true)
		yys4325 := string(yys4325Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4325 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4328 := &x.ListMeta
				yym4329 := z.DecBinary()
				_ = yym4329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4328) {
				} else {
					z.DecFallback(yyv4328, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4330 := &x.Items
				yym4331 := z.DecBinary()
				_ = yym4331
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4325)
		} // end switch yys4325
	} // end for yyj4325
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4332 int
	var yyb4332 bool
	var yyhl4332 bool = l >= 0
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4335 := &x.ListMeta
		yym4336 := z.DecBinary()
		_ = yym4336
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4335) {
		} else {
			z.DecFallback(yyv4335, false)
		}
	}
	yyj4332++
	if yyhl4332 {
		yyb4332 = yyj4332 > l
	} else {
		yyb4332 = r.CheckBreak()
	}
	if yyb4332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4337 := &x.Items
		yym4338 := z.DecBinary()
		_ = yym4338
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4337), d)
		}
	}
	for {
		yyj4332++
		if yyhl4332 {
			yyb4332 = yyj4332 > l
		} else {
			yyb4332 = r.CheckBreak()
		}
		if yyb4332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4339 := z.EncBinary()
		_ = yym4339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4340 := !z.EncBinary()
			yy2arr4340 := z.EncBasicHandle().StructToArray
			var yyq4340 [5]bool
			_, _, _ = yysep4340, yyq4340, yy2arr4340
			const yyr4340 bool = false
			yyq4340[0] = x.Kind != ""
			yyq4340[1] = x.APIVersion != ""
			yyq4340[2] = true
			yyq4340[3] = len(x.Data) != 0
			yyq4340[4] = x.Type != ""
			var yynn4340 int
			if yyr4340 || yy2arr4340 {
				r.EncodeArrayStart(5)
			} else {
				yynn4340 = 0
				for _, b := range yyq4340 {
					if b {
						yynn4340++
					}
				}
				r.EncodeMapStart(yynn4340)
				yynn4340 = 0
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[0] {
					yym4342 := z.EncBinary()
					_ = yym4342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4343 := z.EncBinary()
					_ = yym4343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[1] {
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4340[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4346 := z.EncBinary()
					_ = yym4346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[2] {
					yy4348 := &x.ObjectMeta
					yy4348.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4340[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4349 := &x.ObjectMeta
					yy4349.CodecEncodeSelf(e)
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4351 := z.EncBinary()
						_ = yym4351
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4340[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4352 := z.EncBinary()
						_ = yym4352
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4340[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4340[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4340 || yy2arr4340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4354 := z.DecBinary()
	_ = yym4354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4355 := r.ContainerType()
		if yyct4355 == codecSelferValueTypeMap1234 {
			yyl4355 := r.ReadMapStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4355, d)
			}
		} else if yyct4355 == codecSelferValueTypeArray1234 {
			yyl4355 := r.ReadArrayStart()
			if yyl4355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4356Slc
	var yyhl4356 bool = l >= 0
	for yyj4356 := 0; ; yyj4356++ {
		if yyhl4356 {
			if yyj4356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4356Slc = r.DecodeBytes(yys4356Slc, true, true)
		yys4356 := string(yys4356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4359 := &x.ObjectMeta
				yyv4359.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4360 := &x.Data
				yym4361 := z.DecBinary()
				_ = yym4361
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4360), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4356)
		} // end switch yys4356
	} // end for yyj4356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4363 int
	var yyb4363 bool
	var yyhl4363 bool = l >= 0
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4366 := &x.ObjectMeta
		yyv4366.CodecDecodeSelf(d)
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4367 := &x.Data
		yym4368 := z.DecBinary()
		_ = yym4368
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4367), d)
		}
	}
	yyj4363++
	if yyhl4363 {
		yyb4363 = yyj4363 > l
	} else {
		yyb4363 = r.CheckBreak()
	}
	if yyb4363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4363++
		if yyhl4363 {
			yyb4363 = yyj4363 > l
		} else {
			yyb4363 = r.CheckBreak()
		}
		if yyb4363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4370 := z.EncBinary()
	_ = yym4370
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4371 := z.DecBinary()
	_ = yym4371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4372 := z.EncBinary()
		_ = yym4372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4373 := !z.EncBinary()
			yy2arr4373 := z.EncBasicHandle().StructToArray
			var yyq4373 [4]bool
			_, _, _ = yysep4373, yyq4373, yy2arr4373
			const yyr4373 bool = false
			yyq4373[0] = x.Kind != ""
			yyq4373[1] = x.APIVersion != ""
			yyq4373[2] = true
			var yynn4373 int
			if yyr4373 || yy2arr4373 {
				r.EncodeArrayStart(4)
			} else {
				yynn4373 = 1
				for _, b := range yyq4373 {
					if b {
						yynn4373++
					}
				}
				r.EncodeMapStart(yynn4373)
				yynn4373 = 0
			}
			if yyr4373 || yy2arr4373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4373[0] {
					yym4375 := z.EncBinary()
					_ = yym4375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4376 := z.EncBinary()
					_ = yym4376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4373 || yy2arr4373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4373[1] {
					yym4378 := z.EncBinary()
					_ = yym4378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4379 := z.EncBinary()
					_ = yym4379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4373 || yy2arr4373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4373[2] {
					yy4381 := &x.ListMeta
					yym4382 := z.EncBinary()
					_ = yym4382
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4381) {
					} else {
						z.EncFallback(yy4381)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4383 := &x.ListMeta
					yym4384 := z.EncBinary()
					_ = yym4384
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4383) {
					} else {
						z.EncFallback(yy4383)
					}
				}
			}
			if yyr4373 || yy2arr4373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4386 := z.EncBinary()
					_ = yym4386
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4387 := z.EncBinary()
					_ = yym4387
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4373 || yy2arr4373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4388 := z.DecBinary()
	_ = yym4388
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4389 := r.ContainerType()
		if yyct4389 == codecSelferValueTypeMap1234 {
			yyl4389 := r.ReadMapStart()
			if yyl4389 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4389, d)
			}
		} else if yyct4389 == codecSelferValueTypeArray1234 {
			yyl4389 := r.ReadArrayStart()
			if yyl4389 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4389, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4390Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4390Slc
	var yyhl4390 bool = l >= 0
	for yyj4390 := 0; ; yyj4390++ {
		if yyhl4390 {
			if yyj4390 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4390Slc = r.DecodeBytes(yys4390Slc, true, true)
		yys4390 := string(yys4390Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4390 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4393 := &x.ListMeta
				yym4394 := z.DecBinary()
				_ = yym4394
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4393) {
				} else {
					z.DecFallback(yyv4393, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4395 := &x.Items
				yym4396 := z.DecBinary()
				_ = yym4396
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4395), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4390)
		} // end switch yys4390
	} // end for yyj4390
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4397 int
	var yyb4397 bool
	var yyhl4397 bool = l >= 0
	yyj4397++
	if yyhl4397 {
		yyb4397 = yyj4397 > l
	} else {
		yyb4397 = r.CheckBreak()
	}
	if yyb4397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4397++
	if yyhl4397 {
		yyb4397 = yyj4397 > l
	} else {
		yyb4397 = r.CheckBreak()
	}
	if yyb4397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4397++
	if yyhl4397 {
		yyb4397 = yyj4397 > l
	} else {
		yyb4397 = r.CheckBreak()
	}
	if yyb4397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4400 := &x.ListMeta
		yym4401 := z.DecBinary()
		_ = yym4401
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4400) {
		} else {
			z.DecFallback(yyv4400, false)
		}
	}
	yyj4397++
	if yyhl4397 {
		yyb4397 = yyj4397 > l
	} else {
		yyb4397 = r.CheckBreak()
	}
	if yyb4397 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4402 := &x.Items
		yym4403 := z.DecBinary()
		_ = yym4403
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4402), d)
		}
	}
	for {
		yyj4397++
		if yyhl4397 {
			yyb4397 = yyj4397 > l
		} else {
			yyb4397 = r.CheckBreak()
		}
		if yyb4397 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4397-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4404 := z.EncBinary()
		_ = yym4404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4405 := !z.EncBinary()
			yy2arr4405 := z.EncBasicHandle().StructToArray
			var yyq4405 [4]bool
			_, _, _ = yysep4405, yyq4405, yy2arr4405
			const yyr4405 bool = false
			yyq4405[0] = x.Kind != ""
			yyq4405[1] = x.APIVersion != ""
			yyq4405[2] = true
			yyq4405[3] = len(x.Data) != 0
			var yynn4405 int
			if yyr4405 || yy2arr4405 {
				r.EncodeArrayStart(4)
			} else {
				yynn4405 = 0
				for _, b := range yyq4405 {
					if b {
						yynn4405++
					}
				}
				r.EncodeMapStart(yynn4405)
				yynn4405 = 0
			}
			if yyr4405 || yy2arr4405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4405[0] {
					yym4407 := z.EncBinary()
					_ = yym4407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4408 := z.EncBinary()
					_ = yym4408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4405 || yy2arr4405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4405[1] {
					yym4410 := z.EncBinary()
					_ = yym4410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4411 := z.EncBinary()
					_ = yym4411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4405 || yy2arr4405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4405[2] {
					yy4413 := &x.ObjectMeta
					yy4413.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4414 := &x.ObjectMeta
					yy4414.CodecEncodeSelf(e)
				}
			}
			if yyr4405 || yy2arr4405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4405[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4416 := z.EncBinary()
						_ = yym4416
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4405[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4417 := z.EncBinary()
						_ = yym4417
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4405 || yy2arr4405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4418 := z.DecBinary()
	_ = yym4418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4419 := r.ContainerType()
		if yyct4419 == codecSelferValueTypeMap1234 {
			yyl4419 := r.ReadMapStart()
			if yyl4419 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4419, d)
			}
		} else if yyct4419 == codecSelferValueTypeArray1234 {
			yyl4419 := r.ReadArrayStart()
			if yyl4419 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4419, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4420Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4420Slc
	var yyhl4420 bool = l >= 0
	for yyj4420 := 0; ; yyj4420++ {
		if yyhl4420 {
			if yyj4420 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4420Slc = r.DecodeBytes(yys4420Slc, true, true)
		yys4420 := string(yys4420Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4420 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4423 := &x.ObjectMeta
				yyv4423.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4424 := &x.Data
				yym4425 := z.DecBinary()
				_ = yym4425
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4424, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4420)
		} // end switch yys4420
	} // end for yyj4420
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4426 int
	var yyb4426 bool
	var yyhl4426 bool = l >= 0
	yyj4426++
	if yyhl4426 {
		yyb4426 = yyj4426 > l
	} else {
		yyb4426 = r.CheckBreak()
	}
	if yyb4426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4426++
	if yyhl4426 {
		yyb4426 = yyj4426 > l
	} else {
		yyb4426 = r.CheckBreak()
	}
	if yyb4426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4426++
	if yyhl4426 {
		yyb4426 = yyj4426 > l
	} else {
		yyb4426 = r.CheckBreak()
	}
	if yyb4426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4429 := &x.ObjectMeta
		yyv4429.CodecDecodeSelf(d)
	}
	yyj4426++
	if yyhl4426 {
		yyb4426 = yyj4426 > l
	} else {
		yyb4426 = r.CheckBreak()
	}
	if yyb4426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4430 := &x.Data
		yym4431 := z.DecBinary()
		_ = yym4431
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4430, false, d)
		}
	}
	for {
		yyj4426++
		if yyhl4426 {
			yyb4426 = yyj4426 > l
		} else {
			yyb4426 = r.CheckBreak()
		}
		if yyb4426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4432 := z.EncBinary()
		_ = yym4432
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4433 := !z.EncBinary()
			yy2arr4433 := z.EncBasicHandle().StructToArray
			var yyq4433 [4]bool
			_, _, _ = yysep4433, yyq4433, yy2arr4433
			const yyr4433 bool = false
			yyq4433[0] = x.Kind != ""
			yyq4433[1] = x.APIVersion != ""
			yyq4433[2] = true
			var yynn4433 int
			if yyr4433 || yy2arr4433 {
				r.EncodeArrayStart(4)
			} else {
				yynn4433 = 1
				for _, b := range yyq4433 {
					if b {
						yynn4433++
					}
				}
				r.EncodeMapStart(yynn4433)
				yynn4433 = 0
			}
			if yyr4433 || yy2arr4433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4433[0] {
					yym4435 := z.EncBinary()
					_ = yym4435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4433[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4436 := z.EncBinary()
					_ = yym4436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4433 || yy2arr4433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4433[1] {
					yym4438 := z.EncBinary()
					_ = yym4438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4433[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4439 := z.EncBinary()
					_ = yym4439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4433 || yy2arr4433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4433[2] {
					yy4441 := &x.ListMeta
					yym4442 := z.EncBinary()
					_ = yym4442
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4441) {
					} else {
						z.EncFallback(yy4441)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4433[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4443 := &x.ListMeta
					yym4444 := z.EncBinary()
					_ = yym4444
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4443) {
					} else {
						z.EncFallback(yy4443)
					}
				}
			}
			if yyr4433 || yy2arr4433 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4446 := z.EncBinary()
					_ = yym4446
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4447 := z.EncBinary()
					_ = yym4447
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4433 || yy2arr4433 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4448 := z.DecBinary()
	_ = yym4448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4449 := r.ContainerType()
		if yyct4449 == codecSelferValueTypeMap1234 {
			yyl4449 := r.ReadMapStart()
			if yyl4449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4449, d)
			}
		} else if yyct4449 == codecSelferValueTypeArray1234 {
			yyl4449 := r.ReadArrayStart()
			if yyl4449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4450Slc
	var yyhl4450 bool = l >= 0
	for yyj4450 := 0; ; yyj4450++ {
		if yyhl4450 {
			if yyj4450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4450Slc = r.DecodeBytes(yys4450Slc, true, true)
		yys4450 := string(yys4450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4450 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4453 := &x.ListMeta
				yym4454 := z.DecBinary()
				_ = yym4454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4453) {
				} else {
					z.DecFallback(yyv4453, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4455 := &x.Items
				yym4456 := z.DecBinary()
				_ = yym4456
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4450)
		} // end switch yys4450
	} // end for yyj4450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4457 int
	var yyb4457 bool
	var yyhl4457 bool = l >= 0
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4460 := &x.ListMeta
		yym4461 := z.DecBinary()
		_ = yym4461
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4460) {
		} else {
			z.DecFallback(yyv4460, false)
		}
	}
	yyj4457++
	if yyhl4457 {
		yyb4457 = yyj4457 > l
	} else {
		yyb4457 = r.CheckBreak()
	}
	if yyb4457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4462 := &x.Items
		yym4463 := z.DecBinary()
		_ = yym4463
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4462), d)
		}
	}
	for {
		yyj4457++
		if yyhl4457 {
			yyb4457 = yyj4457 > l
		} else {
			yyb4457 = r.CheckBreak()
		}
		if yyb4457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4464 := z.EncBinary()
	_ = yym4464
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4465 := z.DecBinary()
	_ = yym4465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4466 := z.EncBinary()
	_ = yym4466
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4467 := z.DecBinary()
	_ = yym4467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4468 := z.EncBinary()
		_ = yym4468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4469 := !z.EncBinary()
			yy2arr4469 := z.EncBasicHandle().StructToArray
			var yyq4469 [4]bool
			_, _, _ = yysep4469, yyq4469, yy2arr4469
			const yyr4469 bool = false
			yyq4469[2] = x.Message != ""
			yyq4469[3] = x.Error != ""
			var yynn4469 int
			if yyr4469 || yy2arr4469 {
				r.EncodeArrayStart(4)
			} else {
				yynn4469 = 2
				for _, b := range yyq4469 {
					if b {
						yynn4469++
					}
				}
				r.EncodeMapStart(yynn4469)
				yynn4469 = 0
			}
			if yyr4469 || yy2arr4469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4469 || yy2arr4469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4469 || yy2arr4469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4469[2] {
					yym4473 := z.EncBinary()
					_ = yym4473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4474 := z.EncBinary()
					_ = yym4474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4469 || yy2arr4469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4469[3] {
					yym4476 := z.EncBinary()
					_ = yym4476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4477 := z.EncBinary()
					_ = yym4477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4469 || yy2arr4469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4478 := z.DecBinary()
	_ = yym4478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4479 := r.ContainerType()
		if yyct4479 == codecSelferValueTypeMap1234 {
			yyl4479 := r.ReadMapStart()
			if yyl4479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4479, d)
			}
		} else if yyct4479 == codecSelferValueTypeArray1234 {
			yyl4479 := r.ReadArrayStart()
			if yyl4479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4480Slc
	var yyhl4480 bool = l >= 0
	for yyj4480 := 0; ; yyj4480++ {
		if yyhl4480 {
			if yyj4480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4480Slc = r.DecodeBytes(yys4480Slc, true, true)
		yys4480 := string(yys4480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4480 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4480)
		} // end switch yys4480
	} // end for yyj4480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4485 int
	var yyb4485 bool
	var yyhl4485 bool = l >= 0
	yyj4485++
	if yyhl4485 {
		yyb4485 = yyj4485 > l
	} else {
		yyb4485 = r.CheckBreak()
	}
	if yyb4485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4485++
	if yyhl4485 {
		yyb4485 = yyj4485 > l
	} else {
		yyb4485 = r.CheckBreak()
	}
	if yyb4485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4485++
	if yyhl4485 {
		yyb4485 = yyj4485 > l
	} else {
		yyb4485 = r.CheckBreak()
	}
	if yyb4485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4485++
	if yyhl4485 {
		yyb4485 = yyj4485 > l
	} else {
		yyb4485 = r.CheckBreak()
	}
	if yyb4485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4485++
		if yyhl4485 {
			yyb4485 = yyj4485 > l
		} else {
			yyb4485 = r.CheckBreak()
		}
		if yyb4485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4490 := z.EncBinary()
		_ = yym4490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4491 := !z.EncBinary()
			yy2arr4491 := z.EncBasicHandle().StructToArray
			var yyq4491 [4]bool
			_, _, _ = yysep4491, yyq4491, yy2arr4491
			const yyr4491 bool = false
			yyq4491[0] = x.Kind != ""
			yyq4491[1] = x.APIVersion != ""
			yyq4491[2] = true
			yyq4491[3] = len(x.Conditions) != 0
			var yynn4491 int
			if yyr4491 || yy2arr4491 {
				r.EncodeArrayStart(4)
			} else {
				yynn4491 = 0
				for _, b := range yyq4491 {
					if b {
						yynn4491++
					}
				}
				r.EncodeMapStart(yynn4491)
				yynn4491 = 0
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[0] {
					yym4493 := z.EncBinary()
					_ = yym4493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4494 := z.EncBinary()
					_ = yym4494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[1] {
					yym4496 := z.EncBinary()
					_ = yym4496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4497 := z.EncBinary()
					_ = yym4497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[2] {
					yy4499 := &x.ObjectMeta
					yy4499.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4491[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4500 := &x.ObjectMeta
					yy4500.CodecEncodeSelf(e)
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4491[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4502 := z.EncBinary()
						_ = yym4502
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4491[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4503 := z.EncBinary()
						_ = yym4503
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4491 || yy2arr4491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4504 := z.DecBinary()
	_ = yym4504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4505 := r.ContainerType()
		if yyct4505 == codecSelferValueTypeMap1234 {
			yyl4505 := r.ReadMapStart()
			if yyl4505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4505, d)
			}
		} else if yyct4505 == codecSelferValueTypeArray1234 {
			yyl4505 := r.ReadArrayStart()
			if yyl4505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4506Slc
	var yyhl4506 bool = l >= 0
	for yyj4506 := 0; ; yyj4506++ {
		if yyhl4506 {
			if yyj4506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4506Slc = r.DecodeBytes(yys4506Slc, true, true)
		yys4506 := string(yys4506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4506 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4509 := &x.ObjectMeta
				yyv4509.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4510 := &x.Conditions
				yym4511 := z.DecBinary()
				_ = yym4511
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4506)
		} // end switch yys4506
	} // end for yyj4506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4512 int
	var yyb4512 bool
	var yyhl4512 bool = l >= 0
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4515 := &x.ObjectMeta
		yyv4515.CodecDecodeSelf(d)
	}
	yyj4512++
	if yyhl4512 {
		yyb4512 = yyj4512 > l
	} else {
		yyb4512 = r.CheckBreak()
	}
	if yyb4512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4516 := &x.Conditions
		yym4517 := z.DecBinary()
		_ = yym4517
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4516), d)
		}
	}
	for {
		yyj4512++
		if yyhl4512 {
			yyb4512 = yyj4512 > l
		} else {
			yyb4512 = r.CheckBreak()
		}
		if yyb4512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4518 := z.EncBinary()
		_ = yym4518
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4519 := !z.EncBinary()
			yy2arr4519 := z.EncBasicHandle().StructToArray
			var yyq4519 [4]bool
			_, _, _ = yysep4519, yyq4519, yy2arr4519
			const yyr4519 bool = false
			yyq4519[0] = x.Kind != ""
			yyq4519[1] = x.APIVersion != ""
			yyq4519[2] = true
			var yynn4519 int
			if yyr4519 || yy2arr4519 {
				r.EncodeArrayStart(4)
			} else {
				yynn4519 = 1
				for _, b := range yyq4519 {
					if b {
						yynn4519++
					}
				}
				r.EncodeMapStart(yynn4519)
				yynn4519 = 0
			}
			if yyr4519 || yy2arr4519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4519[0] {
					yym4521 := z.EncBinary()
					_ = yym4521
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4519[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4522 := z.EncBinary()
					_ = yym4522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4519 || yy2arr4519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4519[1] {
					yym4524 := z.EncBinary()
					_ = yym4524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4519[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4525 := z.EncBinary()
					_ = yym4525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4519 || yy2arr4519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4519[2] {
					yy4527 := &x.ListMeta
					yym4528 := z.EncBinary()
					_ = yym4528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4527) {
					} else {
						z.EncFallback(yy4527)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4519[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4529 := &x.ListMeta
					yym4530 := z.EncBinary()
					_ = yym4530
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4529) {
					} else {
						z.EncFallback(yy4529)
					}
				}
			}
			if yyr4519 || yy2arr4519 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4532 := z.EncBinary()
					_ = yym4532
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4533 := z.EncBinary()
					_ = yym4533
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4519 || yy2arr4519 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4534 := z.DecBinary()
	_ = yym4534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4535 := r.ContainerType()
		if yyct4535 == codecSelferValueTypeMap1234 {
			yyl4535 := r.ReadMapStart()
			if yyl4535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4535, d)
			}
		} else if yyct4535 == codecSelferValueTypeArray1234 {
			yyl4535 := r.ReadArrayStart()
			if yyl4535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4536Slc
	var yyhl4536 bool = l >= 0
	for yyj4536 := 0; ; yyj4536++ {
		if yyhl4536 {
			if yyj4536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4536Slc = r.DecodeBytes(yys4536Slc, true, true)
		yys4536 := string(yys4536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4539 := &x.ListMeta
				yym4540 := z.DecBinary()
				_ = yym4540
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4539) {
				} else {
					z.DecFallback(yyv4539, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4541 := &x.Items
				yym4542 := z.DecBinary()
				_ = yym4542
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4541), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4536)
		} // end switch yys4536
	} // end for yyj4536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4543 int
	var yyb4543 bool
	var yyhl4543 bool = l >= 0
	yyj4543++
	if yyhl4543 {
		yyb4543 = yyj4543 > l
	} else {
		yyb4543 = r.CheckBreak()
	}
	if yyb4543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4543++
	if yyhl4543 {
		yyb4543 = yyj4543 > l
	} else {
		yyb4543 = r.CheckBreak()
	}
	if yyb4543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4543++
	if yyhl4543 {
		yyb4543 = yyj4543 > l
	} else {
		yyb4543 = r.CheckBreak()
	}
	if yyb4543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4546 := &x.ListMeta
		yym4547 := z.DecBinary()
		_ = yym4547
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4546) {
		} else {
			z.DecFallback(yyv4546, false)
		}
	}
	yyj4543++
	if yyhl4543 {
		yyb4543 = yyj4543 > l
	} else {
		yyb4543 = r.CheckBreak()
	}
	if yyb4543 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4548 := &x.Items
		yym4549 := z.DecBinary()
		_ = yym4549
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4548), d)
		}
	}
	for {
		yyj4543++
		if yyhl4543 {
			yyb4543 = yyj4543 > l
		} else {
			yyb4543 = r.CheckBreak()
		}
		if yyb4543 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4543-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4550 := z.EncBinary()
		_ = yym4550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4551 := !z.EncBinary()
			yy2arr4551 := z.EncBasicHandle().StructToArray
			var yyq4551 [6]bool
			_, _, _ = yysep4551, yyq4551, yy2arr4551
			const yyr4551 bool = false
			yyq4551[0] = x.Capabilities != nil
			yyq4551[1] = x.Privileged != nil
			yyq4551[2] = x.SELinuxOptions != nil
			yyq4551[3] = x.RunAsUser != nil
			yyq4551[4] = x.RunAsNonRoot != nil
			yyq4551[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4551 int
			if yyr4551 || yy2arr4551 {
				r.EncodeArrayStart(6)
			} else {
				yynn4551 = 0
				for _, b := range yyq4551 {
					if b {
						yynn4551++
					}
				}
				r.EncodeMapStart(yynn4551)
				yynn4551 = 0
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4554 := *x.Privileged
						yym4555 := z.EncBinary()
						_ = yym4555
						if false {
						} else {
							r.EncodeBool(bool(yy4554))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4556 := *x.Privileged
						yym4557 := z.EncBinary()
						_ = yym4557
						if false {
						} else {
							r.EncodeBool(bool(yy4556))
						}
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4560 := *x.RunAsUser
						yym4561 := z.EncBinary()
						_ = yym4561
						if false {
						} else {
							r.EncodeInt(int64(yy4560))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4562 := *x.RunAsUser
						yym4563 := z.EncBinary()
						_ = yym4563
						if false {
						} else {
							r.EncodeInt(int64(yy4562))
						}
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4565 := *x.RunAsNonRoot
						yym4566 := z.EncBinary()
						_ = yym4566
						if false {
						} else {
							r.EncodeBool(bool(yy4565))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4567 := *x.RunAsNonRoot
						yym4568 := z.EncBinary()
						_ = yym4568
						if false {
						} else {
							r.EncodeBool(bool(yy4567))
						}
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4551[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4570 := *x.ReadOnlyRootFilesystem
						yym4571 := z.EncBinary()
						_ = yym4571
						if false {
						} else {
							r.EncodeBool(bool(yy4570))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4551[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4572 := *x.ReadOnlyRootFilesystem
						yym4573 := z.EncBinary()
						_ = yym4573
						if false {
						} else {
							r.EncodeBool(bool(yy4572))
						}
					}
				}
			}
			if yyr4551 || yy2arr4551 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4574 := z.DecBinary()
	_ = yym4574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4575 := r.ContainerType()
		if yyct4575 == codecSelferValueTypeMap1234 {
			yyl4575 := r.ReadMapStart()
			if yyl4575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4575, d)
			}
		} else if yyct4575 == codecSelferValueTypeArray1234 {
			yyl4575 := r.ReadArrayStart()
			if yyl4575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4576Slc
	var yyhl4576 bool = l >= 0
	for yyj4576 := 0; ; yyj4576++ {
		if yyhl4576 {
			if yyj4576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4576Slc = r.DecodeBytes(yys4576Slc, true, true)
		yys4576 := string(yys4576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4576 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4579 := z.DecBinary()
				_ = yym4579
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4582 := z.DecBinary()
				_ = yym4582
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4584 := z.DecBinary()
				_ = yym4584
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4586 := z.DecBinary()
				_ = yym4586
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4576)
		} // end switch yys4576
	} // end for yyj4576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4587 int
	var yyb4587 bool
	var yyhl4587 bool = l >= 0
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4590 := z.DecBinary()
		_ = yym4590
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4593 := z.DecBinary()
		_ = yym4593
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4595 := z.DecBinary()
		_ = yym4595
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4587++
	if yyhl4587 {
		yyb4587 = yyj4587 > l
	} else {
		yyb4587 = r.CheckBreak()
	}
	if yyb4587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4597 := z.DecBinary()
		_ = yym4597
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4587++
		if yyhl4587 {
			yyb4587 = yyj4587 > l
		} else {
			yyb4587 = r.CheckBreak()
		}
		if yyb4587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4598 := z.EncBinary()
		_ = yym4598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4599 := !z.EncBinary()
			yy2arr4599 := z.EncBasicHandle().StructToArray
			var yyq4599 [4]bool
			_, _, _ = yysep4599, yyq4599, yy2arr4599
			const yyr4599 bool = false
			yyq4599[0] = x.User != ""
			yyq4599[1] = x.Role != ""
			yyq4599[2] = x.Type != ""
			yyq4599[3] = x.Level != ""
			var yynn4599 int
			if yyr4599 || yy2arr4599 {
				r.EncodeArrayStart(4)
			} else {
				yynn4599 = 0
				for _, b := range yyq4599 {
					if b {
						yynn4599++
					}
				}
				r.EncodeMapStart(yynn4599)
				yynn4599 = 0
			}
			if yyr4599 || yy2arr4599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4599[0] {
					yym4601 := z.EncBinary()
					_ = yym4601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4599[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4602 := z.EncBinary()
					_ = yym4602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4599 || yy2arr4599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4599[1] {
					yym4604 := z.EncBinary()
					_ = yym4604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4599[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4605 := z.EncBinary()
					_ = yym4605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4599 || yy2arr4599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4599[2] {
					yym4607 := z.EncBinary()
					_ = yym4607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4599[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4608 := z.EncBinary()
					_ = yym4608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4599 || yy2arr4599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4599[3] {
					yym4610 := z.EncBinary()
					_ = yym4610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4599[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4611 := z.EncBinary()
					_ = yym4611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4599 || yy2arr4599 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4612 := z.DecBinary()
	_ = yym4612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4613 := r.ContainerType()
		if yyct4613 == codecSelferValueTypeMap1234 {
			yyl4613 := r.ReadMapStart()
			if yyl4613 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4613, d)
			}
		} else if yyct4613 == codecSelferValueTypeArray1234 {
			yyl4613 := r.ReadArrayStart()
			if yyl4613 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4614Slc
	var yyhl4614 bool = l >= 0
	for yyj4614 := 0; ; yyj4614++ {
		if yyhl4614 {
			if yyj4614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4614Slc = r.DecodeBytes(yys4614Slc, true, true)
		yys4614 := string(yys4614Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4614 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4614)
		} // end switch yys4614
	} // end for yyj4614
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4619 int
	var yyb4619 bool
	var yyhl4619 bool = l >= 0
	yyj4619++
	if yyhl4619 {
		yyb4619 = yyj4619 > l
	} else {
		yyb4619 = r.CheckBreak()
	}
	if yyb4619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4619++
	if yyhl4619 {
		yyb4619 = yyj4619 > l
	} else {
		yyb4619 = r.CheckBreak()
	}
	if yyb4619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4619++
	if yyhl4619 {
		yyb4619 = yyj4619 > l
	} else {
		yyb4619 = r.CheckBreak()
	}
	if yyb4619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4619++
	if yyhl4619 {
		yyb4619 = yyj4619 > l
	} else {
		yyb4619 = r.CheckBreak()
	}
	if yyb4619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4619++
		if yyhl4619 {
			yyb4619 = yyj4619 > l
		} else {
			yyb4619 = r.CheckBreak()
		}
		if yyb4619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4624 := z.EncBinary()
		_ = yym4624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4625 := !z.EncBinary()
			yy2arr4625 := z.EncBasicHandle().StructToArray
			var yyq4625 [5]bool
			_, _, _ = yysep4625, yyq4625, yy2arr4625
			const yyr4625 bool = false
			yyq4625[0] = x.Kind != ""
			yyq4625[1] = x.APIVersion != ""
			yyq4625[2] = true
			var yynn4625 int
			if yyr4625 || yy2arr4625 {
				r.EncodeArrayStart(5)
			} else {
				yynn4625 = 2
				for _, b := range yyq4625 {
					if b {
						yynn4625++
					}
				}
				r.EncodeMapStart(yynn4625)
				yynn4625 = 0
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4625[0] {
					yym4627 := z.EncBinary()
					_ = yym4627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4628 := z.EncBinary()
					_ = yym4628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4625[1] {
					yym4630 := z.EncBinary()
					_ = yym4630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4625[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4631 := z.EncBinary()
					_ = yym4631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4625[2] {
					yy4633 := &x.ObjectMeta
					yy4633.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4625[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4634 := &x.ObjectMeta
					yy4634.CodecEncodeSelf(e)
				}
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4636 := z.EncBinary()
				_ = yym4636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4637 := z.EncBinary()
				_ = yym4637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4639 := z.EncBinary()
					_ = yym4639
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4640 := z.EncBinary()
					_ = yym4640
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4625 || yy2arr4625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4641 := z.DecBinary()
	_ = yym4641
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4642 := r.ContainerType()
		if yyct4642 == codecSelferValueTypeMap1234 {
			yyl4642 := r.ReadMapStart()
			if yyl4642 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4642, d)
			}
		} else if yyct4642 == codecSelferValueTypeArray1234 {
			yyl4642 := r.ReadArrayStart()
			if yyl4642 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4642, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4643Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4643Slc
	var yyhl4643 bool = l >= 0
	for yyj4643 := 0; ; yyj4643++ {
		if yyhl4643 {
			if yyj4643 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4643Slc = r.DecodeBytes(yys4643Slc, true, true)
		yys4643 := string(yys4643Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4643 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4646 := &x.ObjectMeta
				yyv4646.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4648 := &x.Data
				yym4649 := z.DecBinary()
				_ = yym4649
				if false {
				} else {
					*yyv4648 = r.DecodeBytes(*(*[]byte)(yyv4648), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4643)
		} // end switch yys4643
	} // end for yyj4643
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4650 int
	var yyb4650 bool
	var yyhl4650 bool = l >= 0
	yyj4650++
	if yyhl4650 {
		yyb4650 = yyj4650 > l
	} else {
		yyb4650 = r.CheckBreak()
	}
	if yyb4650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4650++
	if yyhl4650 {
		yyb4650 = yyj4650 > l
	} else {
		yyb4650 = r.CheckBreak()
	}
	if yyb4650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4650++
	if yyhl4650 {
		yyb4650 = yyj4650 > l
	} else {
		yyb4650 = r.CheckBreak()
	}
	if yyb4650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4653 := &x.ObjectMeta
		yyv4653.CodecDecodeSelf(d)
	}
	yyj4650++
	if yyhl4650 {
		yyb4650 = yyj4650 > l
	} else {
		yyb4650 = r.CheckBreak()
	}
	if yyb4650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4650++
	if yyhl4650 {
		yyb4650 = yyj4650 > l
	} else {
		yyb4650 = r.CheckBreak()
	}
	if yyb4650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4655 := &x.Data
		yym4656 := z.DecBinary()
		_ = yym4656
		if false {
		} else {
			*yyv4655 = r.DecodeBytes(*(*[]byte)(yyv4655), false, false)
		}
	}
	for {
		yyj4650++
		if yyhl4650 {
			yyb4650 = yyj4650 > l
		} else {
			yyb4650 = r.CheckBreak()
		}
		if yyb4650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4657 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4658 := &yyv4657
		yy4658.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4659 := *v
	yyh4659, yyl4659 := z.DecSliceHelperStart()
	var yyc4659 bool
	if yyl4659 == 0 {
		if yyv4659 == nil {
			yyv4659 = []OwnerReference{}
			yyc4659 = true
		} else if len(yyv4659) != 0 {
			yyv4659 = yyv4659[:0]
			yyc4659 = true
		}
	} else if yyl4659 > 0 {
		var yyrr4659, yyrl4659 int
		var yyrt4659 bool
		if yyl4659 > cap(yyv4659) {

			yyrg4659 := len(yyv4659) > 0
			yyv24659 := yyv4659
			yyrl4659, yyrt4659 = z.DecInferLen(yyl4659, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4659 {
				if yyrl4659 <= cap(yyv4659) {
					yyv4659 = yyv4659[:yyrl4659]
				} else {
					yyv4659 = make([]OwnerReference, yyrl4659)
				}
			} else {
				yyv4659 = make([]OwnerReference, yyrl4659)
			}
			yyc4659 = true
			yyrr4659 = len(yyv4659)
			if yyrg4659 {
				copy(yyv4659, yyv24659)
			}
		} else if yyl4659 != len(yyv4659) {
			yyv4659 = yyv4659[:yyl4659]
			yyc4659 = true
		}
		yyj4659 := 0
		for ; yyj4659 < yyrr4659; yyj4659++ {
			yyh4659.ElemContainerState(yyj4659)
			if r.TryDecodeAsNil() {
				yyv4659[yyj4659] = OwnerReference{}
			} else {
				yyv4660 := &yyv4659[yyj4659]
				yyv4660.CodecDecodeSelf(d)
			}

		}
		if yyrt4659 {
			for ; yyj4659 < yyl4659; yyj4659++ {
				yyv4659 = append(yyv4659, OwnerReference{})
				yyh4659.ElemContainerState(yyj4659)
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = OwnerReference{}
				} else {
					yyv4661 := &yyv4659[yyj4659]
					yyv4661.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4659 := 0
		for ; !r.CheckBreak(); yyj4659++ {

			if yyj4659 >= len(yyv4659) {
				yyv4659 = append(yyv4659, OwnerReference{}) // var yyz4659 OwnerReference
				yyc4659 = true
			}
			yyh4659.ElemContainerState(yyj4659)
			if yyj4659 < len(yyv4659) {
				if r.TryDecodeAsNil() {
					yyv4659[yyj4659] = OwnerReference{}
				} else {
					yyv4662 := &yyv4659[yyj4659]
					yyv4662.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4659 < len(yyv4659) {
			yyv4659 = yyv4659[:yyj4659]
			yyc4659 = true
		} else if yyj4659 == 0 && yyv4659 == nil {
			yyv4659 = []OwnerReference{}
			yyc4659 = true
		}
	}
	yyh4659.End()
	if yyc4659 {
		*v = yyv4659
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4663 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4663.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4664 := *v
	yyh4664, yyl4664 := z.DecSliceHelperStart()
	var yyc4664 bool
	if yyl4664 == 0 {
		if yyv4664 == nil {
			yyv4664 = []PersistentVolumeAccessMode{}
			yyc4664 = true
		} else if len(yyv4664) != 0 {
			yyv4664 = yyv4664[:0]
			yyc4664 = true
		}
	} else if yyl4664 > 0 {
		var yyrr4664, yyrl4664 int
		var yyrt4664 bool
		if yyl4664 > cap(yyv4664) {

			yyrl4664, yyrt4664 = z.DecInferLen(yyl4664, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4664 {
				if yyrl4664 <= cap(yyv4664) {
					yyv4664 = yyv4664[:yyrl4664]
				} else {
					yyv4664 = make([]PersistentVolumeAccessMode, yyrl4664)
				}
			} else {
				yyv4664 = make([]PersistentVolumeAccessMode, yyrl4664)
			}
			yyc4664 = true
			yyrr4664 = len(yyv4664)
		} else if yyl4664 != len(yyv4664) {
			yyv4664 = yyv4664[:yyl4664]
			yyc4664 = true
		}
		yyj4664 := 0
		for ; yyj4664 < yyrr4664; yyj4664++ {
			yyh4664.ElemContainerState(yyj4664)
			if r.TryDecodeAsNil() {
				yyv4664[yyj4664] = ""
			} else {
				yyv4664[yyj4664] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4664 {
			for ; yyj4664 < yyl4664; yyj4664++ {
				yyv4664 = append(yyv4664, "")
				yyh4664.ElemContainerState(yyj4664)
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = ""
				} else {
					yyv4664[yyj4664] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4664 := 0
		for ; !r.CheckBreak(); yyj4664++ {

			if yyj4664 >= len(yyv4664) {
				yyv4664 = append(yyv4664, "") // var yyz4664 PersistentVolumeAccessMode
				yyc4664 = true
			}
			yyh4664.ElemContainerState(yyj4664)
			if yyj4664 < len(yyv4664) {
				if r.TryDecodeAsNil() {
					yyv4664[yyj4664] = ""
				} else {
					yyv4664[yyj4664] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4664 < len(yyv4664) {
			yyv4664 = yyv4664[:yyj4664]
			yyc4664 = true
		} else if yyj4664 == 0 && yyv4664 == nil {
			yyv4664 = []PersistentVolumeAccessMode{}
			yyc4664 = true
		}
	}
	yyh4664.End()
	if yyc4664 {
		*v = yyv4664
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4668 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4669 := &yyv4668
		yy4669.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4670 := *v
	yyh4670, yyl4670 := z.DecSliceHelperStart()
	var yyc4670 bool
	if yyl4670 == 0 {
		if yyv4670 == nil {
			yyv4670 = []PersistentVolume{}
			yyc4670 = true
		} else if len(yyv4670) != 0 {
			yyv4670 = yyv4670[:0]
			yyc4670 = true
		}
	} else if yyl4670 > 0 {
		var yyrr4670, yyrl4670 int
		var yyrt4670 bool
		if yyl4670 > cap(yyv4670) {

			yyrg4670 := len(yyv4670) > 0
			yyv24670 := yyv4670
			yyrl4670, yyrt4670 = z.DecInferLen(yyl4670, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4670 {
				if yyrl4670 <= cap(yyv4670) {
					yyv4670 = yyv4670[:yyrl4670]
				} else {
					yyv4670 = make([]PersistentVolume, yyrl4670)
				}
			} else {
				yyv4670 = make([]PersistentVolume, yyrl4670)
			}
			yyc4670 = true
			yyrr4670 = len(yyv4670)
			if yyrg4670 {
				copy(yyv4670, yyv24670)
			}
		} else if yyl4670 != len(yyv4670) {
			yyv4670 = yyv4670[:yyl4670]
			yyc4670 = true
		}
		yyj4670 := 0
		for ; yyj4670 < yyrr4670; yyj4670++ {
			yyh4670.ElemContainerState(yyj4670)
			if r.TryDecodeAsNil() {
				yyv4670[yyj4670] = PersistentVolume{}
			} else {
				yyv4671 := &yyv4670[yyj4670]
				yyv4671.CodecDecodeSelf(d)
			}

		}
		if yyrt4670 {
			for ; yyj4670 < yyl4670; yyj4670++ {
				yyv4670 = append(yyv4670, PersistentVolume{})
				yyh4670.ElemContainerState(yyj4670)
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = PersistentVolume{}
				} else {
					yyv4672 := &yyv4670[yyj4670]
					yyv4672.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4670 := 0
		for ; !r.CheckBreak(); yyj4670++ {

			if yyj4670 >= len(yyv4670) {
				yyv4670 = append(yyv4670, PersistentVolume{}) // var yyz4670 PersistentVolume
				yyc4670 = true
			}
			yyh4670.ElemContainerState(yyj4670)
			if yyj4670 < len(yyv4670) {
				if r.TryDecodeAsNil() {
					yyv4670[yyj4670] = PersistentVolume{}
				} else {
					yyv4673 := &yyv4670[yyj4670]
					yyv4673.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4670 < len(yyv4670) {
			yyv4670 = yyv4670[:yyj4670]
			yyc4670 = true
		} else if yyj4670 == 0 && yyv4670 == nil {
			yyv4670 = []PersistentVolume{}
			yyc4670 = true
		}
	}
	yyh4670.End()
	if yyc4670 {
		*v = yyv4670
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4674 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4675 := &yyv4674
		yy4675.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4676 := *v
	yyh4676, yyl4676 := z.DecSliceHelperStart()
	var yyc4676 bool
	if yyl4676 == 0 {
		if yyv4676 == nil {
			yyv4676 = []PersistentVolumeClaim{}
			yyc4676 = true
		} else if len(yyv4676) != 0 {
			yyv4676 = yyv4676[:0]
			yyc4676 = true
		}
	} else if yyl4676 > 0 {
		var yyrr4676, yyrl4676 int
		var yyrt4676 bool
		if yyl4676 > cap(yyv4676) {

			yyrg4676 := len(yyv4676) > 0
			yyv24676 := yyv4676
			yyrl4676, yyrt4676 = z.DecInferLen(yyl4676, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt4676 {
				if yyrl4676 <= cap(yyv4676) {
					yyv4676 = yyv4676[:yyrl4676]
				} else {
					yyv4676 = make([]PersistentVolumeClaim, yyrl4676)
				}
			} else {
				yyv4676 = make([]PersistentVolumeClaim, yyrl4676)
			}
			yyc4676 = true
			yyrr4676 = len(yyv4676)
			if yyrg4676 {
				copy(yyv4676, yyv24676)
			}
		} else if yyl4676 != len(yyv4676) {
			yyv4676 = yyv4676[:yyl4676]
			yyc4676 = true
		}
		yyj4676 := 0
		for ; yyj4676 < yyrr4676; yyj4676++ {
			yyh4676.ElemContainerState(yyj4676)
			if r.TryDecodeAsNil() {
				yyv4676[yyj4676] = PersistentVolumeClaim{}
			} else {
				yyv4677 := &yyv4676[yyj4676]
				yyv4677.CodecDecodeSelf(d)
			}

		}
		if yyrt4676 {
			for ; yyj4676 < yyl4676; yyj4676++ {
				yyv4676 = append(yyv4676, PersistentVolumeClaim{})
				yyh4676.ElemContainerState(yyj4676)
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = PersistentVolumeClaim{}
				} else {
					yyv4678 := &yyv4676[yyj4676]
					yyv4678.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4676 := 0
		for ; !r.CheckBreak(); yyj4676++ {

			if yyj4676 >= len(yyv4676) {
				yyv4676 = append(yyv4676, PersistentVolumeClaim{}) // var yyz4676 PersistentVolumeClaim
				yyc4676 = true
			}
			yyh4676.ElemContainerState(yyj4676)
			if yyj4676 < len(yyv4676) {
				if r.TryDecodeAsNil() {
					yyv4676[yyj4676] = PersistentVolumeClaim{}
				} else {
					yyv4679 := &yyv4676[yyj4676]
					yyv4679.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4676 < len(yyv4676) {
			yyv4676 = yyv4676[:yyj4676]
			yyc4676 = true
		} else if yyj4676 == 0 && yyv4676 == nil {
			yyv4676 = []PersistentVolumeClaim{}
			yyc4676 = true
		}
	}
	yyh4676.End()
	if yyc4676 {
		*v = yyv4676
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4680 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4681 := &yyv4680
		yy4681.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4682 := *v
	yyh4682, yyl4682 := z.DecSliceHelperStart()
	var yyc4682 bool
	if yyl4682 == 0 {
		if yyv4682 == nil {
			yyv4682 = []KeyToPath{}
			yyc4682 = true
		} else if len(yyv4682) != 0 {
			yyv4682 = yyv4682[:0]
			yyc4682 = true
		}
	} else if yyl4682 > 0 {
		var yyrr4682, yyrl4682 int
		var yyrt4682 bool
		if yyl4682 > cap(yyv4682) {

			yyrg4682 := len(yyv4682) > 0
			yyv24682 := yyv4682
			yyrl4682, yyrt4682 = z.DecInferLen(yyl4682, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4682 {
				if yyrl4682 <= cap(yyv4682) {
					yyv4682 = yyv4682[:yyrl4682]
				} else {
					yyv4682 = make([]KeyToPath, yyrl4682)
				}
			} else {
				yyv4682 = make([]KeyToPath, yyrl4682)
			}
			yyc4682 = true
			yyrr4682 = len(yyv4682)
			if yyrg4682 {
				copy(yyv4682, yyv24682)
			}
		} else if yyl4682 != len(yyv4682) {
			yyv4682 = yyv4682[:yyl4682]
			yyc4682 = true
		}
		yyj4682 := 0
		for ; yyj4682 < yyrr4682; yyj4682++ {
			yyh4682.ElemContainerState(yyj4682)
			if r.TryDecodeAsNil() {
				yyv4682[yyj4682] = KeyToPath{}
			} else {
				yyv4683 := &yyv4682[yyj4682]
				yyv4683.CodecDecodeSelf(d)
			}

		}
		if yyrt4682 {
			for ; yyj4682 < yyl4682; yyj4682++ {
				yyv4682 = append(yyv4682, KeyToPath{})
				yyh4682.ElemContainerState(yyj4682)
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = KeyToPath{}
				} else {
					yyv4684 := &yyv4682[yyj4682]
					yyv4684.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4682 := 0
		for ; !r.CheckBreak(); yyj4682++ {

			if yyj4682 >= len(yyv4682) {
				yyv4682 = append(yyv4682, KeyToPath{}) // var yyz4682 KeyToPath
				yyc4682 = true
			}
			yyh4682.ElemContainerState(yyj4682)
			if yyj4682 < len(yyv4682) {
				if r.TryDecodeAsNil() {
					yyv4682[yyj4682] = KeyToPath{}
				} else {
					yyv4685 := &yyv4682[yyj4682]
					yyv4685.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4682 < len(yyv4682) {
			yyv4682 = yyv4682[:yyj4682]
			yyc4682 = true
		} else if yyj4682 == 0 && yyv4682 == nil {
			yyv4682 = []KeyToPath{}
			yyc4682 = true
		}
	}
	yyh4682.End()
	if yyc4682 {
		*v = yyv4682
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4686 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4687 := &yyv4686
		yy4687.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4688 := *v
	yyh4688, yyl4688 := z.DecSliceHelperStart()
	var yyc4688 bool
	if yyl4688 == 0 {
		if yyv4688 == nil {
			yyv4688 = []DownwardAPIVolumeFile{}
			yyc4688 = true
		} else if len(yyv4688) != 0 {
			yyv4688 = yyv4688[:0]
			yyc4688 = true
		}
	} else if yyl4688 > 0 {
		var yyrr4688, yyrl4688 int
		var yyrt4688 bool
		if yyl4688 > cap(yyv4688) {

			yyrg4688 := len(yyv4688) > 0
			yyv24688 := yyv4688
			yyrl4688, yyrt4688 = z.DecInferLen(yyl4688, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4688 {
				if yyrl4688 <= cap(yyv4688) {
					yyv4688 = yyv4688[:yyrl4688]
				} else {
					yyv4688 = make([]DownwardAPIVolumeFile, yyrl4688)
				}
			} else {
				yyv4688 = make([]DownwardAPIVolumeFile, yyrl4688)
			}
			yyc4688 = true
			yyrr4688 = len(yyv4688)
			if yyrg4688 {
				copy(yyv4688, yyv24688)
			}
		} else if yyl4688 != len(yyv4688) {
			yyv4688 = yyv4688[:yyl4688]
			yyc4688 = true
		}
		yyj4688 := 0
		for ; yyj4688 < yyrr4688; yyj4688++ {
			yyh4688.ElemContainerState(yyj4688)
			if r.TryDecodeAsNil() {
				yyv4688[yyj4688] = DownwardAPIVolumeFile{}
			} else {
				yyv4689 := &yyv4688[yyj4688]
				yyv4689.CodecDecodeSelf(d)
			}

		}
		if yyrt4688 {
			for ; yyj4688 < yyl4688; yyj4688++ {
				yyv4688 = append(yyv4688, DownwardAPIVolumeFile{})
				yyh4688.ElemContainerState(yyj4688)
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = DownwardAPIVolumeFile{}
				} else {
					yyv4690 := &yyv4688[yyj4688]
					yyv4690.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4688 := 0
		for ; !r.CheckBreak(); yyj4688++ {

			if yyj4688 >= len(yyv4688) {
				yyv4688 = append(yyv4688, DownwardAPIVolumeFile{}) // var yyz4688 DownwardAPIVolumeFile
				yyc4688 = true
			}
			yyh4688.ElemContainerState(yyj4688)
			if yyj4688 < len(yyv4688) {
				if r.TryDecodeAsNil() {
					yyv4688[yyj4688] = DownwardAPIVolumeFile{}
				} else {
					yyv4691 := &yyv4688[yyj4688]
					yyv4691.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4688 < len(yyv4688) {
			yyv4688 = yyv4688[:yyj4688]
			yyc4688 = true
		} else if yyj4688 == 0 && yyv4688 == nil {
			yyv4688 = []DownwardAPIVolumeFile{}
			yyc4688 = true
		}
	}
	yyh4688.End()
	if yyc4688 {
		*v = yyv4688
	}
}

func (x codecSelfer1234) encSliceSystemVolumeProjection(v []SystemVolumeProjection, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4692 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4693 := &yyv4692
		yy4693.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSystemVolumeProjection(v *[]SystemVolumeProjection, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4694 := *v
	yyh4694, yyl4694 := z.DecSliceHelperStart()
	var yyc4694 bool
	if yyl4694 == 0 {
		if yyv4694 == nil {
			yyv4694 = []SystemVolumeProjection{}
			yyc4694 = true
		} else if len(yyv4694) != 0 {
			yyv4694 = yyv4694[:0]
			yyc4694 = true
		}
	} else if yyl4694 > 0 {
		var yyrr4694, yyrl4694 int
		var yyrt4694 bool
		if yyl4694 > cap(yyv4694) {

			yyrg4694 := len(yyv4694) > 0
			yyv24694 := yyv4694
			yyrl4694, yyrt4694 = z.DecInferLen(yyl4694, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4694 {
				if yyrl4694 <= cap(yyv4694) {
					yyv4694 = yyv4694[:yyrl4694]
				} else {
					yyv4694 = make([]SystemVolumeProjection, yyrl4694)
				}
			} else {
				yyv4694 = make([]SystemVolumeProjection, yyrl4694)
			}
			yyc4694 = true
			yyrr4694 = len(yyv4694)
			if yyrg4694 {
				copy(yyv4694, yyv24694)
			}
		} else if yyl4694 != len(yyv4694) {
			yyv4694 = yyv4694[:yyl4694]
			yyc4694 = true
		}
		yyj4694 := 0
		for ; yyj4694 < yyrr4694; yyj4694++ {
			yyh4694.ElemContainerState(yyj4694)
			if r.TryDecodeAsNil() {
				yyv4694[yyj4694] = SystemVolumeProjection{}
			} else {
				yyv4695 := &yyv4694[yyj4694]
				yyv4695.CodecDecodeSelf(d)
			}

		}
		if yyrt4694 {
			for ; yyj4694 < yyl4694; yyj4694++ {
				yyv4694 = append(yyv4694, SystemVolumeProjection{})
				yyh4694.ElemContainerState(yyj4694)
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = SystemVolumeProjection{}
				} else {
					yyv4696 := &yyv4694[yyj4694]
					yyv4696.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4694 := 0
		for ; !r.CheckBreak(); yyj4694++ {

			if yyj4694 >= len(yyv4694) {
				yyv4694 = append(yyv4694, SystemVolumeProjection{}) // var yyz4694 SystemVolumeProjection
				yyc4694 = true
			}
			yyh4694.ElemContainerState(yyj4694)
			if yyj4694 < len(yyv4694) {
				if r.TryDecodeAsNil() {
					yyv4694[yyj4694] = SystemVolumeProjection{}
				} else {
					yyv4697 := &yyv4694[yyj4694]
					yyv4697.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4694 < len(yyv4694) {
			yyv4694 = yyv4694[:yyj4694]
			yyc4694 = true
		} else if yyj4694 == 0 && yyv4694 == nil {
			yyv4694 = []SystemVolumeProjection{}
			yyc4694 = true
		}
	}
	yyh4694.End()
	if yyc4694 {
		*v = yyv4694
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4698 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4699 := &yyv4698
		yy4699.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4700 := *v
	yyh4700, yyl4700 := z.DecSliceHelperStart()
	var yyc4700 bool
	if yyl4700 == 0 {
		if yyv4700 == nil {
			yyv4700 = []HTTPHeader{}
			yyc4700 = true
		} else if len(yyv4700) != 0 {
			yyv4700 = yyv4700[:0]
			yyc4700 = true
		}
	} else if yyl4700 > 0 {
		var yyrr4700, yyrl4700 int
		var yyrt4700 bool
		if yyl4700 > cap(yyv4700) {

			yyrg4700 := len(yyv4700) > 0
			yyv24700 := yyv4700
			yyrl4700, yyrt4700 = z.DecInferLen(yyl4700, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4700 {
				if yyrl4700 <= cap(yyv4700) {
					yyv4700 = yyv4700[:yyrl4700]
				} else {
					yyv4700 = make([]HTTPHeader, yyrl4700)
				}
			} else {
				yyv4700 = make([]HTTPHeader, yyrl4700)
			}
			yyc4700 = true
			yyrr4700 = len(yyv4700)
			if yyrg4700 {
				copy(yyv4700, yyv24700)
			}
		} else if yyl4700 != len(yyv4700) {
			yyv4700 = yyv4700[:yyl4700]
			yyc4700 = true
		}
		yyj4700 := 0
		for ; yyj4700 < yyrr4700; yyj4700++ {
			yyh4700.ElemContainerState(yyj4700)
			if r.TryDecodeAsNil() {
				yyv4700[yyj4700] = HTTPHeader{}
			} else {
				yyv4701 := &yyv4700[yyj4700]
				yyv4701.CodecDecodeSelf(d)
			}

		}
		if yyrt4700 {
			for ; yyj4700 < yyl4700; yyj4700++ {
				yyv4700 = append(yyv4700, HTTPHeader{})
				yyh4700.ElemContainerState(yyj4700)
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = HTTPHeader{}
				} else {
					yyv4702 := &yyv4700[yyj4700]
					yyv4702.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4700 := 0
		for ; !r.CheckBreak(); yyj4700++ {

			if yyj4700 >= len(yyv4700) {
				yyv4700 = append(yyv4700, HTTPHeader{}) // var yyz4700 HTTPHeader
				yyc4700 = true
			}
			yyh4700.ElemContainerState(yyj4700)
			if yyj4700 < len(yyv4700) {
				if r.TryDecodeAsNil() {
					yyv4700[yyj4700] = HTTPHeader{}
				} else {
					yyv4703 := &yyv4700[yyj4700]
					yyv4703.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4700 < len(yyv4700) {
			yyv4700 = yyv4700[:yyj4700]
			yyc4700 = true
		} else if yyj4700 == 0 && yyv4700 == nil {
			yyv4700 = []HTTPHeader{}
			yyc4700 = true
		}
	}
	yyh4700.End()
	if yyc4700 {
		*v = yyv4700
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4704 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4705 := *v
	yyh4705, yyl4705 := z.DecSliceHelperStart()
	var yyc4705 bool
	if yyl4705 == 0 {
		if yyv4705 == nil {
			yyv4705 = []Capability{}
			yyc4705 = true
		} else if len(yyv4705) != 0 {
			yyv4705 = yyv4705[:0]
			yyc4705 = true
		}
	} else if yyl4705 > 0 {
		var yyrr4705, yyrl4705 int
		var yyrt4705 bool
		if yyl4705 > cap(yyv4705) {

			yyrl4705, yyrt4705 = z.DecInferLen(yyl4705, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4705 {
				if yyrl4705 <= cap(yyv4705) {
					yyv4705 = yyv4705[:yyrl4705]
				} else {
					yyv4705 = make([]Capability, yyrl4705)
				}
			} else {
				yyv4705 = make([]Capability, yyrl4705)
			}
			yyc4705 = true
			yyrr4705 = len(yyv4705)
		} else if yyl4705 != len(yyv4705) {
			yyv4705 = yyv4705[:yyl4705]
			yyc4705 = true
		}
		yyj4705 := 0
		for ; yyj4705 < yyrr4705; yyj4705++ {
			yyh4705.ElemContainerState(yyj4705)
			if r.TryDecodeAsNil() {
				yyv4705[yyj4705] = ""
			} else {
				yyv4705[yyj4705] = Capability(r.DecodeString())
			}

		}
		if yyrt4705 {
			for ; yyj4705 < yyl4705; yyj4705++ {
				yyv4705 = append(yyv4705, "")
				yyh4705.ElemContainerState(yyj4705)
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = ""
				} else {
					yyv4705[yyj4705] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4705 := 0
		for ; !r.CheckBreak(); yyj4705++ {

			if yyj4705 >= len(yyv4705) {
				yyv4705 = append(yyv4705, "") // var yyz4705 Capability
				yyc4705 = true
			}
			yyh4705.ElemContainerState(yyj4705)
			if yyj4705 < len(yyv4705) {
				if r.TryDecodeAsNil() {
					yyv4705[yyj4705] = ""
				} else {
					yyv4705[yyj4705] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4705 < len(yyv4705) {
			yyv4705 = yyv4705[:yyj4705]
			yyc4705 = true
		} else if yyj4705 == 0 && yyv4705 == nil {
			yyv4705 = []Capability{}
			yyc4705 = true
		}
	}
	yyh4705.End()
	if yyc4705 {
		*v = yyv4705
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4710 := &yyv4709
		yy4710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4711 := *v
	yyh4711, yyl4711 := z.DecSliceHelperStart()
	var yyc4711 bool
	if yyl4711 == 0 {
		if yyv4711 == nil {
			yyv4711 = []ContainerPort{}
			yyc4711 = true
		} else if len(yyv4711) != 0 {
			yyv4711 = yyv4711[:0]
			yyc4711 = true
		}
	} else if yyl4711 > 0 {
		var yyrr4711, yyrl4711 int
		var yyrt4711 bool
		if yyl4711 > cap(yyv4711) {

			yyrg4711 := len(yyv4711) > 0
			yyv24711 := yyv4711
			yyrl4711, yyrt4711 = z.DecInferLen(yyl4711, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4711 {
				if yyrl4711 <= cap(yyv4711) {
					yyv4711 = yyv4711[:yyrl4711]
				} else {
					yyv4711 = make([]ContainerPort, yyrl4711)
				}
			} else {
				yyv4711 = make([]ContainerPort, yyrl4711)
			}
			yyc4711 = true
			yyrr4711 = len(yyv4711)
			if yyrg4711 {
				copy(yyv4711, yyv24711)
			}
		} else if yyl4711 != len(yyv4711) {
			yyv4711 = yyv4711[:yyl4711]
			yyc4711 = true
		}
		yyj4711 := 0
		for ; yyj4711 < yyrr4711; yyj4711++ {
			yyh4711.ElemContainerState(yyj4711)
			if r.TryDecodeAsNil() {
				yyv4711[yyj4711] = ContainerPort{}
			} else {
				yyv4712 := &yyv4711[yyj4711]
				yyv4712.CodecDecodeSelf(d)
			}

		}
		if yyrt4711 {
			for ; yyj4711 < yyl4711; yyj4711++ {
				yyv4711 = append(yyv4711, ContainerPort{})
				yyh4711.ElemContainerState(yyj4711)
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = ContainerPort{}
				} else {
					yyv4713 := &yyv4711[yyj4711]
					yyv4713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4711 := 0
		for ; !r.CheckBreak(); yyj4711++ {

			if yyj4711 >= len(yyv4711) {
				yyv4711 = append(yyv4711, ContainerPort{}) // var yyz4711 ContainerPort
				yyc4711 = true
			}
			yyh4711.ElemContainerState(yyj4711)
			if yyj4711 < len(yyv4711) {
				if r.TryDecodeAsNil() {
					yyv4711[yyj4711] = ContainerPort{}
				} else {
					yyv4714 := &yyv4711[yyj4711]
					yyv4714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4711 < len(yyv4711) {
			yyv4711 = yyv4711[:yyj4711]
			yyc4711 = true
		} else if yyj4711 == 0 && yyv4711 == nil {
			yyv4711 = []ContainerPort{}
			yyc4711 = true
		}
	}
	yyh4711.End()
	if yyc4711 {
		*v = yyv4711
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4716 := &yyv4715
		yy4716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4717 := *v
	yyh4717, yyl4717 := z.DecSliceHelperStart()
	var yyc4717 bool
	if yyl4717 == 0 {
		if yyv4717 == nil {
			yyv4717 = []EnvVar{}
			yyc4717 = true
		} else if len(yyv4717) != 0 {
			yyv4717 = yyv4717[:0]
			yyc4717 = true
		}
	} else if yyl4717 > 0 {
		var yyrr4717, yyrl4717 int
		var yyrt4717 bool
		if yyl4717 > cap(yyv4717) {

			yyrg4717 := len(yyv4717) > 0
			yyv24717 := yyv4717
			yyrl4717, yyrt4717 = z.DecInferLen(yyl4717, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4717 {
				if yyrl4717 <= cap(yyv4717) {
					yyv4717 = yyv4717[:yyrl4717]
				} else {
					yyv4717 = make([]EnvVar, yyrl4717)
				}
			} else {
				yyv4717 = make([]EnvVar, yyrl4717)
			}
			yyc4717 = true
			yyrr4717 = len(yyv4717)
			if yyrg4717 {
				copy(yyv4717, yyv24717)
			}
		} else if yyl4717 != len(yyv4717) {
			yyv4717 = yyv4717[:yyl4717]
			yyc4717 = true
		}
		yyj4717 := 0
		for ; yyj4717 < yyrr4717; yyj4717++ {
			yyh4717.ElemContainerState(yyj4717)
			if r.TryDecodeAsNil() {
				yyv4717[yyj4717] = EnvVar{}
			} else {
				yyv4718 := &yyv4717[yyj4717]
				yyv4718.CodecDecodeSelf(d)
			}

		}
		if yyrt4717 {
			for ; yyj4717 < yyl4717; yyj4717++ {
				yyv4717 = append(yyv4717, EnvVar{})
				yyh4717.ElemContainerState(yyj4717)
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = EnvVar{}
				} else {
					yyv4719 := &yyv4717[yyj4717]
					yyv4719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4717 := 0
		for ; !r.CheckBreak(); yyj4717++ {

			if yyj4717 >= len(yyv4717) {
				yyv4717 = append(yyv4717, EnvVar{}) // var yyz4717 EnvVar
				yyc4717 = true
			}
			yyh4717.ElemContainerState(yyj4717)
			if yyj4717 < len(yyv4717) {
				if r.TryDecodeAsNil() {
					yyv4717[yyj4717] = EnvVar{}
				} else {
					yyv4720 := &yyv4717[yyj4717]
					yyv4720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4717 < len(yyv4717) {
			yyv4717 = yyv4717[:yyj4717]
			yyc4717 = true
		} else if yyj4717 == 0 && yyv4717 == nil {
			yyv4717 = []EnvVar{}
			yyc4717 = true
		}
	}
	yyh4717.End()
	if yyc4717 {
		*v = yyv4717
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4722 := &yyv4721
		yy4722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4723 := *v
	yyh4723, yyl4723 := z.DecSliceHelperStart()
	var yyc4723 bool
	if yyl4723 == 0 {
		if yyv4723 == nil {
			yyv4723 = []VolumeMount{}
			yyc4723 = true
		} else if len(yyv4723) != 0 {
			yyv4723 = yyv4723[:0]
			yyc4723 = true
		}
	} else if yyl4723 > 0 {
		var yyrr4723, yyrl4723 int
		var yyrt4723 bool
		if yyl4723 > cap(yyv4723) {

			yyrg4723 := len(yyv4723) > 0
			yyv24723 := yyv4723
			yyrl4723, yyrt4723 = z.DecInferLen(yyl4723, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4723 {
				if yyrl4723 <= cap(yyv4723) {
					yyv4723 = yyv4723[:yyrl4723]
				} else {
					yyv4723 = make([]VolumeMount, yyrl4723)
				}
			} else {
				yyv4723 = make([]VolumeMount, yyrl4723)
			}
			yyc4723 = true
			yyrr4723 = len(yyv4723)
			if yyrg4723 {
				copy(yyv4723, yyv24723)
			}
		} else if yyl4723 != len(yyv4723) {
			yyv4723 = yyv4723[:yyl4723]
			yyc4723 = true
		}
		yyj4723 := 0
		for ; yyj4723 < yyrr4723; yyj4723++ {
			yyh4723.ElemContainerState(yyj4723)
			if r.TryDecodeAsNil() {
				yyv4723[yyj4723] = VolumeMount{}
			} else {
				yyv4724 := &yyv4723[yyj4723]
				yyv4724.CodecDecodeSelf(d)
			}

		}
		if yyrt4723 {
			for ; yyj4723 < yyl4723; yyj4723++ {
				yyv4723 = append(yyv4723, VolumeMount{})
				yyh4723.ElemContainerState(yyj4723)
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = VolumeMount{}
				} else {
					yyv4725 := &yyv4723[yyj4723]
					yyv4725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4723 := 0
		for ; !r.CheckBreak(); yyj4723++ {

			if yyj4723 >= len(yyv4723) {
				yyv4723 = append(yyv4723, VolumeMount{}) // var yyz4723 VolumeMount
				yyc4723 = true
			}
			yyh4723.ElemContainerState(yyj4723)
			if yyj4723 < len(yyv4723) {
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = VolumeMount{}
				} else {
					yyv4726 := &yyv4723[yyj4723]
					yyv4726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4723 < len(yyv4723) {
			yyv4723 = yyv4723[:yyj4723]
			yyc4723 = true
		} else if yyj4723 == 0 && yyv4723 == nil {
			yyv4723 = []VolumeMount{}
			yyc4723 = true
		}
	}
	yyh4723.End()
	if yyc4723 {
		*v = yyv4723
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4728 := &yyv4727
		yy4728.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4729 := *v
	yyh4729, yyl4729 := z.DecSliceHelperStart()
	var yyc4729 bool
	if yyl4729 == 0 {
		if yyv4729 == nil {
			yyv4729 = []Pod{}
			yyc4729 = true
		} else if len(yyv4729) != 0 {
			yyv4729 = yyv4729[:0]
			yyc4729 = true
		}
	} else if yyl4729 > 0 {
		var yyrr4729, yyrl4729 int
		var yyrt4729 bool
		if yyl4729 > cap(yyv4729) {

			yyrg4729 := len(yyv4729) > 0
			yyv24729 := yyv4729
			yyrl4729, yyrt4729 = z.DecInferLen(yyl4729, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt4729 {
				if yyrl4729 <= cap(yyv4729) {
					yyv4729 = yyv4729[:yyrl4729]
				} else {
					yyv4729 = make([]Pod, yyrl4729)
				}
			} else {
				yyv4729 = make([]Pod, yyrl4729)
			}
			yyc4729 = true
			yyrr4729 = len(yyv4729)
			if yyrg4729 {
				copy(yyv4729, yyv24729)
			}
		} else if yyl4729 != len(yyv4729) {
			yyv4729 = yyv4729[:yyl4729]
			yyc4729 = true
		}
		yyj4729 := 0
		for ; yyj4729 < yyrr4729; yyj4729++ {
			yyh4729.ElemContainerState(yyj4729)
			if r.TryDecodeAsNil() {
				yyv4729[yyj4729] = Pod{}
			} else {
				yyv4730 := &yyv4729[yyj4729]
				yyv4730.CodecDecodeSelf(d)
			}

		}
		if yyrt4729 {
			for ; yyj4729 < yyl4729; yyj4729++ {
				yyv4729 = append(yyv4729, Pod{})
				yyh4729.ElemContainerState(yyj4729)
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = Pod{}
				} else {
					yyv4731 := &yyv4729[yyj4729]
					yyv4731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4729 := 0
		for ; !r.CheckBreak(); yyj4729++ {

			if yyj4729 >= len(yyv4729) {
				yyv4729 = append(yyv4729, Pod{}) // var yyz4729 Pod
				yyc4729 = true
			}
			yyh4729.ElemContainerState(yyj4729)
			if yyj4729 < len(yyv4729) {
				if r.TryDecodeAsNil() {
					yyv4729[yyj4729] = Pod{}
				} else {
					yyv4732 := &yyv4729[yyj4729]
					yyv4732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4729 < len(yyv4729) {
			yyv4729 = yyv4729[:yyj4729]
			yyc4729 = true
		} else if yyj4729 == 0 && yyv4729 == nil {
			yyv4729 = []Pod{}
			yyc4729 = true
		}
	}
	yyh4729.End()
	if yyc4729 {
		*v = yyv4729
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4733 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4734 := &yyv4733
		yy4734.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4735 := *v
	yyh4735, yyl4735 := z.DecSliceHelperStart()
	var yyc4735 bool
	if yyl4735 == 0 {
		if yyv4735 == nil {
			yyv4735 = []NodeSelectorTerm{}
			yyc4735 = true
		} else if len(yyv4735) != 0 {
			yyv4735 = yyv4735[:0]
			yyc4735 = true
		}
	} else if yyl4735 > 0 {
		var yyrr4735, yyrl4735 int
		var yyrt4735 bool
		if yyl4735 > cap(yyv4735) {

			yyrg4735 := len(yyv4735) > 0
			yyv24735 := yyv4735
			yyrl4735, yyrt4735 = z.DecInferLen(yyl4735, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4735 {
				if yyrl4735 <= cap(yyv4735) {
					yyv4735 = yyv4735[:yyrl4735]
				} else {
					yyv4735 = make([]NodeSelectorTerm, yyrl4735)
				}
			} else {
				yyv4735 = make([]NodeSelectorTerm, yyrl4735)
			}
			yyc4735 = true
			yyrr4735 = len(yyv4735)
			if yyrg4735 {
				copy(yyv4735, yyv24735)
			}
		} else if yyl4735 != len(yyv4735) {
			yyv4735 = yyv4735[:yyl4735]
			yyc4735 = true
		}
		yyj4735 := 0
		for ; yyj4735 < yyrr4735; yyj4735++ {
			yyh4735.ElemContainerState(yyj4735)
			if r.TryDecodeAsNil() {
				yyv4735[yyj4735] = NodeSelectorTerm{}
			} else {
				yyv4736 := &yyv4735[yyj4735]
				yyv4736.CodecDecodeSelf(d)
			}

		}
		if yyrt4735 {
			for ; yyj4735 < yyl4735; yyj4735++ {
				yyv4735 = append(yyv4735, NodeSelectorTerm{})
				yyh4735.ElemContainerState(yyj4735)
				if r.TryDecodeAsNil() {
					yyv4735[yyj4735] = NodeSelectorTerm{}
				} else {
					yyv4737 := &yyv4735[yyj4735]
					yyv4737.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4735 := 0
		for ; !r.CheckBreak(); yyj4735++ {

			if yyj4735 >= len(yyv4735) {
				yyv4735 = append(yyv4735, NodeSelectorTerm{}) // var yyz4735 NodeSelectorTerm
				yyc4735 = true
			}
			yyh4735.ElemContainerState(yyj4735)
			if yyj4735 < len(yyv4735) {
				if r.TryDecodeAsNil() {
					yyv4735[yyj4735] = NodeSelectorTerm{}
				} else {
					yyv4738 := &yyv4735[yyj4735]
					yyv4738.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4735 < len(yyv4735) {
			yyv4735 = yyv4735[:yyj4735]
			yyc4735 = true
		} else if yyj4735 == 0 && yyv4735 == nil {
			yyv4735 = []NodeSelectorTerm{}
			yyc4735 = true
		}
	}
	yyh4735.End()
	if yyc4735 {
		*v = yyv4735
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4739 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4740 := &yyv4739
		yy4740.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4741 := *v
	yyh4741, yyl4741 := z.DecSliceHelperStart()
	var yyc4741 bool
	if yyl4741 == 0 {
		if yyv4741 == nil {
			yyv4741 = []NodeSelectorRequirement{}
			yyc4741 = true
		} else if len(yyv4741) != 0 {
			yyv4741 = yyv4741[:0]
			yyc4741 = true
		}
	} else if yyl4741 > 0 {
		var yyrr4741, yyrl4741 int
		var yyrt4741 bool
		if yyl4741 > cap(yyv4741) {

			yyrg4741 := len(yyv4741) > 0
			yyv24741 := yyv4741
			yyrl4741, yyrt4741 = z.DecInferLen(yyl4741, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4741 {
				if yyrl4741 <= cap(yyv4741) {
					yyv4741 = yyv4741[:yyrl4741]
				} else {
					yyv4741 = make([]NodeSelectorRequirement, yyrl4741)
				}
			} else {
				yyv4741 = make([]NodeSelectorRequirement, yyrl4741)
			}
			yyc4741 = true
			yyrr4741 = len(yyv4741)
			if yyrg4741 {
				copy(yyv4741, yyv24741)
			}
		} else if yyl4741 != len(yyv4741) {
			yyv4741 = yyv4741[:yyl4741]
			yyc4741 = true
		}
		yyj4741 := 0
		for ; yyj4741 < yyrr4741; yyj4741++ {
			yyh4741.ElemContainerState(yyj4741)
			if r.TryDecodeAsNil() {
				yyv4741[yyj4741] = NodeSelectorRequirement{}
			} else {
				yyv4742 := &yyv4741[yyj4741]
				yyv4742.CodecDecodeSelf(d)
			}

		}
		if yyrt4741 {
			for ; yyj4741 < yyl4741; yyj4741++ {
				yyv4741 = append(yyv4741, NodeSelectorRequirement{})
				yyh4741.ElemContainerState(yyj4741)
				if r.TryDecodeAsNil() {
					yyv4741[yyj4741] = NodeSelectorRequirement{}
				} else {
					yyv4743 := &yyv4741[yyj4741]
					yyv4743.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4741 := 0
		for ; !r.CheckBreak(); yyj4741++ {

			if yyj4741 >= len(yyv4741) {
				yyv4741 = append(yyv4741, NodeSelectorRequirement{}) // var yyz4741 NodeSelectorRequirement
				yyc4741 = true
			}
			yyh4741.ElemContainerState(yyj4741)
			if yyj4741 < len(yyv4741) {
				if r.TryDecodeAsNil() {
					yyv4741[yyj4741] = NodeSelectorRequirement{}
				} else {
					yyv4744 := &yyv4741[yyj4741]
					yyv4744.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4741 < len(yyv4741) {
			yyv4741 = yyv4741[:yyj4741]
			yyc4741 = true
		} else if yyj4741 == 0 && yyv4741 == nil {
			yyv4741 = []NodeSelectorRequirement{}
			yyc4741 = true
		}
	}
	yyh4741.End()
	if yyc4741 {
		*v = yyv4741
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4745 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4746 := &yyv4745
		yy4746.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4747 := *v
	yyh4747, yyl4747 := z.DecSliceHelperStart()
	var yyc4747 bool
	if yyl4747 == 0 {
		if yyv4747 == nil {
			yyv4747 = []PodAffinityTerm{}
			yyc4747 = true
		} else if len(yyv4747) != 0 {
			yyv4747 = yyv4747[:0]
			yyc4747 = true
		}
	} else if yyl4747 > 0 {
		var yyrr4747, yyrl4747 int
		var yyrt4747 bool
		if yyl4747 > cap(yyv4747) {

			yyrg4747 := len(yyv4747) > 0
			yyv24747 := yyv4747
			yyrl4747, yyrt4747 = z.DecInferLen(yyl4747, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4747 {
				if yyrl4747 <= cap(yyv4747) {
					yyv4747 = yyv4747[:yyrl4747]
				} else {
					yyv4747 = make([]PodAffinityTerm, yyrl4747)
				}
			} else {
				yyv4747 = make([]PodAffinityTerm, yyrl4747)
			}
			yyc4747 = true
			yyrr4747 = len(yyv4747)
			if yyrg4747 {
				copy(yyv4747, yyv24747)
			}
		} else if yyl4747 != len(yyv4747) {
			yyv4747 = yyv4747[:yyl4747]
			yyc4747 = true
		}
		yyj4747 := 0
		for ; yyj4747 < yyrr4747; yyj4747++ {
			yyh4747.ElemContainerState(yyj4747)
			if r.TryDecodeAsNil() {
				yyv4747[yyj4747] = PodAffinityTerm{}
			} else {
				yyv4748 := &yyv4747[yyj4747]
				yyv4748.CodecDecodeSelf(d)
			}

		}
		if yyrt4747 {
			for ; yyj4747 < yyl4747; yyj4747++ {
				yyv4747 = append(yyv4747, PodAffinityTerm{})
				yyh4747.ElemContainerState(yyj4747)
				if r.TryDecodeAsNil() {
					yyv4747[yyj4747] = PodAffinityTerm{}
				} else {
					yyv4749 := &yyv4747[yyj4747]
					yyv4749.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4747 := 0
		for ; !r.CheckBreak(); yyj4747++ {

			if yyj4747 >= len(yyv4747) {
				yyv4747 = append(yyv4747, PodAffinityTerm{}) // var yyz4747 PodAffinityTerm
				yyc4747 = true
			}
			yyh4747.ElemContainerState(yyj4747)
			if yyj4747 < len(yyv4747) {
				if r.TryDecodeAsNil() {
					yyv4747[yyj4747] = PodAffinityTerm{}
				} else {
					yyv4750 := &yyv4747[yyj4747]
					yyv4750.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4747 < len(yyv4747) {
			yyv4747 = yyv4747[:yyj4747]
			yyc4747 = true
		} else if yyj4747 == 0 && yyv4747 == nil {
			yyv4747 = []PodAffinityTerm{}
			yyc4747 = true
		}
	}
	yyh4747.End()
	if yyc4747 {
		*v = yyv4747
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4751 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4752 := &yyv4751
		yy4752.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4753 := *v
	yyh4753, yyl4753 := z.DecSliceHelperStart()
	var yyc4753 bool
	if yyl4753 == 0 {
		if yyv4753 == nil {
			yyv4753 = []WeightedPodAffinityTerm{}
			yyc4753 = true
		} else if len(yyv4753) != 0 {
			yyv4753 = yyv4753[:0]
			yyc4753 = true
		}
	} else if yyl4753 > 0 {
		var yyrr4753, yyrl4753 int
		var yyrt4753 bool
		if yyl4753 > cap(yyv4753) {

			yyrg4753 := len(yyv4753) > 0
			yyv24753 := yyv4753
			yyrl4753, yyrt4753 = z.DecInferLen(yyl4753, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4753 {
				if yyrl4753 <= cap(yyv4753) {
					yyv4753 = yyv4753[:yyrl4753]
				} else {
					yyv4753 = make([]WeightedPodAffinityTerm, yyrl4753)
				}
			} else {
				yyv4753 = make([]WeightedPodAffinityTerm, yyrl4753)
			}
			yyc4753 = true
			yyrr4753 = len(yyv4753)
			if yyrg4753 {
				copy(yyv4753, yyv24753)
			}
		} else if yyl4753 != len(yyv4753) {
			yyv4753 = yyv4753[:yyl4753]
			yyc4753 = true
		}
		yyj4753 := 0
		for ; yyj4753 < yyrr4753; yyj4753++ {
			yyh4753.ElemContainerState(yyj4753)
			if r.TryDecodeAsNil() {
				yyv4753[yyj4753] = WeightedPodAffinityTerm{}
			} else {
				yyv4754 := &yyv4753[yyj4753]
				yyv4754.CodecDecodeSelf(d)
			}

		}
		if yyrt4753 {
			for ; yyj4753 < yyl4753; yyj4753++ {
				yyv4753 = append(yyv4753, WeightedPodAffinityTerm{})
				yyh4753.ElemContainerState(yyj4753)
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = WeightedPodAffinityTerm{}
				} else {
					yyv4755 := &yyv4753[yyj4753]
					yyv4755.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4753 := 0
		for ; !r.CheckBreak(); yyj4753++ {

			if yyj4753 >= len(yyv4753) {
				yyv4753 = append(yyv4753, WeightedPodAffinityTerm{}) // var yyz4753 WeightedPodAffinityTerm
				yyc4753 = true
			}
			yyh4753.ElemContainerState(yyj4753)
			if yyj4753 < len(yyv4753) {
				if r.TryDecodeAsNil() {
					yyv4753[yyj4753] = WeightedPodAffinityTerm{}
				} else {
					yyv4756 := &yyv4753[yyj4753]
					yyv4756.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4753 < len(yyv4753) {
			yyv4753 = yyv4753[:yyj4753]
			yyc4753 = true
		} else if yyj4753 == 0 && yyv4753 == nil {
			yyv4753 = []WeightedPodAffinityTerm{}
			yyc4753 = true
		}
	}
	yyh4753.End()
	if yyc4753 {
		*v = yyv4753
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4757 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4758 := &yyv4757
		yy4758.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4759 := *v
	yyh4759, yyl4759 := z.DecSliceHelperStart()
	var yyc4759 bool
	if yyl4759 == 0 {
		if yyv4759 == nil {
			yyv4759 = []PreferredSchedulingTerm{}
			yyc4759 = true
		} else if len(yyv4759) != 0 {
			yyv4759 = yyv4759[:0]
			yyc4759 = true
		}
	} else if yyl4759 > 0 {
		var yyrr4759, yyrl4759 int
		var yyrt4759 bool
		if yyl4759 > cap(yyv4759) {

			yyrg4759 := len(yyv4759) > 0
			yyv24759 := yyv4759
			yyrl4759, yyrt4759 = z.DecInferLen(yyl4759, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4759 {
				if yyrl4759 <= cap(yyv4759) {
					yyv4759 = yyv4759[:yyrl4759]
				} else {
					yyv4759 = make([]PreferredSchedulingTerm, yyrl4759)
				}
			} else {
				yyv4759 = make([]PreferredSchedulingTerm, yyrl4759)
			}
			yyc4759 = true
			yyrr4759 = len(yyv4759)
			if yyrg4759 {
				copy(yyv4759, yyv24759)
			}
		} else if yyl4759 != len(yyv4759) {
			yyv4759 = yyv4759[:yyl4759]
			yyc4759 = true
		}
		yyj4759 := 0
		for ; yyj4759 < yyrr4759; yyj4759++ {
			yyh4759.ElemContainerState(yyj4759)
			if r.TryDecodeAsNil() {
				yyv4759[yyj4759] = PreferredSchedulingTerm{}
			} else {
				yyv4760 := &yyv4759[yyj4759]
				yyv4760.CodecDecodeSelf(d)
			}

		}
		if yyrt4759 {
			for ; yyj4759 < yyl4759; yyj4759++ {
				yyv4759 = append(yyv4759, PreferredSchedulingTerm{})
				yyh4759.ElemContainerState(yyj4759)
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = PreferredSchedulingTerm{}
				} else {
					yyv4761 := &yyv4759[yyj4759]
					yyv4761.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4759 := 0
		for ; !r.CheckBreak(); yyj4759++ {

			if yyj4759 >= len(yyv4759) {
				yyv4759 = append(yyv4759, PreferredSchedulingTerm{}) // var yyz4759 PreferredSchedulingTerm
				yyc4759 = true
			}
			yyh4759.ElemContainerState(yyj4759)
			if yyj4759 < len(yyv4759) {
				if r.TryDecodeAsNil() {
					yyv4759[yyj4759] = PreferredSchedulingTerm{}
				} else {
					yyv4762 := &yyv4759[yyj4759]
					yyv4762.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4759 < len(yyv4759) {
			yyv4759 = yyv4759[:yyj4759]
			yyc4759 = true
		} else if yyj4759 == 0 && yyv4759 == nil {
			yyv4759 = []PreferredSchedulingTerm{}
			yyc4759 = true
		}
	}
	yyh4759.End()
	if yyc4759 {
		*v = yyv4759
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4763 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4764 := &yyv4763
		yy4764.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4765 := *v
	yyh4765, yyl4765 := z.DecSliceHelperStart()
	var yyc4765 bool
	if yyl4765 == 0 {
		if yyv4765 == nil {
			yyv4765 = []Volume{}
			yyc4765 = true
		} else if len(yyv4765) != 0 {
			yyv4765 = yyv4765[:0]
			yyc4765 = true
		}
	} else if yyl4765 > 0 {
		var yyrr4765, yyrl4765 int
		var yyrt4765 bool
		if yyl4765 > cap(yyv4765) {

			yyrg4765 := len(yyv4765) > 0
			yyv24765 := yyv4765
			yyrl4765, yyrt4765 = z.DecInferLen(yyl4765, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt4765 {
				if yyrl4765 <= cap(yyv4765) {
					yyv4765 = yyv4765[:yyrl4765]
				} else {
					yyv4765 = make([]Volume, yyrl4765)
				}
			} else {
				yyv4765 = make([]Volume, yyrl4765)
			}
			yyc4765 = true
			yyrr4765 = len(yyv4765)
			if yyrg4765 {
				copy(yyv4765, yyv24765)
			}
		} else if yyl4765 != len(yyv4765) {
			yyv4765 = yyv4765[:yyl4765]
			yyc4765 = true
		}
		yyj4765 := 0
		for ; yyj4765 < yyrr4765; yyj4765++ {
			yyh4765.ElemContainerState(yyj4765)
			if r.TryDecodeAsNil() {
				yyv4765[yyj4765] = Volume{}
			} else {
				yyv4766 := &yyv4765[yyj4765]
				yyv4766.CodecDecodeSelf(d)
			}

		}
		if yyrt4765 {
			for ; yyj4765 < yyl4765; yyj4765++ {
				yyv4765 = append(yyv4765, Volume{})
				yyh4765.ElemContainerState(yyj4765)
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Volume{}
				} else {
					yyv4767 := &yyv4765[yyj4765]
					yyv4767.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4765 := 0
		for ; !r.CheckBreak(); yyj4765++ {

			if yyj4765 >= len(yyv4765) {
				yyv4765 = append(yyv4765, Volume{}) // var yyz4765 Volume
				yyc4765 = true
			}
			yyh4765.ElemContainerState(yyj4765)
			if yyj4765 < len(yyv4765) {
				if r.TryDecodeAsNil() {
					yyv4765[yyj4765] = Volume{}
				} else {
					yyv4768 := &yyv4765[yyj4765]
					yyv4768.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4765 < len(yyv4765) {
			yyv4765 = yyv4765[:yyj4765]
			yyc4765 = true
		} else if yyj4765 == 0 && yyv4765 == nil {
			yyv4765 = []Volume{}
			yyc4765 = true
		}
	}
	yyh4765.End()
	if yyc4765 {
		*v = yyv4765
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4769 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4770 := &yyv4769
		yy4770.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4771 := *v
	yyh4771, yyl4771 := z.DecSliceHelperStart()
	var yyc4771 bool
	if yyl4771 == 0 {
		if yyv4771 == nil {
			yyv4771 = []Container{}
			yyc4771 = true
		} else if len(yyv4771) != 0 {
			yyv4771 = yyv4771[:0]
			yyc4771 = true
		}
	} else if yyl4771 > 0 {
		var yyrr4771, yyrl4771 int
		var yyrt4771 bool
		if yyl4771 > cap(yyv4771) {

			yyrg4771 := len(yyv4771) > 0
			yyv24771 := yyv4771
			yyrl4771, yyrt4771 = z.DecInferLen(yyl4771, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4771 {
				if yyrl4771 <= cap(yyv4771) {
					yyv4771 = yyv4771[:yyrl4771]
				} else {
					yyv4771 = make([]Container, yyrl4771)
				}
			} else {
				yyv4771 = make([]Container, yyrl4771)
			}
			yyc4771 = true
			yyrr4771 = len(yyv4771)
			if yyrg4771 {
				copy(yyv4771, yyv24771)
			}
		} else if yyl4771 != len(yyv4771) {
			yyv4771 = yyv4771[:yyl4771]
			yyc4771 = true
		}
		yyj4771 := 0
		for ; yyj4771 < yyrr4771; yyj4771++ {
			yyh4771.ElemContainerState(yyj4771)
			if r.TryDecodeAsNil() {
				yyv4771[yyj4771] = Container{}
			} else {
				yyv4772 := &yyv4771[yyj4771]
				yyv4772.CodecDecodeSelf(d)
			}

		}
		if yyrt4771 {
			for ; yyj4771 < yyl4771; yyj4771++ {
				yyv4771 = append(yyv4771, Container{})
				yyh4771.ElemContainerState(yyj4771)
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = Container{}
				} else {
					yyv4773 := &yyv4771[yyj4771]
					yyv4773.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4771 := 0
		for ; !r.CheckBreak(); yyj4771++ {

			if yyj4771 >= len(yyv4771) {
				yyv4771 = append(yyv4771, Container{}) // var yyz4771 Container
				yyc4771 = true
			}
			yyh4771.ElemContainerState(yyj4771)
			if yyj4771 < len(yyv4771) {
				if r.TryDecodeAsNil() {
					yyv4771[yyj4771] = Container{}
				} else {
					yyv4774 := &yyv4771[yyj4771]
					yyv4774.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4771 < len(yyv4771) {
			yyv4771 = yyv4771[:yyj4771]
			yyc4771 = true
		} else if yyj4771 == 0 && yyv4771 == nil {
			yyv4771 = []Container{}
			yyc4771 = true
		}
	}
	yyh4771.End()
	if yyc4771 {
		*v = yyv4771
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4775 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4776 := &yyv4775
		yy4776.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4777 := *v
	yyh4777, yyl4777 := z.DecSliceHelperStart()
	var yyc4777 bool
	if yyl4777 == 0 {
		if yyv4777 == nil {
			yyv4777 = []LocalObjectReference{}
			yyc4777 = true
		} else if len(yyv4777) != 0 {
			yyv4777 = yyv4777[:0]
			yyc4777 = true
		}
	} else if yyl4777 > 0 {
		var yyrr4777, yyrl4777 int
		var yyrt4777 bool
		if yyl4777 > cap(yyv4777) {

			yyrg4777 := len(yyv4777) > 0
			yyv24777 := yyv4777
			yyrl4777, yyrt4777 = z.DecInferLen(yyl4777, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4777 {
				if yyrl4777 <= cap(yyv4777) {
					yyv4777 = yyv4777[:yyrl4777]
				} else {
					yyv4777 = make([]LocalObjectReference, yyrl4777)
				}
			} else {
				yyv4777 = make([]LocalObjectReference, yyrl4777)
			}
			yyc4777 = true
			yyrr4777 = len(yyv4777)
			if yyrg4777 {
				copy(yyv4777, yyv24777)
			}
		} else if yyl4777 != len(yyv4777) {
			yyv4777 = yyv4777[:yyl4777]
			yyc4777 = true
		}
		yyj4777 := 0
		for ; yyj4777 < yyrr4777; yyj4777++ {
			yyh4777.ElemContainerState(yyj4777)
			if r.TryDecodeAsNil() {
				yyv4777[yyj4777] = LocalObjectReference{}
			} else {
				yyv4778 := &yyv4777[yyj4777]
				yyv4778.CodecDecodeSelf(d)
			}

		}
		if yyrt4777 {
			for ; yyj4777 < yyl4777; yyj4777++ {
				yyv4777 = append(yyv4777, LocalObjectReference{})
				yyh4777.ElemContainerState(yyj4777)
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = LocalObjectReference{}
				} else {
					yyv4779 := &yyv4777[yyj4777]
					yyv4779.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4777 := 0
		for ; !r.CheckBreak(); yyj4777++ {

			if yyj4777 >= len(yyv4777) {
				yyv4777 = append(yyv4777, LocalObjectReference{}) // var yyz4777 LocalObjectReference
				yyc4777 = true
			}
			yyh4777.ElemContainerState(yyj4777)
			if yyj4777 < len(yyv4777) {
				if r.TryDecodeAsNil() {
					yyv4777[yyj4777] = LocalObjectReference{}
				} else {
					yyv4780 := &yyv4777[yyj4777]
					yyv4780.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4777 < len(yyv4777) {
			yyv4777 = yyv4777[:yyj4777]
			yyc4777 = true
		} else if yyj4777 == 0 && yyv4777 == nil {
			yyv4777 = []LocalObjectReference{}
			yyc4777 = true
		}
	}
	yyh4777.End()
	if yyc4777 {
		*v = yyv4777
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4781 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4782 := &yyv4781
		yy4782.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4783 := *v
	yyh4783, yyl4783 := z.DecSliceHelperStart()
	var yyc4783 bool
	if yyl4783 == 0 {
		if yyv4783 == nil {
			yyv4783 = []PodCondition{}
			yyc4783 = true
		} else if len(yyv4783) != 0 {
			yyv4783 = yyv4783[:0]
			yyc4783 = true
		}
	} else if yyl4783 > 0 {
		var yyrr4783, yyrl4783 int
		var yyrt4783 bool
		if yyl4783 > cap(yyv4783) {

			yyrg4783 := len(yyv4783) > 0
			yyv24783 := yyv4783
			yyrl4783, yyrt4783 = z.DecInferLen(yyl4783, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4783 {
				if yyrl4783 <= cap(yyv4783) {
					yyv4783 = yyv4783[:yyrl4783]
				} else {
					yyv4783 = make([]PodCondition, yyrl4783)
				}
			} else {
				yyv4783 = make([]PodCondition, yyrl4783)
			}
			yyc4783 = true
			yyrr4783 = len(yyv4783)
			if yyrg4783 {
				copy(yyv4783, yyv24783)
			}
		} else if yyl4783 != len(yyv4783) {
			yyv4783 = yyv4783[:yyl4783]
			yyc4783 = true
		}
		yyj4783 := 0
		for ; yyj4783 < yyrr4783; yyj4783++ {
			yyh4783.ElemContainerState(yyj4783)
			if r.TryDecodeAsNil() {
				yyv4783[yyj4783] = PodCondition{}
			} else {
				yyv4784 := &yyv4783[yyj4783]
				yyv4784.CodecDecodeSelf(d)
			}

		}
		if yyrt4783 {
			for ; yyj4783 < yyl4783; yyj4783++ {
				yyv4783 = append(yyv4783, PodCondition{})
				yyh4783.ElemContainerState(yyj4783)
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = PodCondition{}
				} else {
					yyv4785 := &yyv4783[yyj4783]
					yyv4785.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4783 := 0
		for ; !r.CheckBreak(); yyj4783++ {

			if yyj4783 >= len(yyv4783) {
				yyv4783 = append(yyv4783, PodCondition{}) // var yyz4783 PodCondition
				yyc4783 = true
			}
			yyh4783.ElemContainerState(yyj4783)
			if yyj4783 < len(yyv4783) {
				if r.TryDecodeAsNil() {
					yyv4783[yyj4783] = PodCondition{}
				} else {
					yyv4786 := &yyv4783[yyj4783]
					yyv4786.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4783 < len(yyv4783) {
			yyv4783 = yyv4783[:yyj4783]
			yyc4783 = true
		} else if yyj4783 == 0 && yyv4783 == nil {
			yyv4783 = []PodCondition{}
			yyc4783 = true
		}
	}
	yyh4783.End()
	if yyc4783 {
		*v = yyv4783
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4787 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4788 := &yyv4787
		yy4788.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4789 := *v
	yyh4789, yyl4789 := z.DecSliceHelperStart()
	var yyc4789 bool
	if yyl4789 == 0 {
		if yyv4789 == nil {
			yyv4789 = []ContainerStatus{}
			yyc4789 = true
		} else if len(yyv4789) != 0 {
			yyv4789 = yyv4789[:0]
			yyc4789 = true
		}
	} else if yyl4789 > 0 {
		var yyrr4789, yyrl4789 int
		var yyrt4789 bool
		if yyl4789 > cap(yyv4789) {

			yyrg4789 := len(yyv4789) > 0
			yyv24789 := yyv4789
			yyrl4789, yyrt4789 = z.DecInferLen(yyl4789, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4789 {
				if yyrl4789 <= cap(yyv4789) {
					yyv4789 = yyv4789[:yyrl4789]
				} else {
					yyv4789 = make([]ContainerStatus, yyrl4789)
				}
			} else {
				yyv4789 = make([]ContainerStatus, yyrl4789)
			}
			yyc4789 = true
			yyrr4789 = len(yyv4789)
			if yyrg4789 {
				copy(yyv4789, yyv24789)
			}
		} else if yyl4789 != len(yyv4789) {
			yyv4789 = yyv4789[:yyl4789]
			yyc4789 = true
		}
		yyj4789 := 0
		for ; yyj4789 < yyrr4789; yyj4789++ {
			yyh4789.ElemContainerState(yyj4789)
			if r.TryDecodeAsNil() {
				yyv4789[yyj4789] = ContainerStatus{}
			} else {
				yyv4790 := &yyv4789[yyj4789]
				yyv4790.CodecDecodeSelf(d)
			}

		}
		if yyrt4789 {
			for ; yyj4789 < yyl4789; yyj4789++ {
				yyv4789 = append(yyv4789, ContainerStatus{})
				yyh4789.ElemContainerState(yyj4789)
				if r.TryDecodeAsNil() {
					yyv4789[yyj4789] = ContainerStatus{}
				} else {
					yyv4791 := &yyv4789[yyj4789]
					yyv4791.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4789 := 0
		for ; !r.CheckBreak(); yyj4789++ {

			if yyj4789 >= len(yyv4789) {
				yyv4789 = append(yyv4789, ContainerStatus{}) // var yyz4789 ContainerStatus
				yyc4789 = true
			}
			yyh4789.ElemContainerState(yyj4789)
			if yyj4789 < len(yyv4789) {
				if r.TryDecodeAsNil() {
					yyv4789[yyj4789] = ContainerStatus{}
				} else {
					yyv4792 := &yyv4789[yyj4789]
					yyv4792.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4789 < len(yyv4789) {
			yyv4789 = yyv4789[:yyj4789]
			yyc4789 = true
		} else if yyj4789 == 0 && yyv4789 == nil {
			yyv4789 = []ContainerStatus{}
			yyc4789 = true
		}
	}
	yyh4789.End()
	if yyc4789 {
		*v = yyv4789
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4793 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4794 := &yyv4793
		yy4794.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4795 := *v
	yyh4795, yyl4795 := z.DecSliceHelperStart()
	var yyc4795 bool
	if yyl4795 == 0 {
		if yyv4795 == nil {
			yyv4795 = []PodTemplate{}
			yyc4795 = true
		} else if len(yyv4795) != 0 {
			yyv4795 = yyv4795[:0]
			yyc4795 = true
		}
	} else if yyl4795 > 0 {
		var yyrr4795, yyrl4795 int
		var yyrt4795 bool
		if yyl4795 > cap(yyv4795) {

			yyrg4795 := len(yyv4795) > 0
			yyv24795 := yyv4795
			yyrl4795, yyrt4795 = z.DecInferLen(yyl4795, z.DecBasicHandle().MaxInitLen, 704)
			if yyrt4795 {
				if yyrl4795 <= cap(yyv4795) {
					yyv4795 = yyv4795[:yyrl4795]
				} else {
					yyv4795 = make([]PodTemplate, yyrl4795)
				}
			} else {
				yyv4795 = make([]PodTemplate, yyrl4795)
			}
			yyc4795 = true
			yyrr4795 = len(yyv4795)
			if yyrg4795 {
				copy(yyv4795, yyv24795)
			}
		} else if yyl4795 != len(yyv4795) {
			yyv4795 = yyv4795[:yyl4795]
			yyc4795 = true
		}
		yyj4795 := 0
		for ; yyj4795 < yyrr4795; yyj4795++ {
			yyh4795.ElemContainerState(yyj4795)
			if r.TryDecodeAsNil() {
				yyv4795[yyj4795] = PodTemplate{}
			} else {
				yyv4796 := &yyv4795[yyj4795]
				yyv4796.CodecDecodeSelf(d)
			}

		}
		if yyrt4795 {
			for ; yyj4795 < yyl4795; yyj4795++ {
				yyv4795 = append(yyv4795, PodTemplate{})
				yyh4795.ElemContainerState(yyj4795)
				if r.TryDecodeAsNil() {
					yyv4795[yyj4795] = PodTemplate{}
				} else {
					yyv4797 := &yyv4795[yyj4795]
					yyv4797.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4795 := 0
		for ; !r.CheckBreak(); yyj4795++ {

			if yyj4795 >= len(yyv4795) {
				yyv4795 = append(yyv4795, PodTemplate{}) // var yyz4795 PodTemplate
				yyc4795 = true
			}
			yyh4795.ElemContainerState(yyj4795)
			if yyj4795 < len(yyv4795) {
				if r.TryDecodeAsNil() {
					yyv4795[yyj4795] = PodTemplate{}
				} else {
					yyv4798 := &yyv4795[yyj4795]
					yyv4798.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4795 < len(yyv4795) {
			yyv4795 = yyv4795[:yyj4795]
			yyc4795 = true
		} else if yyj4795 == 0 && yyv4795 == nil {
			yyv4795 = []PodTemplate{}
			yyc4795 = true
		}
	}
	yyh4795.End()
	if yyc4795 {
		*v = yyv4795
	}
}

func (x codecSelfer1234) encSliceReplicationControllerCondition(v []ReplicationControllerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4799 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4800 := &yyv4799
		yy4800.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationControllerCondition(v *[]ReplicationControllerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4801 := *v
	yyh4801, yyl4801 := z.DecSliceHelperStart()
	var yyc4801 bool
	if yyl4801 == 0 {
		if yyv4801 == nil {
			yyv4801 = []ReplicationControllerCondition{}
			yyc4801 = true
		} else if len(yyv4801) != 0 {
			yyv4801 = yyv4801[:0]
			yyc4801 = true
		}
	} else if yyl4801 > 0 {
		var yyrr4801, yyrl4801 int
		var yyrt4801 bool
		if yyl4801 > cap(yyv4801) {

			yyrg4801 := len(yyv4801) > 0
			yyv24801 := yyv4801
			yyrl4801, yyrt4801 = z.DecInferLen(yyl4801, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt4801 {
				if yyrl4801 <= cap(yyv4801) {
					yyv4801 = yyv4801[:yyrl4801]
				} else {
					yyv4801 = make([]ReplicationControllerCondition, yyrl4801)
				}
			} else {
				yyv4801 = make([]ReplicationControllerCondition, yyrl4801)
			}
			yyc4801 = true
			yyrr4801 = len(yyv4801)
			if yyrg4801 {
				copy(yyv4801, yyv24801)
			}
		} else if yyl4801 != len(yyv4801) {
			yyv4801 = yyv4801[:yyl4801]
			yyc4801 = true
		}
		yyj4801 := 0
		for ; yyj4801 < yyrr4801; yyj4801++ {
			yyh4801.ElemContainerState(yyj4801)
			if r.TryDecodeAsNil() {
				yyv4801[yyj4801] = ReplicationControllerCondition{}
			} else {
				yyv4802 := &yyv4801[yyj4801]
				yyv4802.CodecDecodeSelf(d)
			}

		}
		if yyrt4801 {
			for ; yyj4801 < yyl4801; yyj4801++ {
				yyv4801 = append(yyv4801, ReplicationControllerCondition{})
				yyh4801.ElemContainerState(yyj4801)
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = ReplicationControllerCondition{}
				} else {
					yyv4803 := &yyv4801[yyj4801]
					yyv4803.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4801 := 0
		for ; !r.CheckBreak(); yyj4801++ {

			if yyj4801 >= len(yyv4801) {
				yyv4801 = append(yyv4801, ReplicationControllerCondition{}) // var yyz4801 ReplicationControllerCondition
				yyc4801 = true
			}
			yyh4801.ElemContainerState(yyj4801)
			if yyj4801 < len(yyv4801) {
				if r.TryDecodeAsNil() {
					yyv4801[yyj4801] = ReplicationControllerCondition{}
				} else {
					yyv4804 := &yyv4801[yyj4801]
					yyv4804.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4801 < len(yyv4801) {
			yyv4801 = yyv4801[:yyj4801]
			yyc4801 = true
		} else if yyj4801 == 0 && yyv4801 == nil {
			yyv4801 = []ReplicationControllerCondition{}
			yyc4801 = true
		}
	}
	yyh4801.End()
	if yyc4801 {
		*v = yyv4801
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4805 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4806 := &yyv4805
		yy4806.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4807 := *v
	yyh4807, yyl4807 := z.DecSliceHelperStart()
	var yyc4807 bool
	if yyl4807 == 0 {
		if yyv4807 == nil {
			yyv4807 = []ReplicationController{}
			yyc4807 = true
		} else if len(yyv4807) != 0 {
			yyv4807 = yyv4807[:0]
			yyc4807 = true
		}
	} else if yyl4807 > 0 {
		var yyrr4807, yyrl4807 int
		var yyrt4807 bool
		if yyl4807 > cap(yyv4807) {

			yyrg4807 := len(yyv4807) > 0
			yyv24807 := yyv4807
			yyrl4807, yyrt4807 = z.DecInferLen(yyl4807, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt4807 {
				if yyrl4807 <= cap(yyv4807) {
					yyv4807 = yyv4807[:yyrl4807]
				} else {
					yyv4807 = make([]ReplicationController, yyrl4807)
				}
			} else {
				yyv4807 = make([]ReplicationController, yyrl4807)
			}
			yyc4807 = true
			yyrr4807 = len(yyv4807)
			if yyrg4807 {
				copy(yyv4807, yyv24807)
			}
		} else if yyl4807 != len(yyv4807) {
			yyv4807 = yyv4807[:yyl4807]
			yyc4807 = true
		}
		yyj4807 := 0
		for ; yyj4807 < yyrr4807; yyj4807++ {
			yyh4807.ElemContainerState(yyj4807)
			if r.TryDecodeAsNil() {
				yyv4807[yyj4807] = ReplicationController{}
			} else {
				yyv4808 := &yyv4807[yyj4807]
				yyv4808.CodecDecodeSelf(d)
			}

		}
		if yyrt4807 {
			for ; yyj4807 < yyl4807; yyj4807++ {
				yyv4807 = append(yyv4807, ReplicationController{})
				yyh4807.ElemContainerState(yyj4807)
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = ReplicationController{}
				} else {
					yyv4809 := &yyv4807[yyj4807]
					yyv4809.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4807 := 0
		for ; !r.CheckBreak(); yyj4807++ {

			if yyj4807 >= len(yyv4807) {
				yyv4807 = append(yyv4807, ReplicationController{}) // var yyz4807 ReplicationController
				yyc4807 = true
			}
			yyh4807.ElemContainerState(yyj4807)
			if yyj4807 < len(yyv4807) {
				if r.TryDecodeAsNil() {
					yyv4807[yyj4807] = ReplicationController{}
				} else {
					yyv4810 := &yyv4807[yyj4807]
					yyv4810.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4807 < len(yyv4807) {
			yyv4807 = yyv4807[:yyj4807]
			yyc4807 = true
		} else if yyj4807 == 0 && yyv4807 == nil {
			yyv4807 = []ReplicationController{}
			yyc4807 = true
		}
	}
	yyh4807.End()
	if yyc4807 {
		*v = yyv4807
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4811 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4812 := &yyv4811
		yy4812.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4813 := *v
	yyh4813, yyl4813 := z.DecSliceHelperStart()
	var yyc4813 bool
	if yyl4813 == 0 {
		if yyv4813 == nil {
			yyv4813 = []Service{}
			yyc4813 = true
		} else if len(yyv4813) != 0 {
			yyv4813 = yyv4813[:0]
			yyc4813 = true
		}
	} else if yyl4813 > 0 {
		var yyrr4813, yyrl4813 int
		var yyrt4813 bool
		if yyl4813 > cap(yyv4813) {

			yyrg4813 := len(yyv4813) > 0
			yyv24813 := yyv4813
			yyrl4813, yyrt4813 = z.DecInferLen(yyl4813, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4813 {
				if yyrl4813 <= cap(yyv4813) {
					yyv4813 = yyv4813[:yyrl4813]
				} else {
					yyv4813 = make([]Service, yyrl4813)
				}
			} else {
				yyv4813 = make([]Service, yyrl4813)
			}
			yyc4813 = true
			yyrr4813 = len(yyv4813)
			if yyrg4813 {
				copy(yyv4813, yyv24813)
			}
		} else if yyl4813 != len(yyv4813) {
			yyv4813 = yyv4813[:yyl4813]
			yyc4813 = true
		}
		yyj4813 := 0
		for ; yyj4813 < yyrr4813; yyj4813++ {
			yyh4813.ElemContainerState(yyj4813)
			if r.TryDecodeAsNil() {
				yyv4813[yyj4813] = Service{}
			} else {
				yyv4814 := &yyv4813[yyj4813]
				yyv4814.CodecDecodeSelf(d)
			}

		}
		if yyrt4813 {
			for ; yyj4813 < yyl4813; yyj4813++ {
				yyv4813 = append(yyv4813, Service{})
				yyh4813.ElemContainerState(yyj4813)
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = Service{}
				} else {
					yyv4815 := &yyv4813[yyj4813]
					yyv4815.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4813 := 0
		for ; !r.CheckBreak(); yyj4813++ {

			if yyj4813 >= len(yyv4813) {
				yyv4813 = append(yyv4813, Service{}) // var yyz4813 Service
				yyc4813 = true
			}
			yyh4813.ElemContainerState(yyj4813)
			if yyj4813 < len(yyv4813) {
				if r.TryDecodeAsNil() {
					yyv4813[yyj4813] = Service{}
				} else {
					yyv4816 := &yyv4813[yyj4813]
					yyv4816.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4813 < len(yyv4813) {
			yyv4813 = yyv4813[:yyj4813]
			yyc4813 = true
		} else if yyj4813 == 0 && yyv4813 == nil {
			yyv4813 = []Service{}
			yyc4813 = true
		}
	}
	yyh4813.End()
	if yyc4813 {
		*v = yyv4813
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4817 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4818 := &yyv4817
		yy4818.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4819 := *v
	yyh4819, yyl4819 := z.DecSliceHelperStart()
	var yyc4819 bool
	if yyl4819 == 0 {
		if yyv4819 == nil {
			yyv4819 = []LoadBalancerIngress{}
			yyc4819 = true
		} else if len(yyv4819) != 0 {
			yyv4819 = yyv4819[:0]
			yyc4819 = true
		}
	} else if yyl4819 > 0 {
		var yyrr4819, yyrl4819 int
		var yyrt4819 bool
		if yyl4819 > cap(yyv4819) {

			yyrg4819 := len(yyv4819) > 0
			yyv24819 := yyv4819
			yyrl4819, yyrt4819 = z.DecInferLen(yyl4819, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4819 {
				if yyrl4819 <= cap(yyv4819) {
					yyv4819 = yyv4819[:yyrl4819]
				} else {
					yyv4819 = make([]LoadBalancerIngress, yyrl4819)
				}
			} else {
				yyv4819 = make([]LoadBalancerIngress, yyrl4819)
			}
			yyc4819 = true
			yyrr4819 = len(yyv4819)
			if yyrg4819 {
				copy(yyv4819, yyv24819)
			}
		} else if yyl4819 != len(yyv4819) {
			yyv4819 = yyv4819[:yyl4819]
			yyc4819 = true
		}
		yyj4819 := 0
		for ; yyj4819 < yyrr4819; yyj4819++ {
			yyh4819.ElemContainerState(yyj4819)
			if r.TryDecodeAsNil() {
				yyv4819[yyj4819] = LoadBalancerIngress{}
			} else {
				yyv4820 := &yyv4819[yyj4819]
				yyv4820.CodecDecodeSelf(d)
			}

		}
		if yyrt4819 {
			for ; yyj4819 < yyl4819; yyj4819++ {
				yyv4819 = append(yyv4819, LoadBalancerIngress{})
				yyh4819.ElemContainerState(yyj4819)
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = LoadBalancerIngress{}
				} else {
					yyv4821 := &yyv4819[yyj4819]
					yyv4821.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4819 := 0
		for ; !r.CheckBreak(); yyj4819++ {

			if yyj4819 >= len(yyv4819) {
				yyv4819 = append(yyv4819, LoadBalancerIngress{}) // var yyz4819 LoadBalancerIngress
				yyc4819 = true
			}
			yyh4819.ElemContainerState(yyj4819)
			if yyj4819 < len(yyv4819) {
				if r.TryDecodeAsNil() {
					yyv4819[yyj4819] = LoadBalancerIngress{}
				} else {
					yyv4822 := &yyv4819[yyj4819]
					yyv4822.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4819 < len(yyv4819) {
			yyv4819 = yyv4819[:yyj4819]
			yyc4819 = true
		} else if yyj4819 == 0 && yyv4819 == nil {
			yyv4819 = []LoadBalancerIngress{}
			yyc4819 = true
		}
	}
	yyh4819.End()
	if yyc4819 {
		*v = yyv4819
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4823 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4824 := &yyv4823
		yy4824.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4825 := *v
	yyh4825, yyl4825 := z.DecSliceHelperStart()
	var yyc4825 bool
	if yyl4825 == 0 {
		if yyv4825 == nil {
			yyv4825 = []ServicePort{}
			yyc4825 = true
		} else if len(yyv4825) != 0 {
			yyv4825 = yyv4825[:0]
			yyc4825 = true
		}
	} else if yyl4825 > 0 {
		var yyrr4825, yyrl4825 int
		var yyrt4825 bool
		if yyl4825 > cap(yyv4825) {

			yyrg4825 := len(yyv4825) > 0
			yyv24825 := yyv4825
			yyrl4825, yyrt4825 = z.DecInferLen(yyl4825, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4825 {
				if yyrl4825 <= cap(yyv4825) {
					yyv4825 = yyv4825[:yyrl4825]
				} else {
					yyv4825 = make([]ServicePort, yyrl4825)
				}
			} else {
				yyv4825 = make([]ServicePort, yyrl4825)
			}
			yyc4825 = true
			yyrr4825 = len(yyv4825)
			if yyrg4825 {
				copy(yyv4825, yyv24825)
			}
		} else if yyl4825 != len(yyv4825) {
			yyv4825 = yyv4825[:yyl4825]
			yyc4825 = true
		}
		yyj4825 := 0
		for ; yyj4825 < yyrr4825; yyj4825++ {
			yyh4825.ElemContainerState(yyj4825)
			if r.TryDecodeAsNil() {
				yyv4825[yyj4825] = ServicePort{}
			} else {
				yyv4826 := &yyv4825[yyj4825]
				yyv4826.CodecDecodeSelf(d)
			}

		}
		if yyrt4825 {
			for ; yyj4825 < yyl4825; yyj4825++ {
				yyv4825 = append(yyv4825, ServicePort{})
				yyh4825.ElemContainerState(yyj4825)
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ServicePort{}
				} else {
					yyv4827 := &yyv4825[yyj4825]
					yyv4827.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4825 := 0
		for ; !r.CheckBreak(); yyj4825++ {

			if yyj4825 >= len(yyv4825) {
				yyv4825 = append(yyv4825, ServicePort{}) // var yyz4825 ServicePort
				yyc4825 = true
			}
			yyh4825.ElemContainerState(yyj4825)
			if yyj4825 < len(yyv4825) {
				if r.TryDecodeAsNil() {
					yyv4825[yyj4825] = ServicePort{}
				} else {
					yyv4828 := &yyv4825[yyj4825]
					yyv4828.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4825 < len(yyv4825) {
			yyv4825 = yyv4825[:yyj4825]
			yyc4825 = true
		} else if yyj4825 == 0 && yyv4825 == nil {
			yyv4825 = []ServicePort{}
			yyc4825 = true
		}
	}
	yyh4825.End()
	if yyc4825 {
		*v = yyv4825
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4829 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4830 := &yyv4829
		yy4830.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4831 := *v
	yyh4831, yyl4831 := z.DecSliceHelperStart()
	var yyc4831 bool
	if yyl4831 == 0 {
		if yyv4831 == nil {
			yyv4831 = []ObjectReference{}
			yyc4831 = true
		} else if len(yyv4831) != 0 {
			yyv4831 = yyv4831[:0]
			yyc4831 = true
		}
	} else if yyl4831 > 0 {
		var yyrr4831, yyrl4831 int
		var yyrt4831 bool
		if yyl4831 > cap(yyv4831) {

			yyrg4831 := len(yyv4831) > 0
			yyv24831 := yyv4831
			yyrl4831, yyrt4831 = z.DecInferLen(yyl4831, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4831 {
				if yyrl4831 <= cap(yyv4831) {
					yyv4831 = yyv4831[:yyrl4831]
				} else {
					yyv4831 = make([]ObjectReference, yyrl4831)
				}
			} else {
				yyv4831 = make([]ObjectReference, yyrl4831)
			}
			yyc4831 = true
			yyrr4831 = len(yyv4831)
			if yyrg4831 {
				copy(yyv4831, yyv24831)
			}
		} else if yyl4831 != len(yyv4831) {
			yyv4831 = yyv4831[:yyl4831]
			yyc4831 = true
		}
		yyj4831 := 0
		for ; yyj4831 < yyrr4831; yyj4831++ {
			yyh4831.ElemContainerState(yyj4831)
			if r.TryDecodeAsNil() {
				yyv4831[yyj4831] = ObjectReference{}
			} else {
				yyv4832 := &yyv4831[yyj4831]
				yyv4832.CodecDecodeSelf(d)
			}

		}
		if yyrt4831 {
			for ; yyj4831 < yyl4831; yyj4831++ {
				yyv4831 = append(yyv4831, ObjectReference{})
				yyh4831.ElemContainerState(yyj4831)
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = ObjectReference{}
				} else {
					yyv4833 := &yyv4831[yyj4831]
					yyv4833.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4831 := 0
		for ; !r.CheckBreak(); yyj4831++ {

			if yyj4831 >= len(yyv4831) {
				yyv4831 = append(yyv4831, ObjectReference{}) // var yyz4831 ObjectReference
				yyc4831 = true
			}
			yyh4831.ElemContainerState(yyj4831)
			if yyj4831 < len(yyv4831) {
				if r.TryDecodeAsNil() {
					yyv4831[yyj4831] = ObjectReference{}
				} else {
					yyv4834 := &yyv4831[yyj4831]
					yyv4834.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4831 < len(yyv4831) {
			yyv4831 = yyv4831[:yyj4831]
			yyc4831 = true
		} else if yyj4831 == 0 && yyv4831 == nil {
			yyv4831 = []ObjectReference{}
			yyc4831 = true
		}
	}
	yyh4831.End()
	if yyc4831 {
		*v = yyv4831
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4835 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4836 := &yyv4835
		yy4836.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4837 := *v
	yyh4837, yyl4837 := z.DecSliceHelperStart()
	var yyc4837 bool
	if yyl4837 == 0 {
		if yyv4837 == nil {
			yyv4837 = []ServiceAccount{}
			yyc4837 = true
		} else if len(yyv4837) != 0 {
			yyv4837 = yyv4837[:0]
			yyc4837 = true
		}
	} else if yyl4837 > 0 {
		var yyrr4837, yyrl4837 int
		var yyrt4837 bool
		if yyl4837 > cap(yyv4837) {

			yyrg4837 := len(yyv4837) > 0
			yyv24837 := yyv4837
			yyrl4837, yyrt4837 = z.DecInferLen(yyl4837, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4837 {
				if yyrl4837 <= cap(yyv4837) {
					yyv4837 = yyv4837[:yyrl4837]
				} else {
					yyv4837 = make([]ServiceAccount, yyrl4837)
				}
			} else {
				yyv4837 = make([]ServiceAccount, yyrl4837)
			}
			yyc4837 = true
			yyrr4837 = len(yyv4837)
			if yyrg4837 {
				copy(yyv4837, yyv24837)
			}
		} else if yyl4837 != len(yyv4837) {
			yyv4837 = yyv4837[:yyl4837]
			yyc4837 = true
		}
		yyj4837 := 0
		for ; yyj4837 < yyrr4837; yyj4837++ {
			yyh4837.ElemContainerState(yyj4837)
			if r.TryDecodeAsNil() {
				yyv4837[yyj4837] = ServiceAccount{}
			} else {
				yyv4838 := &yyv4837[yyj4837]
				yyv4838.CodecDecodeSelf(d)
			}

		}
		if yyrt4837 {
			for ; yyj4837 < yyl4837; yyj4837++ {
				yyv4837 = append(yyv4837, ServiceAccount{})
				yyh4837.ElemContainerState(yyj4837)
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = ServiceAccount{}
				} else {
					yyv4839 := &yyv4837[yyj4837]
					yyv4839.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4837 := 0
		for ; !r.CheckBreak(); yyj4837++ {

			if yyj4837 >= len(yyv4837) {
				yyv4837 = append(yyv4837, ServiceAccount{}) // var yyz4837 ServiceAccount
				yyc4837 = true
			}
			yyh4837.ElemContainerState(yyj4837)
			if yyj4837 < len(yyv4837) {
				if r.TryDecodeAsNil() {
					yyv4837[yyj4837] = ServiceAccount{}
				} else {
					yyv4840 := &yyv4837[yyj4837]
					yyv4840.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4837 < len(yyv4837) {
			yyv4837 = yyv4837[:yyj4837]
			yyc4837 = true
		} else if yyj4837 == 0 && yyv4837 == nil {
			yyv4837 = []ServiceAccount{}
			yyc4837 = true
		}
	}
	yyh4837.End()
	if yyc4837 {
		*v = yyv4837
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4841 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4842 := &yyv4841
		yy4842.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4843 := *v
	yyh4843, yyl4843 := z.DecSliceHelperStart()
	var yyc4843 bool
	if yyl4843 == 0 {
		if yyv4843 == nil {
			yyv4843 = []EndpointSubset{}
			yyc4843 = true
		} else if len(yyv4843) != 0 {
			yyv4843 = yyv4843[:0]
			yyc4843 = true
		}
	} else if yyl4843 > 0 {
		var yyrr4843, yyrl4843 int
		var yyrt4843 bool
		if yyl4843 > cap(yyv4843) {

			yyrg4843 := len(yyv4843) > 0
			yyv24843 := yyv4843
			yyrl4843, yyrt4843 = z.DecInferLen(yyl4843, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4843 {
				if yyrl4843 <= cap(yyv4843) {
					yyv4843 = yyv4843[:yyrl4843]
				} else {
					yyv4843 = make([]EndpointSubset, yyrl4843)
				}
			} else {
				yyv4843 = make([]EndpointSubset, yyrl4843)
			}
			yyc4843 = true
			yyrr4843 = len(yyv4843)
			if yyrg4843 {
				copy(yyv4843, yyv24843)
			}
		} else if yyl4843 != len(yyv4843) {
			yyv4843 = yyv4843[:yyl4843]
			yyc4843 = true
		}
		yyj4843 := 0
		for ; yyj4843 < yyrr4843; yyj4843++ {
			yyh4843.ElemContainerState(yyj4843)
			if r.TryDecodeAsNil() {
				yyv4843[yyj4843] = EndpointSubset{}
			} else {
				yyv4844 := &yyv4843[yyj4843]
				yyv4844.CodecDecodeSelf(d)
			}

		}
		if yyrt4843 {
			for ; yyj4843 < yyl4843; yyj4843++ {
				yyv4843 = append(yyv4843, EndpointSubset{})
				yyh4843.ElemContainerState(yyj4843)
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = EndpointSubset{}
				} else {
					yyv4845 := &yyv4843[yyj4843]
					yyv4845.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4843 := 0
		for ; !r.CheckBreak(); yyj4843++ {

			if yyj4843 >= len(yyv4843) {
				yyv4843 = append(yyv4843, EndpointSubset{}) // var yyz4843 EndpointSubset
				yyc4843 = true
			}
			yyh4843.ElemContainerState(yyj4843)
			if yyj4843 < len(yyv4843) {
				if r.TryDecodeAsNil() {
					yyv4843[yyj4843] = EndpointSubset{}
				} else {
					yyv4846 := &yyv4843[yyj4843]
					yyv4846.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4843 < len(yyv4843) {
			yyv4843 = yyv4843[:yyj4843]
			yyc4843 = true
		} else if yyj4843 == 0 && yyv4843 == nil {
			yyv4843 = []EndpointSubset{}
			yyc4843 = true
		}
	}
	yyh4843.End()
	if yyc4843 {
		*v = yyv4843
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4847 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4848 := &yyv4847
		yy4848.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4849 := *v
	yyh4849, yyl4849 := z.DecSliceHelperStart()
	var yyc4849 bool
	if yyl4849 == 0 {
		if yyv4849 == nil {
			yyv4849 = []EndpointAddress{}
			yyc4849 = true
		} else if len(yyv4849) != 0 {
			yyv4849 = yyv4849[:0]
			yyc4849 = true
		}
	} else if yyl4849 > 0 {
		var yyrr4849, yyrl4849 int
		var yyrt4849 bool
		if yyl4849 > cap(yyv4849) {

			yyrg4849 := len(yyv4849) > 0
			yyv24849 := yyv4849
			yyrl4849, yyrt4849 = z.DecInferLen(yyl4849, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4849 {
				if yyrl4849 <= cap(yyv4849) {
					yyv4849 = yyv4849[:yyrl4849]
				} else {
					yyv4849 = make([]EndpointAddress, yyrl4849)
				}
			} else {
				yyv4849 = make([]EndpointAddress, yyrl4849)
			}
			yyc4849 = true
			yyrr4849 = len(yyv4849)
			if yyrg4849 {
				copy(yyv4849, yyv24849)
			}
		} else if yyl4849 != len(yyv4849) {
			yyv4849 = yyv4849[:yyl4849]
			yyc4849 = true
		}
		yyj4849 := 0
		for ; yyj4849 < yyrr4849; yyj4849++ {
			yyh4849.ElemContainerState(yyj4849)
			if r.TryDecodeAsNil() {
				yyv4849[yyj4849] = EndpointAddress{}
			} else {
				yyv4850 := &yyv4849[yyj4849]
				yyv4850.CodecDecodeSelf(d)
			}

		}
		if yyrt4849 {
			for ; yyj4849 < yyl4849; yyj4849++ {
				yyv4849 = append(yyv4849, EndpointAddress{})
				yyh4849.ElemContainerState(yyj4849)
				if r.TryDecodeAsNil() {
					yyv4849[yyj4849] = EndpointAddress{}
				} else {
					yyv4851 := &yyv4849[yyj4849]
					yyv4851.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4849 := 0
		for ; !r.CheckBreak(); yyj4849++ {

			if yyj4849 >= len(yyv4849) {
				yyv4849 = append(yyv4849, EndpointAddress{}) // var yyz4849 EndpointAddress
				yyc4849 = true
			}
			yyh4849.ElemContainerState(yyj4849)
			if yyj4849 < len(yyv4849) {
				if r.TryDecodeAsNil() {
					yyv4849[yyj4849] = EndpointAddress{}
				} else {
					yyv4852 := &yyv4849[yyj4849]
					yyv4852.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4849 < len(yyv4849) {
			yyv4849 = yyv4849[:yyj4849]
			yyc4849 = true
		} else if yyj4849 == 0 && yyv4849 == nil {
			yyv4849 = []EndpointAddress{}
			yyc4849 = true
		}
	}
	yyh4849.End()
	if yyc4849 {
		*v = yyv4849
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4853 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4854 := &yyv4853
		yy4854.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4855 := *v
	yyh4855, yyl4855 := z.DecSliceHelperStart()
	var yyc4855 bool
	if yyl4855 == 0 {
		if yyv4855 == nil {
			yyv4855 = []EndpointPort{}
			yyc4855 = true
		} else if len(yyv4855) != 0 {
			yyv4855 = yyv4855[:0]
			yyc4855 = true
		}
	} else if yyl4855 > 0 {
		var yyrr4855, yyrl4855 int
		var yyrt4855 bool
		if yyl4855 > cap(yyv4855) {

			yyrg4855 := len(yyv4855) > 0
			yyv24855 := yyv4855
			yyrl4855, yyrt4855 = z.DecInferLen(yyl4855, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4855 {
				if yyrl4855 <= cap(yyv4855) {
					yyv4855 = yyv4855[:yyrl4855]
				} else {
					yyv4855 = make([]EndpointPort, yyrl4855)
				}
			} else {
				yyv4855 = make([]EndpointPort, yyrl4855)
			}
			yyc4855 = true
			yyrr4855 = len(yyv4855)
			if yyrg4855 {
				copy(yyv4855, yyv24855)
			}
		} else if yyl4855 != len(yyv4855) {
			yyv4855 = yyv4855[:yyl4855]
			yyc4855 = true
		}
		yyj4855 := 0
		for ; yyj4855 < yyrr4855; yyj4855++ {
			yyh4855.ElemContainerState(yyj4855)
			if r.TryDecodeAsNil() {
				yyv4855[yyj4855] = EndpointPort{}
			} else {
				yyv4856 := &yyv4855[yyj4855]
				yyv4856.CodecDecodeSelf(d)
			}

		}
		if yyrt4855 {
			for ; yyj4855 < yyl4855; yyj4855++ {
				yyv4855 = append(yyv4855, EndpointPort{})
				yyh4855.ElemContainerState(yyj4855)
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = EndpointPort{}
				} else {
					yyv4857 := &yyv4855[yyj4855]
					yyv4857.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4855 := 0
		for ; !r.CheckBreak(); yyj4855++ {

			if yyj4855 >= len(yyv4855) {
				yyv4855 = append(yyv4855, EndpointPort{}) // var yyz4855 EndpointPort
				yyc4855 = true
			}
			yyh4855.ElemContainerState(yyj4855)
			if yyj4855 < len(yyv4855) {
				if r.TryDecodeAsNil() {
					yyv4855[yyj4855] = EndpointPort{}
				} else {
					yyv4858 := &yyv4855[yyj4855]
					yyv4858.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4855 < len(yyv4855) {
			yyv4855 = yyv4855[:yyj4855]
			yyc4855 = true
		} else if yyj4855 == 0 && yyv4855 == nil {
			yyv4855 = []EndpointPort{}
			yyc4855 = true
		}
	}
	yyh4855.End()
	if yyc4855 {
		*v = yyv4855
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4859 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4860 := &yyv4859
		yy4860.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4861 := *v
	yyh4861, yyl4861 := z.DecSliceHelperStart()
	var yyc4861 bool
	if yyl4861 == 0 {
		if yyv4861 == nil {
			yyv4861 = []Endpoints{}
			yyc4861 = true
		} else if len(yyv4861) != 0 {
			yyv4861 = yyv4861[:0]
			yyc4861 = true
		}
	} else if yyl4861 > 0 {
		var yyrr4861, yyrl4861 int
		var yyrt4861 bool
		if yyl4861 > cap(yyv4861) {

			yyrg4861 := len(yyv4861) > 0
			yyv24861 := yyv4861
			yyrl4861, yyrt4861 = z.DecInferLen(yyl4861, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4861 {
				if yyrl4861 <= cap(yyv4861) {
					yyv4861 = yyv4861[:yyrl4861]
				} else {
					yyv4861 = make([]Endpoints, yyrl4861)
				}
			} else {
				yyv4861 = make([]Endpoints, yyrl4861)
			}
			yyc4861 = true
			yyrr4861 = len(yyv4861)
			if yyrg4861 {
				copy(yyv4861, yyv24861)
			}
		} else if yyl4861 != len(yyv4861) {
			yyv4861 = yyv4861[:yyl4861]
			yyc4861 = true
		}
		yyj4861 := 0
		for ; yyj4861 < yyrr4861; yyj4861++ {
			yyh4861.ElemContainerState(yyj4861)
			if r.TryDecodeAsNil() {
				yyv4861[yyj4861] = Endpoints{}
			} else {
				yyv4862 := &yyv4861[yyj4861]
				yyv4862.CodecDecodeSelf(d)
			}

		}
		if yyrt4861 {
			for ; yyj4861 < yyl4861; yyj4861++ {
				yyv4861 = append(yyv4861, Endpoints{})
				yyh4861.ElemContainerState(yyj4861)
				if r.TryDecodeAsNil() {
					yyv4861[yyj4861] = Endpoints{}
				} else {
					yyv4863 := &yyv4861[yyj4861]
					yyv4863.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4861 := 0
		for ; !r.CheckBreak(); yyj4861++ {

			if yyj4861 >= len(yyv4861) {
				yyv4861 = append(yyv4861, Endpoints{}) // var yyz4861 Endpoints
				yyc4861 = true
			}
			yyh4861.ElemContainerState(yyj4861)
			if yyj4861 < len(yyv4861) {
				if r.TryDecodeAsNil() {
					yyv4861[yyj4861] = Endpoints{}
				} else {
					yyv4864 := &yyv4861[yyj4861]
					yyv4864.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4861 < len(yyv4861) {
			yyv4861 = yyv4861[:yyj4861]
			yyc4861 = true
		} else if yyj4861 == 0 && yyv4861 == nil {
			yyv4861 = []Endpoints{}
			yyc4861 = true
		}
	}
	yyh4861.End()
	if yyc4861 {
		*v = yyv4861
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4865 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4866 := &yyv4865
		yy4866.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4867 := *v
	yyh4867, yyl4867 := z.DecSliceHelperStart()
	var yyc4867 bool
	if yyl4867 == 0 {
		if yyv4867 == nil {
			yyv4867 = []NodeCondition{}
			yyc4867 = true
		} else if len(yyv4867) != 0 {
			yyv4867 = yyv4867[:0]
			yyc4867 = true
		}
	} else if yyl4867 > 0 {
		var yyrr4867, yyrl4867 int
		var yyrt4867 bool
		if yyl4867 > cap(yyv4867) {

			yyrg4867 := len(yyv4867) > 0
			yyv24867 := yyv4867
			yyrl4867, yyrt4867 = z.DecInferLen(yyl4867, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4867 {
				if yyrl4867 <= cap(yyv4867) {
					yyv4867 = yyv4867[:yyrl4867]
				} else {
					yyv4867 = make([]NodeCondition, yyrl4867)
				}
			} else {
				yyv4867 = make([]NodeCondition, yyrl4867)
			}
			yyc4867 = true
			yyrr4867 = len(yyv4867)
			if yyrg4867 {
				copy(yyv4867, yyv24867)
			}
		} else if yyl4867 != len(yyv4867) {
			yyv4867 = yyv4867[:yyl4867]
			yyc4867 = true
		}
		yyj4867 := 0
		for ; yyj4867 < yyrr4867; yyj4867++ {
			yyh4867.ElemContainerState(yyj4867)
			if r.TryDecodeAsNil() {
				yyv4867[yyj4867] = NodeCondition{}
			} else {
				yyv4868 := &yyv4867[yyj4867]
				yyv4868.CodecDecodeSelf(d)
			}

		}
		if yyrt4867 {
			for ; yyj4867 < yyl4867; yyj4867++ {
				yyv4867 = append(yyv4867, NodeCondition{})
				yyh4867.ElemContainerState(yyj4867)
				if r.TryDecodeAsNil() {
					yyv4867[yyj4867] = NodeCondition{}
				} else {
					yyv4869 := &yyv4867[yyj4867]
					yyv4869.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4867 := 0
		for ; !r.CheckBreak(); yyj4867++ {

			if yyj4867 >= len(yyv4867) {
				yyv4867 = append(yyv4867, NodeCondition{}) // var yyz4867 NodeCondition
				yyc4867 = true
			}
			yyh4867.ElemContainerState(yyj4867)
			if yyj4867 < len(yyv4867) {
				if r.TryDecodeAsNil() {
					yyv4867[yyj4867] = NodeCondition{}
				} else {
					yyv4870 := &yyv4867[yyj4867]
					yyv4870.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4867 < len(yyv4867) {
			yyv4867 = yyv4867[:yyj4867]
			yyc4867 = true
		} else if yyj4867 == 0 && yyv4867 == nil {
			yyv4867 = []NodeCondition{}
			yyc4867 = true
		}
	}
	yyh4867.End()
	if yyc4867 {
		*v = yyv4867
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4871 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4872 := &yyv4871
		yy4872.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4873 := *v
	yyh4873, yyl4873 := z.DecSliceHelperStart()
	var yyc4873 bool
	if yyl4873 == 0 {
		if yyv4873 == nil {
			yyv4873 = []NodeAddress{}
			yyc4873 = true
		} else if len(yyv4873) != 0 {
			yyv4873 = yyv4873[:0]
			yyc4873 = true
		}
	} else if yyl4873 > 0 {
		var yyrr4873, yyrl4873 int
		var yyrt4873 bool
		if yyl4873 > cap(yyv4873) {

			yyrg4873 := len(yyv4873) > 0
			yyv24873 := yyv4873
			yyrl4873, yyrt4873 = z.DecInferLen(yyl4873, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4873 {
				if yyrl4873 <= cap(yyv4873) {
					yyv4873 = yyv4873[:yyrl4873]
				} else {
					yyv4873 = make([]NodeAddress, yyrl4873)
				}
			} else {
				yyv4873 = make([]NodeAddress, yyrl4873)
			}
			yyc4873 = true
			yyrr4873 = len(yyv4873)
			if yyrg4873 {
				copy(yyv4873, yyv24873)
			}
		} else if yyl4873 != len(yyv4873) {
			yyv4873 = yyv4873[:yyl4873]
			yyc4873 = true
		}
		yyj4873 := 0
		for ; yyj4873 < yyrr4873; yyj4873++ {
			yyh4873.ElemContainerState(yyj4873)
			if r.TryDecodeAsNil() {
				yyv4873[yyj4873] = NodeAddress{}
			} else {
				yyv4874 := &yyv4873[yyj4873]
				yyv4874.CodecDecodeSelf(d)
			}

		}
		if yyrt4873 {
			for ; yyj4873 < yyl4873; yyj4873++ {
				yyv4873 = append(yyv4873, NodeAddress{})
				yyh4873.ElemContainerState(yyj4873)
				if r.TryDecodeAsNil() {
					yyv4873[yyj4873] = NodeAddress{}
				} else {
					yyv4875 := &yyv4873[yyj4873]
					yyv4875.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4873 := 0
		for ; !r.CheckBreak(); yyj4873++ {

			if yyj4873 >= len(yyv4873) {
				yyv4873 = append(yyv4873, NodeAddress{}) // var yyz4873 NodeAddress
				yyc4873 = true
			}
			yyh4873.ElemContainerState(yyj4873)
			if yyj4873 < len(yyv4873) {
				if r.TryDecodeAsNil() {
					yyv4873[yyj4873] = NodeAddress{}
				} else {
					yyv4876 := &yyv4873[yyj4873]
					yyv4876.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4873 < len(yyv4873) {
			yyv4873 = yyv4873[:yyj4873]
			yyc4873 = true
		} else if yyj4873 == 0 && yyv4873 == nil {
			yyv4873 = []NodeAddress{}
			yyc4873 = true
		}
	}
	yyh4873.End()
	if yyc4873 {
		*v = yyv4873
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4877 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4878 := &yyv4877
		yy4878.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4879 := *v
	yyh4879, yyl4879 := z.DecSliceHelperStart()
	var yyc4879 bool
	if yyl4879 == 0 {
		if yyv4879 == nil {
			yyv4879 = []ContainerImage{}
			yyc4879 = true
		} else if len(yyv4879) != 0 {
			yyv4879 = yyv4879[:0]
			yyc4879 = true
		}
	} else if yyl4879 > 0 {
		var yyrr4879, yyrl4879 int
		var yyrt4879 bool
		if yyl4879 > cap(yyv4879) {

			yyrg4879 := len(yyv4879) > 0
			yyv24879 := yyv4879
			yyrl4879, yyrt4879 = z.DecInferLen(yyl4879, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4879 {
				if yyrl4879 <= cap(yyv4879) {
					yyv4879 = yyv4879[:yyrl4879]
				} else {
					yyv4879 = make([]ContainerImage, yyrl4879)
				}
			} else {
				yyv4879 = make([]ContainerImage, yyrl4879)
			}
			yyc4879 = true
			yyrr4879 = len(yyv4879)
			if yyrg4879 {
				copy(yyv4879, yyv24879)
			}
		} else if yyl4879 != len(yyv4879) {
			yyv4879 = yyv4879[:yyl4879]
			yyc4879 = true
		}
		yyj4879 := 0
		for ; yyj4879 < yyrr4879; yyj4879++ {
			yyh4879.ElemContainerState(yyj4879)
			if r.TryDecodeAsNil() {
				yyv4879[yyj4879] = ContainerImage{}
			} else {
				yyv4880 := &yyv4879[yyj4879]
				yyv4880.CodecDecodeSelf(d)
			}

		}
		if yyrt4879 {
			for ; yyj4879 < yyl4879; yyj4879++ {
				yyv4879 = append(yyv4879, ContainerImage{})
				yyh4879.ElemContainerState(yyj4879)
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = ContainerImage{}
				} else {
					yyv4881 := &yyv4879[yyj4879]
					yyv4881.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4879 := 0
		for ; !r.CheckBreak(); yyj4879++ {

			if yyj4879 >= len(yyv4879) {
				yyv4879 = append(yyv4879, ContainerImage{}) // var yyz4879 ContainerImage
				yyc4879 = true
			}
			yyh4879.ElemContainerState(yyj4879)
			if yyj4879 < len(yyv4879) {
				if r.TryDecodeAsNil() {
					yyv4879[yyj4879] = ContainerImage{}
				} else {
					yyv4882 := &yyv4879[yyj4879]
					yyv4882.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4879 < len(yyv4879) {
			yyv4879 = yyv4879[:yyj4879]
			yyc4879 = true
		} else if yyj4879 == 0 && yyv4879 == nil {
			yyv4879 = []ContainerImage{}
			yyc4879 = true
		}
	}
	yyh4879.End()
	if yyc4879 {
		*v = yyv4879
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4883 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4883.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4884 := *v
	yyh4884, yyl4884 := z.DecSliceHelperStart()
	var yyc4884 bool
	if yyl4884 == 0 {
		if yyv4884 == nil {
			yyv4884 = []UniqueVolumeName{}
			yyc4884 = true
		} else if len(yyv4884) != 0 {
			yyv4884 = yyv4884[:0]
			yyc4884 = true
		}
	} else if yyl4884 > 0 {
		var yyrr4884, yyrl4884 int
		var yyrt4884 bool
		if yyl4884 > cap(yyv4884) {

			yyrl4884, yyrt4884 = z.DecInferLen(yyl4884, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4884 {
				if yyrl4884 <= cap(yyv4884) {
					yyv4884 = yyv4884[:yyrl4884]
				} else {
					yyv4884 = make([]UniqueVolumeName, yyrl4884)
				}
			} else {
				yyv4884 = make([]UniqueVolumeName, yyrl4884)
			}
			yyc4884 = true
			yyrr4884 = len(yyv4884)
		} else if yyl4884 != len(yyv4884) {
			yyv4884 = yyv4884[:yyl4884]
			yyc4884 = true
		}
		yyj4884 := 0
		for ; yyj4884 < yyrr4884; yyj4884++ {
			yyh4884.ElemContainerState(yyj4884)
			if r.TryDecodeAsNil() {
				yyv4884[yyj4884] = ""
			} else {
				yyv4884[yyj4884] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4884 {
			for ; yyj4884 < yyl4884; yyj4884++ {
				yyv4884 = append(yyv4884, "")
				yyh4884.ElemContainerState(yyj4884)
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = ""
				} else {
					yyv4884[yyj4884] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4884 := 0
		for ; !r.CheckBreak(); yyj4884++ {

			if yyj4884 >= len(yyv4884) {
				yyv4884 = append(yyv4884, "") // var yyz4884 UniqueVolumeName
				yyc4884 = true
			}
			yyh4884.ElemContainerState(yyj4884)
			if yyj4884 < len(yyv4884) {
				if r.TryDecodeAsNil() {
					yyv4884[yyj4884] = ""
				} else {
					yyv4884[yyj4884] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4884 < len(yyv4884) {
			yyv4884 = yyv4884[:yyj4884]
			yyc4884 = true
		} else if yyj4884 == 0 && yyv4884 == nil {
			yyv4884 = []UniqueVolumeName{}
			yyc4884 = true
		}
	}
	yyh4884.End()
	if yyc4884 {
		*v = yyv4884
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4888 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4889 := &yyv4888
		yy4889.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4890 := *v
	yyh4890, yyl4890 := z.DecSliceHelperStart()
	var yyc4890 bool
	if yyl4890 == 0 {
		if yyv4890 == nil {
			yyv4890 = []AttachedVolume{}
			yyc4890 = true
		} else if len(yyv4890) != 0 {
			yyv4890 = yyv4890[:0]
			yyc4890 = true
		}
	} else if yyl4890 > 0 {
		var yyrr4890, yyrl4890 int
		var yyrt4890 bool
		if yyl4890 > cap(yyv4890) {

			yyrg4890 := len(yyv4890) > 0
			yyv24890 := yyv4890
			yyrl4890, yyrt4890 = z.DecInferLen(yyl4890, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4890 {
				if yyrl4890 <= cap(yyv4890) {
					yyv4890 = yyv4890[:yyrl4890]
				} else {
					yyv4890 = make([]AttachedVolume, yyrl4890)
				}
			} else {
				yyv4890 = make([]AttachedVolume, yyrl4890)
			}
			yyc4890 = true
			yyrr4890 = len(yyv4890)
			if yyrg4890 {
				copy(yyv4890, yyv24890)
			}
		} else if yyl4890 != len(yyv4890) {
			yyv4890 = yyv4890[:yyl4890]
			yyc4890 = true
		}
		yyj4890 := 0
		for ; yyj4890 < yyrr4890; yyj4890++ {
			yyh4890.ElemContainerState(yyj4890)
			if r.TryDecodeAsNil() {
				yyv4890[yyj4890] = AttachedVolume{}
			} else {
				yyv4891 := &yyv4890[yyj4890]
				yyv4891.CodecDecodeSelf(d)
			}

		}
		if yyrt4890 {
			for ; yyj4890 < yyl4890; yyj4890++ {
				yyv4890 = append(yyv4890, AttachedVolume{})
				yyh4890.ElemContainerState(yyj4890)
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = AttachedVolume{}
				} else {
					yyv4892 := &yyv4890[yyj4890]
					yyv4892.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4890 := 0
		for ; !r.CheckBreak(); yyj4890++ {

			if yyj4890 >= len(yyv4890) {
				yyv4890 = append(yyv4890, AttachedVolume{}) // var yyz4890 AttachedVolume
				yyc4890 = true
			}
			yyh4890.ElemContainerState(yyj4890)
			if yyj4890 < len(yyv4890) {
				if r.TryDecodeAsNil() {
					yyv4890[yyj4890] = AttachedVolume{}
				} else {
					yyv4893 := &yyv4890[yyj4890]
					yyv4893.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4890 < len(yyv4890) {
			yyv4890 = yyv4890[:yyj4890]
			yyc4890 = true
		} else if yyj4890 == 0 && yyv4890 == nil {
			yyv4890 = []AttachedVolume{}
			yyc4890 = true
		}
	}
	yyh4890.End()
	if yyc4890 {
		*v = yyv4890
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4894 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4895 := &yyv4894
		yy4895.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4896 := *v
	yyh4896, yyl4896 := z.DecSliceHelperStart()
	var yyc4896 bool
	if yyl4896 == 0 {
		if yyv4896 == nil {
			yyv4896 = []PreferAvoidPodsEntry{}
			yyc4896 = true
		} else if len(yyv4896) != 0 {
			yyv4896 = yyv4896[:0]
			yyc4896 = true
		}
	} else if yyl4896 > 0 {
		var yyrr4896, yyrl4896 int
		var yyrt4896 bool
		if yyl4896 > cap(yyv4896) {

			yyrg4896 := len(yyv4896) > 0
			yyv24896 := yyv4896
			yyrl4896, yyrt4896 = z.DecInferLen(yyl4896, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4896 {
				if yyrl4896 <= cap(yyv4896) {
					yyv4896 = yyv4896[:yyrl4896]
				} else {
					yyv4896 = make([]PreferAvoidPodsEntry, yyrl4896)
				}
			} else {
				yyv4896 = make([]PreferAvoidPodsEntry, yyrl4896)
			}
			yyc4896 = true
			yyrr4896 = len(yyv4896)
			if yyrg4896 {
				copy(yyv4896, yyv24896)
			}
		} else if yyl4896 != len(yyv4896) {
			yyv4896 = yyv4896[:yyl4896]
			yyc4896 = true
		}
		yyj4896 := 0
		for ; yyj4896 < yyrr4896; yyj4896++ {
			yyh4896.ElemContainerState(yyj4896)
			if r.TryDecodeAsNil() {
				yyv4896[yyj4896] = PreferAvoidPodsEntry{}
			} else {
				yyv4897 := &yyv4896[yyj4896]
				yyv4897.CodecDecodeSelf(d)
			}

		}
		if yyrt4896 {
			for ; yyj4896 < yyl4896; yyj4896++ {
				yyv4896 = append(yyv4896, PreferAvoidPodsEntry{})
				yyh4896.ElemContainerState(yyj4896)
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = PreferAvoidPodsEntry{}
				} else {
					yyv4898 := &yyv4896[yyj4896]
					yyv4898.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4896 := 0
		for ; !r.CheckBreak(); yyj4896++ {

			if yyj4896 >= len(yyv4896) {
				yyv4896 = append(yyv4896, PreferAvoidPodsEntry{}) // var yyz4896 PreferAvoidPodsEntry
				yyc4896 = true
			}
			yyh4896.ElemContainerState(yyj4896)
			if yyj4896 < len(yyv4896) {
				if r.TryDecodeAsNil() {
					yyv4896[yyj4896] = PreferAvoidPodsEntry{}
				} else {
					yyv4899 := &yyv4896[yyj4896]
					yyv4899.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4896 < len(yyv4896) {
			yyv4896 = yyv4896[:yyj4896]
			yyc4896 = true
		} else if yyj4896 == 0 && yyv4896 == nil {
			yyv4896 = []PreferAvoidPodsEntry{}
			yyc4896 = true
		}
	}
	yyh4896.End()
	if yyc4896 {
		*v = yyv4896
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4900, yyv4900 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4900.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4901 := &yyv4900
		yym4902 := z.EncBinary()
		_ = yym4902
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4901) {
		} else if !yym4902 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4901)
		} else {
			z.EncFallback(yy4901)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4903 := *v
	yyl4903 := r.ReadMapStart()
	yybh4903 := z.DecBasicHandle()
	if yyv4903 == nil {
		yyrl4903, _ := z.DecInferLen(yyl4903, yybh4903.MaxInitLen, 72)
		yyv4903 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4903)
		*v = yyv4903
	}
	var yymk4903 ResourceName
	var yymv4903 pkg3_resource.Quantity
	var yymg4903 bool
	if yybh4903.MapValueReset {
		yymg4903 = true
	}
	if yyl4903 > 0 {
		for yyj4903 := 0; yyj4903 < yyl4903; yyj4903++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4903 = ""
			} else {
				yymk4903 = ResourceName(r.DecodeString())
			}

			if yymg4903 {
				yymv4903 = yyv4903[yymk4903]
			} else {
				yymv4903 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4903 = pkg3_resource.Quantity{}
			} else {
				yyv4905 := &yymv4903
				yym4906 := z.DecBinary()
				_ = yym4906
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4905) {
				} else if !yym4906 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4905)
				} else {
					z.DecFallback(yyv4905, false)
				}
			}

			if yyv4903 != nil {
				yyv4903[yymk4903] = yymv4903
			}
		}
	} else if yyl4903 < 0 {
		for yyj4903 := 0; !r.CheckBreak(); yyj4903++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4903 = ""
			} else {
				yymk4903 = ResourceName(r.DecodeString())
			}

			if yymg4903 {
				yymv4903 = yyv4903[yymk4903]
			} else {
				yymv4903 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4903 = pkg3_resource.Quantity{}
			} else {
				yyv4908 := &yymv4903
				yym4909 := z.DecBinary()
				_ = yym4909
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4908) {
				} else if !yym4909 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4908)
				} else {
					z.DecFallback(yyv4908, false)
				}
			}

			if yyv4903 != nil {
				yyv4903[yymk4903] = yymv4903
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4910 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4911 := &yyv4910
		yy4911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4912 := *v
	yyh4912, yyl4912 := z.DecSliceHelperStart()
	var yyc4912 bool
	if yyl4912 == 0 {
		if yyv4912 == nil {
			yyv4912 = []Node{}
			yyc4912 = true
		} else if len(yyv4912) != 0 {
			yyv4912 = yyv4912[:0]
			yyc4912 = true
		}
	} else if yyl4912 > 0 {
		var yyrr4912, yyrl4912 int
		var yyrt4912 bool
		if yyl4912 > cap(yyv4912) {

			yyrg4912 := len(yyv4912) > 0
			yyv24912 := yyv4912
			yyrl4912, yyrt4912 = z.DecInferLen(yyl4912, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4912 {
				if yyrl4912 <= cap(yyv4912) {
					yyv4912 = yyv4912[:yyrl4912]
				} else {
					yyv4912 = make([]Node, yyrl4912)
				}
			} else {
				yyv4912 = make([]Node, yyrl4912)
			}
			yyc4912 = true
			yyrr4912 = len(yyv4912)
			if yyrg4912 {
				copy(yyv4912, yyv24912)
			}
		} else if yyl4912 != len(yyv4912) {
			yyv4912 = yyv4912[:yyl4912]
			yyc4912 = true
		}
		yyj4912 := 0
		for ; yyj4912 < yyrr4912; yyj4912++ {
			yyh4912.ElemContainerState(yyj4912)
			if r.TryDecodeAsNil() {
				yyv4912[yyj4912] = Node{}
			} else {
				yyv4913 := &yyv4912[yyj4912]
				yyv4913.CodecDecodeSelf(d)
			}

		}
		if yyrt4912 {
			for ; yyj4912 < yyl4912; yyj4912++ {
				yyv4912 = append(yyv4912, Node{})
				yyh4912.ElemContainerState(yyj4912)
				if r.TryDecodeAsNil() {
					yyv4912[yyj4912] = Node{}
				} else {
					yyv4914 := &yyv4912[yyj4912]
					yyv4914.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4912 := 0
		for ; !r.CheckBreak(); yyj4912++ {

			if yyj4912 >= len(yyv4912) {
				yyv4912 = append(yyv4912, Node{}) // var yyz4912 Node
				yyc4912 = true
			}
			yyh4912.ElemContainerState(yyj4912)
			if yyj4912 < len(yyv4912) {
				if r.TryDecodeAsNil() {
					yyv4912[yyj4912] = Node{}
				} else {
					yyv4915 := &yyv4912[yyj4912]
					yyv4915.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4912 < len(yyv4912) {
			yyv4912 = yyv4912[:yyj4912]
			yyc4912 = true
		} else if yyj4912 == 0 && yyv4912 == nil {
			yyv4912 = []Node{}
			yyc4912 = true
		}
	}
	yyh4912.End()
	if yyc4912 {
		*v = yyv4912
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4916 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4916.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4917 := *v
	yyh4917, yyl4917 := z.DecSliceHelperStart()
	var yyc4917 bool
	if yyl4917 == 0 {
		if yyv4917 == nil {
			yyv4917 = []FinalizerName{}
			yyc4917 = true
		} else if len(yyv4917) != 0 {
			yyv4917 = yyv4917[:0]
			yyc4917 = true
		}
	} else if yyl4917 > 0 {
		var yyrr4917, yyrl4917 int
		var yyrt4917 bool
		if yyl4917 > cap(yyv4917) {

			yyrl4917, yyrt4917 = z.DecInferLen(yyl4917, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4917 {
				if yyrl4917 <= cap(yyv4917) {
					yyv4917 = yyv4917[:yyrl4917]
				} else {
					yyv4917 = make([]FinalizerName, yyrl4917)
				}
			} else {
				yyv4917 = make([]FinalizerName, yyrl4917)
			}
			yyc4917 = true
			yyrr4917 = len(yyv4917)
		} else if yyl4917 != len(yyv4917) {
			yyv4917 = yyv4917[:yyl4917]
			yyc4917 = true
		}
		yyj4917 := 0
		for ; yyj4917 < yyrr4917; yyj4917++ {
			yyh4917.ElemContainerState(yyj4917)
			if r.TryDecodeAsNil() {
				yyv4917[yyj4917] = ""
			} else {
				yyv4917[yyj4917] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4917 {
			for ; yyj4917 < yyl4917; yyj4917++ {
				yyv4917 = append(yyv4917, "")
				yyh4917.ElemContainerState(yyj4917)
				if r.TryDecodeAsNil() {
					yyv4917[yyj4917] = ""
				} else {
					yyv4917[yyj4917] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4917 := 0
		for ; !r.CheckBreak(); yyj4917++ {

			if yyj4917 >= len(yyv4917) {
				yyv4917 = append(yyv4917, "") // var yyz4917 FinalizerName
				yyc4917 = true
			}
			yyh4917.ElemContainerState(yyj4917)
			if yyj4917 < len(yyv4917) {
				if r.TryDecodeAsNil() {
					yyv4917[yyj4917] = ""
				} else {
					yyv4917[yyj4917] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4917 < len(yyv4917) {
			yyv4917 = yyv4917[:yyj4917]
			yyc4917 = true
		} else if yyj4917 == 0 && yyv4917 == nil {
			yyv4917 = []FinalizerName{}
			yyc4917 = true
		}
	}
	yyh4917.End()
	if yyc4917 {
		*v = yyv4917
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4921 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4922 := &yyv4921
		yy4922.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4923 := *v
	yyh4923, yyl4923 := z.DecSliceHelperStart()
	var yyc4923 bool
	if yyl4923 == 0 {
		if yyv4923 == nil {
			yyv4923 = []Namespace{}
			yyc4923 = true
		} else if len(yyv4923) != 0 {
			yyv4923 = yyv4923[:0]
			yyc4923 = true
		}
	} else if yyl4923 > 0 {
		var yyrr4923, yyrl4923 int
		var yyrt4923 bool
		if yyl4923 > cap(yyv4923) {

			yyrg4923 := len(yyv4923) > 0
			yyv24923 := yyv4923
			yyrl4923, yyrt4923 = z.DecInferLen(yyl4923, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4923 {
				if yyrl4923 <= cap(yyv4923) {
					yyv4923 = yyv4923[:yyrl4923]
				} else {
					yyv4923 = make([]Namespace, yyrl4923)
				}
			} else {
				yyv4923 = make([]Namespace, yyrl4923)
			}
			yyc4923 = true
			yyrr4923 = len(yyv4923)
			if yyrg4923 {
				copy(yyv4923, yyv24923)
			}
		} else if yyl4923 != len(yyv4923) {
			yyv4923 = yyv4923[:yyl4923]
			yyc4923 = true
		}
		yyj4923 := 0
		for ; yyj4923 < yyrr4923; yyj4923++ {
			yyh4923.ElemContainerState(yyj4923)
			if r.TryDecodeAsNil() {
				yyv4923[yyj4923] = Namespace{}
			} else {
				yyv4924 := &yyv4923[yyj4923]
				yyv4924.CodecDecodeSelf(d)
			}

		}
		if yyrt4923 {
			for ; yyj4923 < yyl4923; yyj4923++ {
				yyv4923 = append(yyv4923, Namespace{})
				yyh4923.ElemContainerState(yyj4923)
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = Namespace{}
				} else {
					yyv4925 := &yyv4923[yyj4923]
					yyv4925.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4923 := 0
		for ; !r.CheckBreak(); yyj4923++ {

			if yyj4923 >= len(yyv4923) {
				yyv4923 = append(yyv4923, Namespace{}) // var yyz4923 Namespace
				yyc4923 = true
			}
			yyh4923.ElemContainerState(yyj4923)
			if yyj4923 < len(yyv4923) {
				if r.TryDecodeAsNil() {
					yyv4923[yyj4923] = Namespace{}
				} else {
					yyv4926 := &yyv4923[yyj4923]
					yyv4926.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4923 < len(yyv4923) {
			yyv4923 = yyv4923[:yyj4923]
			yyc4923 = true
		} else if yyj4923 == 0 && yyv4923 == nil {
			yyv4923 = []Namespace{}
			yyc4923 = true
		}
	}
	yyh4923.End()
	if yyc4923 {
		*v = yyv4923
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4927 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4928 := &yyv4927
		yy4928.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4929 := *v
	yyh4929, yyl4929 := z.DecSliceHelperStart()
	var yyc4929 bool
	if yyl4929 == 0 {
		if yyv4929 == nil {
			yyv4929 = []Event{}
			yyc4929 = true
		} else if len(yyv4929) != 0 {
			yyv4929 = yyv4929[:0]
			yyc4929 = true
		}
	} else if yyl4929 > 0 {
		var yyrr4929, yyrl4929 int
		var yyrt4929 bool
		if yyl4929 > cap(yyv4929) {

			yyrg4929 := len(yyv4929) > 0
			yyv24929 := yyv4929
			yyrl4929, yyrt4929 = z.DecInferLen(yyl4929, z.DecBasicHandle().MaxInitLen, 504)
			if yyrt4929 {
				if yyrl4929 <= cap(yyv4929) {
					yyv4929 = yyv4929[:yyrl4929]
				} else {
					yyv4929 = make([]Event, yyrl4929)
				}
			} else {
				yyv4929 = make([]Event, yyrl4929)
			}
			yyc4929 = true
			yyrr4929 = len(yyv4929)
			if yyrg4929 {
				copy(yyv4929, yyv24929)
			}
		} else if yyl4929 != len(yyv4929) {
			yyv4929 = yyv4929[:yyl4929]
			yyc4929 = true
		}
		yyj4929 := 0
		for ; yyj4929 < yyrr4929; yyj4929++ {
			yyh4929.ElemContainerState(yyj4929)
			if r.TryDecodeAsNil() {
				yyv4929[yyj4929] = Event{}
			} else {
				yyv4930 := &yyv4929[yyj4929]
				yyv4930.CodecDecodeSelf(d)
			}

		}
		if yyrt4929 {
			for ; yyj4929 < yyl4929; yyj4929++ {
				yyv4929 = append(yyv4929, Event{})
				yyh4929.ElemContainerState(yyj4929)
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = Event{}
				} else {
					yyv4931 := &yyv4929[yyj4929]
					yyv4931.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4929 := 0
		for ; !r.CheckBreak(); yyj4929++ {

			if yyj4929 >= len(yyv4929) {
				yyv4929 = append(yyv4929, Event{}) // var yyz4929 Event
				yyc4929 = true
			}
			yyh4929.ElemContainerState(yyj4929)
			if yyj4929 < len(yyv4929) {
				if r.TryDecodeAsNil() {
					yyv4929[yyj4929] = Event{}
				} else {
					yyv4932 := &yyv4929[yyj4929]
					yyv4932.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4929 < len(yyv4929) {
			yyv4929 = yyv4929[:yyj4929]
			yyc4929 = true
		} else if yyj4929 == 0 && yyv4929 == nil {
			yyv4929 = []Event{}
			yyc4929 = true
		}
	}
	yyh4929.End()
	if yyc4929 {
		*v = yyv4929
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4933 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4933 == nil {
			r.EncodeNil()
		} else {
			yym4934 := z.EncBinary()
			_ = yym4934
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4933) {
			} else {
				z.EncFallback(yyv4933)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4935 := *v
	yyh4935, yyl4935 := z.DecSliceHelperStart()
	var yyc4935 bool
	if yyl4935 == 0 {
		if yyv4935 == nil {
			yyv4935 = []pkg7_runtime.Object{}
			yyc4935 = true
		} else if len(yyv4935) != 0 {
			yyv4935 = yyv4935[:0]
			yyc4935 = true
		}
	} else if yyl4935 > 0 {
		var yyrr4935, yyrl4935 int
		var yyrt4935 bool
		if yyl4935 > cap(yyv4935) {

			yyrg4935 := len(yyv4935) > 0
			yyv24935 := yyv4935
			yyrl4935, yyrt4935 = z.DecInferLen(yyl4935, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4935 {
				if yyrl4935 <= cap(yyv4935) {
					yyv4935 = yyv4935[:yyrl4935]
				} else {
					yyv4935 = make([]pkg7_runtime.Object, yyrl4935)
				}
			} else {
				yyv4935 = make([]pkg7_runtime.Object, yyrl4935)
			}
			yyc4935 = true
			yyrr4935 = len(yyv4935)
			if yyrg4935 {
				copy(yyv4935, yyv24935)
			}
		} else if yyl4935 != len(yyv4935) {
			yyv4935 = yyv4935[:yyl4935]
			yyc4935 = true
		}
		yyj4935 := 0
		for ; yyj4935 < yyrr4935; yyj4935++ {
			yyh4935.ElemContainerState(yyj4935)
			if r.TryDecodeAsNil() {
				yyv4935[yyj4935] = nil
			} else {
				yyv4936 := &yyv4935[yyj4935]
				yym4937 := z.DecBinary()
				_ = yym4937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4936) {
				} else {
					z.DecFallback(yyv4936, true)
				}
			}

		}
		if yyrt4935 {
			for ; yyj4935 < yyl4935; yyj4935++ {
				yyv4935 = append(yyv4935, nil)
				yyh4935.ElemContainerState(yyj4935)
				if r.TryDecodeAsNil() {
					yyv4935[yyj4935] = nil
				} else {
					yyv4938 := &yyv4935[yyj4935]
					yym4939 := z.DecBinary()
					_ = yym4939
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4938) {
					} else {
						z.DecFallback(yyv4938, true)
					}
				}

			}
		}

	} else {
		yyj4935 := 0
		for ; !r.CheckBreak(); yyj4935++ {

			if yyj4935 >= len(yyv4935) {
				yyv4935 = append(yyv4935, nil) // var yyz4935 pkg7_runtime.Object
				yyc4935 = true
			}
			yyh4935.ElemContainerState(yyj4935)
			if yyj4935 < len(yyv4935) {
				if r.TryDecodeAsNil() {
					yyv4935[yyj4935] = nil
				} else {
					yyv4940 := &yyv4935[yyj4935]
					yym4941 := z.DecBinary()
					_ = yym4941
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4940) {
					} else {
						z.DecFallback(yyv4940, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4935 < len(yyv4935) {
			yyv4935 = yyv4935[:yyj4935]
			yyc4935 = true
		} else if yyj4935 == 0 && yyv4935 == nil {
			yyv4935 = []pkg7_runtime.Object{}
			yyc4935 = true
		}
	}
	yyh4935.End()
	if yyc4935 {
		*v = yyv4935
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4942 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4943 := &yyv4942
		yy4943.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4944 := *v
	yyh4944, yyl4944 := z.DecSliceHelperStart()
	var yyc4944 bool
	if yyl4944 == 0 {
		if yyv4944 == nil {
			yyv4944 = []LimitRangeItem{}
			yyc4944 = true
		} else if len(yyv4944) != 0 {
			yyv4944 = yyv4944[:0]
			yyc4944 = true
		}
	} else if yyl4944 > 0 {
		var yyrr4944, yyrl4944 int
		var yyrt4944 bool
		if yyl4944 > cap(yyv4944) {

			yyrg4944 := len(yyv4944) > 0
			yyv24944 := yyv4944
			yyrl4944, yyrt4944 = z.DecInferLen(yyl4944, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4944 {
				if yyrl4944 <= cap(yyv4944) {
					yyv4944 = yyv4944[:yyrl4944]
				} else {
					yyv4944 = make([]LimitRangeItem, yyrl4944)
				}
			} else {
				yyv4944 = make([]LimitRangeItem, yyrl4944)
			}
			yyc4944 = true
			yyrr4944 = len(yyv4944)
			if yyrg4944 {
				copy(yyv4944, yyv24944)
			}
		} else if yyl4944 != len(yyv4944) {
			yyv4944 = yyv4944[:yyl4944]
			yyc4944 = true
		}
		yyj4944 := 0
		for ; yyj4944 < yyrr4944; yyj4944++ {
			yyh4944.ElemContainerState(yyj4944)
			if r.TryDecodeAsNil() {
				yyv4944[yyj4944] = LimitRangeItem{}
			} else {
				yyv4945 := &yyv4944[yyj4944]
				yyv4945.CodecDecodeSelf(d)
			}

		}
		if yyrt4944 {
			for ; yyj4944 < yyl4944; yyj4944++ {
				yyv4944 = append(yyv4944, LimitRangeItem{})
				yyh4944.ElemContainerState(yyj4944)
				if r.TryDecodeAsNil() {
					yyv4944[yyj4944] = LimitRangeItem{}
				} else {
					yyv4946 := &yyv4944[yyj4944]
					yyv4946.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4944 := 0
		for ; !r.CheckBreak(); yyj4944++ {

			if yyj4944 >= len(yyv4944) {
				yyv4944 = append(yyv4944, LimitRangeItem{}) // var yyz4944 LimitRangeItem
				yyc4944 = true
			}
			yyh4944.ElemContainerState(yyj4944)
			if yyj4944 < len(yyv4944) {
				if r.TryDecodeAsNil() {
					yyv4944[yyj4944] = LimitRangeItem{}
				} else {
					yyv4947 := &yyv4944[yyj4944]
					yyv4947.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4944 < len(yyv4944) {
			yyv4944 = yyv4944[:yyj4944]
			yyc4944 = true
		} else if yyj4944 == 0 && yyv4944 == nil {
			yyv4944 = []LimitRangeItem{}
			yyc4944 = true
		}
	}
	yyh4944.End()
	if yyc4944 {
		*v = yyv4944
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4948 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4949 := &yyv4948
		yy4949.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4950 := *v
	yyh4950, yyl4950 := z.DecSliceHelperStart()
	var yyc4950 bool
	if yyl4950 == 0 {
		if yyv4950 == nil {
			yyv4950 = []LimitRange{}
			yyc4950 = true
		} else if len(yyv4950) != 0 {
			yyv4950 = yyv4950[:0]
			yyc4950 = true
		}
	} else if yyl4950 > 0 {
		var yyrr4950, yyrl4950 int
		var yyrt4950 bool
		if yyl4950 > cap(yyv4950) {

			yyrg4950 := len(yyv4950) > 0
			yyv24950 := yyv4950
			yyrl4950, yyrt4950 = z.DecInferLen(yyl4950, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4950 {
				if yyrl4950 <= cap(yyv4950) {
					yyv4950 = yyv4950[:yyrl4950]
				} else {
					yyv4950 = make([]LimitRange, yyrl4950)
				}
			} else {
				yyv4950 = make([]LimitRange, yyrl4950)
			}
			yyc4950 = true
			yyrr4950 = len(yyv4950)
			if yyrg4950 {
				copy(yyv4950, yyv24950)
			}
		} else if yyl4950 != len(yyv4950) {
			yyv4950 = yyv4950[:yyl4950]
			yyc4950 = true
		}
		yyj4950 := 0
		for ; yyj4950 < yyrr4950; yyj4950++ {
			yyh4950.ElemContainerState(yyj4950)
			if r.TryDecodeAsNil() {
				yyv4950[yyj4950] = LimitRange{}
			} else {
				yyv4951 := &yyv4950[yyj4950]
				yyv4951.CodecDecodeSelf(d)
			}

		}
		if yyrt4950 {
			for ; yyj4950 < yyl4950; yyj4950++ {
				yyv4950 = append(yyv4950, LimitRange{})
				yyh4950.ElemContainerState(yyj4950)
				if r.TryDecodeAsNil() {
					yyv4950[yyj4950] = LimitRange{}
				} else {
					yyv4952 := &yyv4950[yyj4950]
					yyv4952.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4950 := 0
		for ; !r.CheckBreak(); yyj4950++ {

			if yyj4950 >= len(yyv4950) {
				yyv4950 = append(yyv4950, LimitRange{}) // var yyz4950 LimitRange
				yyc4950 = true
			}
			yyh4950.ElemContainerState(yyj4950)
			if yyj4950 < len(yyv4950) {
				if r.TryDecodeAsNil() {
					yyv4950[yyj4950] = LimitRange{}
				} else {
					yyv4953 := &yyv4950[yyj4950]
					yyv4953.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4950 < len(yyv4950) {
			yyv4950 = yyv4950[:yyj4950]
			yyc4950 = true
		} else if yyj4950 == 0 && yyv4950 == nil {
			yyv4950 = []LimitRange{}
			yyc4950 = true
		}
	}
	yyh4950.End()
	if yyc4950 {
		*v = yyv4950
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4954 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4954.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4955 := *v
	yyh4955, yyl4955 := z.DecSliceHelperStart()
	var yyc4955 bool
	if yyl4955 == 0 {
		if yyv4955 == nil {
			yyv4955 = []ResourceQuotaScope{}
			yyc4955 = true
		} else if len(yyv4955) != 0 {
			yyv4955 = yyv4955[:0]
			yyc4955 = true
		}
	} else if yyl4955 > 0 {
		var yyrr4955, yyrl4955 int
		var yyrt4955 bool
		if yyl4955 > cap(yyv4955) {

			yyrl4955, yyrt4955 = z.DecInferLen(yyl4955, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4955 {
				if yyrl4955 <= cap(yyv4955) {
					yyv4955 = yyv4955[:yyrl4955]
				} else {
					yyv4955 = make([]ResourceQuotaScope, yyrl4955)
				}
			} else {
				yyv4955 = make([]ResourceQuotaScope, yyrl4955)
			}
			yyc4955 = true
			yyrr4955 = len(yyv4955)
		} else if yyl4955 != len(yyv4955) {
			yyv4955 = yyv4955[:yyl4955]
			yyc4955 = true
		}
		yyj4955 := 0
		for ; yyj4955 < yyrr4955; yyj4955++ {
			yyh4955.ElemContainerState(yyj4955)
			if r.TryDecodeAsNil() {
				yyv4955[yyj4955] = ""
			} else {
				yyv4955[yyj4955] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4955 {
			for ; yyj4955 < yyl4955; yyj4955++ {
				yyv4955 = append(yyv4955, "")
				yyh4955.ElemContainerState(yyj4955)
				if r.TryDecodeAsNil() {
					yyv4955[yyj4955] = ""
				} else {
					yyv4955[yyj4955] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4955 := 0
		for ; !r.CheckBreak(); yyj4955++ {

			if yyj4955 >= len(yyv4955) {
				yyv4955 = append(yyv4955, "") // var yyz4955 ResourceQuotaScope
				yyc4955 = true
			}
			yyh4955.ElemContainerState(yyj4955)
			if yyj4955 < len(yyv4955) {
				if r.TryDecodeAsNil() {
					yyv4955[yyj4955] = ""
				} else {
					yyv4955[yyj4955] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4955 < len(yyv4955) {
			yyv4955 = yyv4955[:yyj4955]
			yyc4955 = true
		} else if yyj4955 == 0 && yyv4955 == nil {
			yyv4955 = []ResourceQuotaScope{}
			yyc4955 = true
		}
	}
	yyh4955.End()
	if yyc4955 {
		*v = yyv4955
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4959 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4960 := &yyv4959
		yy4960.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4961 := *v
	yyh4961, yyl4961 := z.DecSliceHelperStart()
	var yyc4961 bool
	if yyl4961 == 0 {
		if yyv4961 == nil {
			yyv4961 = []ResourceQuota{}
			yyc4961 = true
		} else if len(yyv4961) != 0 {
			yyv4961 = yyv4961[:0]
			yyc4961 = true
		}
	} else if yyl4961 > 0 {
		var yyrr4961, yyrl4961 int
		var yyrt4961 bool
		if yyl4961 > cap(yyv4961) {

			yyrg4961 := len(yyv4961) > 0
			yyv24961 := yyv4961
			yyrl4961, yyrt4961 = z.DecInferLen(yyl4961, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt4961 {
				if yyrl4961 <= cap(yyv4961) {
					yyv4961 = yyv4961[:yyrl4961]
				} else {
					yyv4961 = make([]ResourceQuota, yyrl4961)
				}
			} else {
				yyv4961 = make([]ResourceQuota, yyrl4961)
			}
			yyc4961 = true
			yyrr4961 = len(yyv4961)
			if yyrg4961 {
				copy(yyv4961, yyv24961)
			}
		} else if yyl4961 != len(yyv4961) {
			yyv4961 = yyv4961[:yyl4961]
			yyc4961 = true
		}
		yyj4961 := 0
		for ; yyj4961 < yyrr4961; yyj4961++ {
			yyh4961.ElemContainerState(yyj4961)
			if r.TryDecodeAsNil() {
				yyv4961[yyj4961] = ResourceQuota{}
			} else {
				yyv4962 := &yyv4961[yyj4961]
				yyv4962.CodecDecodeSelf(d)
			}

		}
		if yyrt4961 {
			for ; yyj4961 < yyl4961; yyj4961++ {
				yyv4961 = append(yyv4961, ResourceQuota{})
				yyh4961.ElemContainerState(yyj4961)
				if r.TryDecodeAsNil() {
					yyv4961[yyj4961] = ResourceQuota{}
				} else {
					yyv4963 := &yyv4961[yyj4961]
					yyv4963.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4961 := 0
		for ; !r.CheckBreak(); yyj4961++ {

			if yyj4961 >= len(yyv4961) {
				yyv4961 = append(yyv4961, ResourceQuota{}) // var yyz4961 ResourceQuota
				yyc4961 = true
			}
			yyh4961.ElemContainerState(yyj4961)
			if yyj4961 < len(yyv4961) {
				if r.TryDecodeAsNil() {
					yyv4961[yyj4961] = ResourceQuota{}
				} else {
					yyv4964 := &yyv4961[yyj4961]
					yyv4964.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4961 < len(yyv4961) {
			yyv4961 = yyv4961[:yyj4961]
			yyc4961 = true
		} else if yyj4961 == 0 && yyv4961 == nil {
			yyv4961 = []ResourceQuota{}
			yyc4961 = true
		}
	}
	yyh4961.End()
	if yyc4961 {
		*v = yyv4961
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4965, yyv4965 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4966 := z.EncBinary()
		_ = yym4966
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4965))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4965 == nil {
			r.EncodeNil()
		} else {
			yym4967 := z.EncBinary()
			_ = yym4967
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4965))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4968 := *v
	yyl4968 := r.ReadMapStart()
	yybh4968 := z.DecBasicHandle()
	if yyv4968 == nil {
		yyrl4968, _ := z.DecInferLen(yyl4968, yybh4968.MaxInitLen, 40)
		yyv4968 = make(map[string][]uint8, yyrl4968)
		*v = yyv4968
	}
	var yymk4968 string
	var yymv4968 []uint8
	var yymg4968 bool
	if yybh4968.MapValueReset {
		yymg4968 = true
	}
	if yyl4968 > 0 {
		for yyj4968 := 0; yyj4968 < yyl4968; yyj4968++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4968 = ""
			} else {
				yymk4968 = string(r.DecodeString())
			}

			if yymg4968 {
				yymv4968 = yyv4968[yymk4968]
			} else {
				yymv4968 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4968 = nil
			} else {
				yyv4970 := &yymv4968
				yym4971 := z.DecBinary()
				_ = yym4971
				if false {
				} else {
					*yyv4970 = r.DecodeBytes(*(*[]byte)(yyv4970), false, false)
				}
			}

			if yyv4968 != nil {
				yyv4968[yymk4968] = yymv4968
			}
		}
	} else if yyl4968 < 0 {
		for yyj4968 := 0; !r.CheckBreak(); yyj4968++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4968 = ""
			} else {
				yymk4968 = string(r.DecodeString())
			}

			if yymg4968 {
				yymv4968 = yyv4968[yymk4968]
			} else {
				yymv4968 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4968 = nil
			} else {
				yyv4973 := &yymv4968
				yym4974 := z.DecBinary()
				_ = yym4974
				if false {
				} else {
					*yyv4973 = r.DecodeBytes(*(*[]byte)(yyv4973), false, false)
				}
			}

			if yyv4968 != nil {
				yyv4968[yymk4968] = yymv4968
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4975 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4976 := &yyv4975
		yy4976.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4977 := *v
	yyh4977, yyl4977 := z.DecSliceHelperStart()
	var yyc4977 bool
	if yyl4977 == 0 {
		if yyv4977 == nil {
			yyv4977 = []Secret{}
			yyc4977 = true
		} else if len(yyv4977) != 0 {
			yyv4977 = yyv4977[:0]
			yyc4977 = true
		}
	} else if yyl4977 > 0 {
		var yyrr4977, yyrl4977 int
		var yyrt4977 bool
		if yyl4977 > cap(yyv4977) {

			yyrg4977 := len(yyv4977) > 0
			yyv24977 := yyv4977
			yyrl4977, yyrt4977 = z.DecInferLen(yyl4977, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4977 {
				if yyrl4977 <= cap(yyv4977) {
					yyv4977 = yyv4977[:yyrl4977]
				} else {
					yyv4977 = make([]Secret, yyrl4977)
				}
			} else {
				yyv4977 = make([]Secret, yyrl4977)
			}
			yyc4977 = true
			yyrr4977 = len(yyv4977)
			if yyrg4977 {
				copy(yyv4977, yyv24977)
			}
		} else if yyl4977 != len(yyv4977) {
			yyv4977 = yyv4977[:yyl4977]
			yyc4977 = true
		}
		yyj4977 := 0
		for ; yyj4977 < yyrr4977; yyj4977++ {
			yyh4977.ElemContainerState(yyj4977)
			if r.TryDecodeAsNil() {
				yyv4977[yyj4977] = Secret{}
			} else {
				yyv4978 := &yyv4977[yyj4977]
				yyv4978.CodecDecodeSelf(d)
			}

		}
		if yyrt4977 {
			for ; yyj4977 < yyl4977; yyj4977++ {
				yyv4977 = append(yyv4977, Secret{})
				yyh4977.ElemContainerState(yyj4977)
				if r.TryDecodeAsNil() {
					yyv4977[yyj4977] = Secret{}
				} else {
					yyv4979 := &yyv4977[yyj4977]
					yyv4979.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4977 := 0
		for ; !r.CheckBreak(); yyj4977++ {

			if yyj4977 >= len(yyv4977) {
				yyv4977 = append(yyv4977, Secret{}) // var yyz4977 Secret
				yyc4977 = true
			}
			yyh4977.ElemContainerState(yyj4977)
			if yyj4977 < len(yyv4977) {
				if r.TryDecodeAsNil() {
					yyv4977[yyj4977] = Secret{}
				} else {
					yyv4980 := &yyv4977[yyj4977]
					yyv4980.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4977 < len(yyv4977) {
			yyv4977 = yyv4977[:yyj4977]
			yyc4977 = true
		} else if yyj4977 == 0 && yyv4977 == nil {
			yyv4977 = []Secret{}
			yyc4977 = true
		}
	}
	yyh4977.End()
	if yyc4977 {
		*v = yyv4977
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4981 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4982 := &yyv4981
		yy4982.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4983 := *v
	yyh4983, yyl4983 := z.DecSliceHelperStart()
	var yyc4983 bool
	if yyl4983 == 0 {
		if yyv4983 == nil {
			yyv4983 = []ConfigMap{}
			yyc4983 = true
		} else if len(yyv4983) != 0 {
			yyv4983 = yyv4983[:0]
			yyc4983 = true
		}
	} else if yyl4983 > 0 {
		var yyrr4983, yyrl4983 int
		var yyrt4983 bool
		if yyl4983 > cap(yyv4983) {

			yyrg4983 := len(yyv4983) > 0
			yyv24983 := yyv4983
			yyrl4983, yyrt4983 = z.DecInferLen(yyl4983, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4983 {
				if yyrl4983 <= cap(yyv4983) {
					yyv4983 = yyv4983[:yyrl4983]
				} else {
					yyv4983 = make([]ConfigMap, yyrl4983)
				}
			} else {
				yyv4983 = make([]ConfigMap, yyrl4983)
			}
			yyc4983 = true
			yyrr4983 = len(yyv4983)
			if yyrg4983 {
				copy(yyv4983, yyv24983)
			}
		} else if yyl4983 != len(yyv4983) {
			yyv4983 = yyv4983[:yyl4983]
			yyc4983 = true
		}
		yyj4983 := 0
		for ; yyj4983 < yyrr4983; yyj4983++ {
			yyh4983.ElemContainerState(yyj4983)
			if r.TryDecodeAsNil() {
				yyv4983[yyj4983] = ConfigMap{}
			} else {
				yyv4984 := &yyv4983[yyj4983]
				yyv4984.CodecDecodeSelf(d)
			}

		}
		if yyrt4983 {
			for ; yyj4983 < yyl4983; yyj4983++ {
				yyv4983 = append(yyv4983, ConfigMap{})
				yyh4983.ElemContainerState(yyj4983)
				if r.TryDecodeAsNil() {
					yyv4983[yyj4983] = ConfigMap{}
				} else {
					yyv4985 := &yyv4983[yyj4983]
					yyv4985.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4983 := 0
		for ; !r.CheckBreak(); yyj4983++ {

			if yyj4983 >= len(yyv4983) {
				yyv4983 = append(yyv4983, ConfigMap{}) // var yyz4983 ConfigMap
				yyc4983 = true
			}
			yyh4983.ElemContainerState(yyj4983)
			if yyj4983 < len(yyv4983) {
				if r.TryDecodeAsNil() {
					yyv4983[yyj4983] = ConfigMap{}
				} else {
					yyv4986 := &yyv4983[yyj4983]
					yyv4986.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4983 < len(yyv4983) {
			yyv4983 = yyv4983[:yyj4983]
			yyc4983 = true
		} else if yyj4983 == 0 && yyv4983 == nil {
			yyv4983 = []ConfigMap{}
			yyc4983 = true
		}
	}
	yyh4983.End()
	if yyc4983 {
		*v = yyv4983
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4987 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4988 := &yyv4987
		yy4988.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4989 := *v
	yyh4989, yyl4989 := z.DecSliceHelperStart()
	var yyc4989 bool
	if yyl4989 == 0 {
		if yyv4989 == nil {
			yyv4989 = []ComponentCondition{}
			yyc4989 = true
		} else if len(yyv4989) != 0 {
			yyv4989 = yyv4989[:0]
			yyc4989 = true
		}
	} else if yyl4989 > 0 {
		var yyrr4989, yyrl4989 int
		var yyrt4989 bool
		if yyl4989 > cap(yyv4989) {

			yyrg4989 := len(yyv4989) > 0
			yyv24989 := yyv4989
			yyrl4989, yyrt4989 = z.DecInferLen(yyl4989, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4989 {
				if yyrl4989 <= cap(yyv4989) {
					yyv4989 = yyv4989[:yyrl4989]
				} else {
					yyv4989 = make([]ComponentCondition, yyrl4989)
				}
			} else {
				yyv4989 = make([]ComponentCondition, yyrl4989)
			}
			yyc4989 = true
			yyrr4989 = len(yyv4989)
			if yyrg4989 {
				copy(yyv4989, yyv24989)
			}
		} else if yyl4989 != len(yyv4989) {
			yyv4989 = yyv4989[:yyl4989]
			yyc4989 = true
		}
		yyj4989 := 0
		for ; yyj4989 < yyrr4989; yyj4989++ {
			yyh4989.ElemContainerState(yyj4989)
			if r.TryDecodeAsNil() {
				yyv4989[yyj4989] = ComponentCondition{}
			} else {
				yyv4990 := &yyv4989[yyj4989]
				yyv4990.CodecDecodeSelf(d)
			}

		}
		if yyrt4989 {
			for ; yyj4989 < yyl4989; yyj4989++ {
				yyv4989 = append(yyv4989, ComponentCondition{})
				yyh4989.ElemContainerState(yyj4989)
				if r.TryDecodeAsNil() {
					yyv4989[yyj4989] = ComponentCondition{}
				} else {
					yyv4991 := &yyv4989[yyj4989]
					yyv4991.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4989 := 0
		for ; !r.CheckBreak(); yyj4989++ {

			if yyj4989 >= len(yyv4989) {
				yyv4989 = append(yyv4989, ComponentCondition{}) // var yyz4989 ComponentCondition
				yyc4989 = true
			}
			yyh4989.ElemContainerState(yyj4989)
			if yyj4989 < len(yyv4989) {
				if r.TryDecodeAsNil() {
					yyv4989[yyj4989] = ComponentCondition{}
				} else {
					yyv4992 := &yyv4989[yyj4989]
					yyv4992.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4989 < len(yyv4989) {
			yyv4989 = yyv4989[:yyj4989]
			yyc4989 = true
		} else if yyj4989 == 0 && yyv4989 == nil {
			yyv4989 = []ComponentCondition{}
			yyc4989 = true
		}
	}
	yyh4989.End()
	if yyc4989 {
		*v = yyv4989
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4993 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4994 := &yyv4993
		yy4994.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4995 := *v
	yyh4995, yyl4995 := z.DecSliceHelperStart()
	var yyc4995 bool
	if yyl4995 == 0 {
		if yyv4995 == nil {
			yyv4995 = []ComponentStatus{}
			yyc4995 = true
		} else if len(yyv4995) != 0 {
			yyv4995 = yyv4995[:0]
			yyc4995 = true
		}
	} else if yyl4995 > 0 {
		var yyrr4995, yyrl4995 int
		var yyrt4995 bool
		if yyl4995 > cap(yyv4995) {

			yyrg4995 := len(yyv4995) > 0
			yyv24995 := yyv4995
			yyrl4995, yyrt4995 = z.DecInferLen(yyl4995, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4995 {
				if yyrl4995 <= cap(yyv4995) {
					yyv4995 = yyv4995[:yyrl4995]
				} else {
					yyv4995 = make([]ComponentStatus, yyrl4995)
				}
			} else {
				yyv4995 = make([]ComponentStatus, yyrl4995)
			}
			yyc4995 = true
			yyrr4995 = len(yyv4995)
			if yyrg4995 {
				copy(yyv4995, yyv24995)
			}
		} else if yyl4995 != len(yyv4995) {
			yyv4995 = yyv4995[:yyl4995]
			yyc4995 = true
		}
		yyj4995 := 0
		for ; yyj4995 < yyrr4995; yyj4995++ {
			yyh4995.ElemContainerState(yyj4995)
			if r.TryDecodeAsNil() {
				yyv4995[yyj4995] = ComponentStatus{}
			} else {
				yyv4996 := &yyv4995[yyj4995]
				yyv4996.CodecDecodeSelf(d)
			}

		}
		if yyrt4995 {
			for ; yyj4995 < yyl4995; yyj4995++ {
				yyv4995 = append(yyv4995, ComponentStatus{})
				yyh4995.ElemContainerState(yyj4995)
				if r.TryDecodeAsNil() {
					yyv4995[yyj4995] = ComponentStatus{}
				} else {
					yyv4997 := &yyv4995[yyj4995]
					yyv4997.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4995 := 0
		for ; !r.CheckBreak(); yyj4995++ {

			if yyj4995 >= len(yyv4995) {
				yyv4995 = append(yyv4995, ComponentStatus{}) // var yyz4995 ComponentStatus
				yyc4995 = true
			}
			yyh4995.ElemContainerState(yyj4995)
			if yyj4995 < len(yyv4995) {
				if r.TryDecodeAsNil() {
					yyv4995[yyj4995] = ComponentStatus{}
				} else {
					yyv4998 := &yyv4995[yyj4995]
					yyv4998.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4995 < len(yyv4995) {
			yyv4995 = yyv4995[:yyj4995]
			yyc4995 = true
		} else if yyj4995 == 0 && yyv4995 == nil {
			yyv4995 = []ComponentStatus{}
			yyc4995 = true
		}
	}
	yyh4995.End()
	if yyc4995 {
		*v = yyv4995
	}
}
